// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name mJCLib
import Foundation
import ODSFoundation
import Swift
import UIKit
import _Concurrency
@_exported import mJCLib
@objc @_inheritsConvenienceInitializers open class mJCOfflineHelper : ObjectiveC.NSObject {
  public static func getODataEntriesfromOffline<T>(queryRequest: Swift.String, storeName: Swift.String, entitySetClassType: T.Type, completionHandler: @escaping (Swift.Dictionary<Swift.String, Any>, Foundation.NSError?) -> ()) where T : ObjectiveC.NSObject
  public static func getODataEntriesfromOffline(queryRequest: Swift.String, storeName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func SODataRequestToNSMutableDictionary(SODataRequest: ODSFoundation.SODataRequestExecution) -> Foundation.NSMutableDictionary
  public static func getBatchEntries(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, storeName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createOfflineEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, storeName: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateOfflineEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteOfflineEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationTaskModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Notification: Swift.String
  @objc public var Task: Swift.String
  @objc public var Item: Swift.String
  @objc public var PlannedStartTime: ODSFoundation.SODataDuration
  @objc public var OnlineSearch: Swift.String
  @objc public var PlannedFinishTime: ODSFoundation.SODataDuration
  @objc public var CompletedBy: Swift.String
  @objc public var CatalogType: Swift.String
  @objc public var CompletedOn: Foundation.Date?
  @objc public var CodeGroup: Swift.String
  @objc public var CompletionTime: ODSFoundation.SODataDuration
  @objc public var TaskCode: Swift.String
  @objc public var TaskText: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var ChangedBy: Swift.String
  @objc public var ChangedOn: Foundation.Date?
  @objc public var PlannedStart: Foundation.Date?
  @objc public var PlannedFinish: Foundation.Date?
  @objc public var ObjectNumber: Swift.String
  @objc public var SortNumber: Swift.String
  @objc public var Cause: Swift.String
  @objc public var TaskProcessor: Swift.String
  @objc public var Responsible: Swift.String
  @objc public var Quantity: Foundation.NSDecimalNumber
  @objc public var UnitofMeasure: Swift.String
  @objc public var Delete: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var SystemStatus: Swift.String
  @objc public var UserStatus: Swift.String
  @objc public var MobileStatus: Swift.String
  @objc public var TempID: Swift.String
  @objc public var StatusFlag: Swift.String
  @objc public var CarriedOutBy: Swift.String
  @objc public var CarriedOutDate: Foundation.Date?
  @objc public var CarriedOutTime: ODSFoundation.SODataDuration
  @objc public var StatusProfile: Swift.String
  @objc public var UserStatusCode: Swift.String
  @objc public var MobileObjectType: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getNotificationTaskList(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificationTaskListCount(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNotificationTaskDetails(notifNum: Swift.String, taskNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoItemTaskList(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoItemTaskListCount(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoItemTaskDetails(notifNum: Swift.String, itemNum: Swift.String, taskNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNotificationtaskList(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNotificationTaskListCount(notifNum: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNotificationTaskDetails(notifNum: Swift.String, taskNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemTaskList(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemTaskListCount(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoItemTaskDetails(notifNum: Swift.String = "", itemNum: Swift.String, taskNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTaskModel.Type? = NotificationTaskModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNotificationTaskEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNotificationTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNotificationTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createNoItemTaskEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNoItemTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoItemTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoNotificationTaskEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNotificationTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNotificationTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoNoItemTaskEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoItemTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoItemTaskEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class StorageLocationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Plant: Swift.String
  @objc public var StorLocation: Swift.String
  @objc public var StorageLocationDescription: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getStorageLocation(plant: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.StorageLocationModel.Type? = StorageLocationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WoComponentModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var BusinessAreaText: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var ItemCategory: Swift.String
  @objc public var Reservation: Swift.String
  @objc public var Item: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var Deleted: Swift.Bool
  @objc public var MvtAllowed: Swift.Bool
  @objc public var FinalIssue: Swift.Bool
  @objc public var Material: Swift.String
  @objc public var Plant: Swift.String
  @objc public var StorLocation: Swift.String
  @objc public var Batch: Swift.String
  @objc public var ReqmtQty: Foundation.NSDecimalNumber
  @objc public var BaseUnit: Swift.String
  @objc public var WithdrawalQty: Foundation.NSDecimalNumber
  @objc public var QuantityinUnE: Foundation.NSDecimalNumber
  @objc public var UnitofEntry: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var MovementType: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var ItemText: Swift.String
  @objc public var PlannofOpera: Swift.String
  @objc public var StorageBin: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var Counter: Swift.String
  @objc public var MaterialGroup: Swift.String
  @objc public var MaterialDescription: Swift.String
  @objc public var TempID: Swift.String
  @objc public var IssueFlag: Swift.String
  @objc public var isCompleted: Swift.Bool
  @objc public var isSelected: Swift.Bool
  @objc public var Description: Swift.String
  @objc public var QuantityinUne: Foundation.NSDecimalNumber
  @objc public var ReferenceOrder: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getComponentsList(filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getComponentsListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getComponentsWith(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getComponentsCountWith(workOrderNo: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getComponentDetails(workOrderNo: Swift.String, operationNum: Swift.String, modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getComponentDetails(filterQuery: Swift.String, modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoHistoryComponentDetails(workorderNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorComponentsList(filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorComponentsListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getSuperVisorComponentsWith(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorComponentsCountWith(workOrderNo: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getSuperVisorComponentDetails(workOrderNo: Swift.String, operationNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorComponentDetails(filterQuery: Swift.String, modelClass: mJCLib.WoComponentModel.Type? = WoComponentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createComponentEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateComponentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteComponentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AssetDetailsModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ObjectID: Swift.String
  @objc public var GISID: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var LayerRef: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getassetDetailsList(filterQuery: Swift.String? = "", modelClass: mJCLib.AssetDetailsModel.Type? = AssetDetailsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PushSubscriptonModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PriorityListModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var PriorityType: Swift.String
  @objc public var Priority: Swift.String
  @objc public var PriorityText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getPriorityList(filterQuery: Swift.String? = "", modelClass: mJCLib.PriorityListModel.Type? = PriorityListModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AttachmentModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ClassName: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var ClassType: Swift.String
  @objc public var ObjectKey: Swift.String
  @objc public var DocId: Swift.String
  @objc public var AttachmentSource: Swift.String
  @objc public var DocVerNo: Swift.String
  @objc public var DocVarId: Swift.String
  @objc public var DocVarTg: Swift.String
  @objc public var CompCount: Swift.String
  @objc public var PropName: Swift.String
  @objc public var PropValue: Swift.String
  @objc public var Extension: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var DocCount: Swift.String
  @objc public var CompID: Swift.String
  @objc public var MimeType: Swift.String
  @objc public var CompSize: Swift.String
  @objc public var isDownload: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getWoAttachmentList(filterQuery: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoAttachmentListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoAttachmentList(workOrderNo: Swift.String, className: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoAttachmentCountWith(workOrderNo: Swift.String, className: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoAttachmentList(filterQuery: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoAttachmentListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoAttachmentList(notifNo: Swift.String, className: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoAttachmentCountWith(notifNo: Swift.String, className: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoAttachmentList(filterQuery: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoAttachmentListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoAttachmentList(notifNo: Swift.String, className: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoAttachmentCountWith(notifNo: Swift.String, className: Swift.String? = "", modelClass: mJCLib.AttachmentModel.Type? = AttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func deleteWoAttachmentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoAttachmentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WoCapacityModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var CapRecordId: Swift.String
  @objc public var IntCounter: Swift.String
  @objc public var CapReqCnt: Swift.String
  @objc public var WoNum: Swift.String
  @objc public var OprRoutNo: Swift.String
  @objc public var OprCounter: Swift.String
  @objc public var Operation: Swift.String
  @objc public var RemSplitInd: Swift.String
  @objc public var CapacityId: Swift.String
  @objc public var NoOfSplits: Foundation.NSDecimalNumber
  @objc public var PersNo: Swift.String
  @objc public var SplitNo: Swift.UInt16
  @objc public var Work: Foundation.NSDecimalNumber
  @objc public var WorkUOM: Swift.String
  @objc public var NormalDuration: Foundation.NSDecimalNumber
  @objc public var NormalDurationUnit: Swift.String
  @objc public var StartDate: Foundation.Date?
  @objc public var StartTime: ODSFoundation.SODataDuration
  @objc public var EndDate: Foundation.Date?
  @objc public var EndTime: ODSFoundation.SODataDuration
  @objc public var EnteredBy: Swift.String
  @objc public var Action: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWoOperationCapacityData(workOrderNum: Swift.String? = "", operation: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.WoCapacityModel.Type? = WoCapacityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoOperationCapacityMemberEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoOperationCapacityMemberEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoOperationCapacityMemberEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ServiceConfigModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ReqID: Swift.String
  @objc public var EntitySet: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var AppStoreName: Swift.String
  @objc public var Keys: Swift.String
  @objc public var EntityType: Swift.String
  @objc public var ClassName: Swift.String
  @objc public var Object: Swift.String
  @objc public var Active: Swift.String
  @objc public var AppStoreId: Swift.String
  @objc public var ServiceURL: Swift.String
  @objc public var AppStoreCode: Swift.String
  @objc public var DisplayName: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getServcieConfigList(modelClass: mJCLib.ServiceConfigModel.Type? = ServiceConfigModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineServcieConfigList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "") -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WoOperationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var SubOperation: Swift.String
  @objc public var TaskListType: Swift.String
  @objc public var Group: Swift.String
  @objc public var GroupCounter: Swift.String
  @objc public var InternalCounter: Swift.String
  @objc public var PlannofOpera: Swift.String
  @objc public var Counter: Swift.String
  @objc public var Sequence: Swift.String
  @objc public var ControlKey: Swift.String
  @objc public var Plant: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var WoPriority: Swift.String
  @objc public var StdTextkey: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var SupOpNode: Swift.String
  @objc public var SortTerm: Swift.String
  @objc public var MaterialGroup: Swift.String
  @objc public var Priority: Swift.String
  @objc public var PlannerGroup: Swift.String
  @objc public var PlannerGroupDes: Swift.String
  @objc public var ActivityType: Swift.String
  @objc public var SystemCondition: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var MaintPlanningPlant: Swift.String
  @objc public var PersonnelNo: Swift.String
  @objc public var InspectionType: Swift.String
  @objc public var DeletionFlag: Swift.Bool
  @objc public var FuncLoc: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var EquipCategory: Swift.String
  @objc public var TechID: Swift.String
  @objc public var FuncLocCategory: Swift.String
  @objc public var ToWorkCenter: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var NotificationNum: Swift.String
  @objc public var ActualWork: Foundation.NSDecimalNumber
  @objc public var EarlSchStartExecDate: Foundation.Date?
  @objc public var EarlSchStartExecTime: ODSFoundation.SODataDuration
  @objc public var EarlSchFinishExecDate: Foundation.Date?
  @objc public var EarlSchFinishExecTime: ODSFoundation.SODataDuration
  @objc public var ActStartExecDate: Foundation.Date?
  @objc public var ActStartExecTime: ODSFoundation.SODataDuration
  @objc public var ActFinishExecDate: Foundation.Date?
  @objc public var ActFinishExectime: ODSFoundation.SODataDuration
  @objc public var LatestSchStartDate: Foundation.Date?
  @objc public var LatestSchStartTime: ODSFoundation.SODataDuration
  @objc public var LatestSchFinishDate: Foundation.Date?
  @objc public var LatestSchFinishTime: ODSFoundation.SODataDuration
  @objc public var SystemStatusCode: Swift.String
  @objc public var SystemStatus: Swift.String
  @objc public var UserStatusCode: Swift.String
  @objc public var UserStatus: Swift.String
  @objc public var MobileStatus: Swift.String
  @objc public var MobileObjectType: Swift.String
  @objc public var StatusFlag: Swift.String
  @objc public var TransferFlag: Swift.String
  @objc public var TransferReason: Swift.String
  @objc public var TransferPerson: Swift.String
  @objc public var PurchaseGroup: Swift.String
  @objc public var TrackingNu: Swift.String
  @objc public var Vendor: Swift.String
  @objc public var TempID: Swift.String
  @objc public var Notes: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var ConfNo: Swift.String
  @objc public var Work: Foundation.NSDecimalNumber
  @objc public var UnitWork: Swift.String
  @objc public var NumberPerson: Swift.UInt16
  @objc public var NormalDuration: Foundation.NSDecimalNumber
  @objc public var NormalDurationUnit: Swift.String
  @objc public var CalculationKey: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var OpObjectNum: Swift.String
  @objc public var isCompleted: Swift.Bool
  @objc public var isSelected: Swift.Bool
  @objc public var WorkOrderDetailsInfo: Swift.Bool
  @objc public var Location: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getOperationList(filterQuery: Swift.String? = "", modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOperationListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getOperationsListForWorkOrder(filterQuery: Swift.String? = "", workOrderNo: Swift.String, modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOperationsListCountForWorkOrder(workOrderNo: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getOperationDetails(workOrderNo: Swift.String, operationNo: Swift.String, modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOperationDetailsWithQuery(filterQuery: Swift.String, modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineWoOperations(filterQuery: Swift.String? = "", httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func updateOnlineWorkorderEntity(httpcon: ODSFoundation.HttpConversationManager, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func getWoConfirmationSet(filterQuery: Swift.String? = "", modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorOperationsList(filterQuery: Swift.String? = "", modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorOperationsListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getSuperVisorWorkOrderOperationsWithWONum(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorWorkOrderOperationsCountWithWONum(workOrderNo: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getSuperVisorOperationDetails(workOrderNo: Swift.String, operationNo: Swift.String, modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorOperationDetailsWithQuery(filterQuery: Swift.String, modelClass: mJCLib.WoOperationModel.Type? = WoOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createOperationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateOperationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteOperationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoConfirmationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ClassCharacteristicValueModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var CharId: Swift.String
  @objc public var CharName: Swift.String
  @objc public var CharValCounter: Swift.String
  @objc public var IntCounter: Swift.String
  @objc public var CharValFrom: Swift.Double
  @objc public var CharValTo: Swift.Double
  @objc public var CharValue: Swift.String
  @objc public var CharValueDescr: Swift.String
  @objc public var UoM: Swift.String
  @objc public var ValueRel: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getclassCharacteristicValueList(filterQuery: Swift.String? = "", modelClass: mJCLib.ClassCharacteristicValueModel.Type? = ClassCharacteristicValueModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EquipFuncLocMeasurementModel : ObjectiveC.NSObject {
  @objc public var Equipment: Swift.String
  @objc public var FunctionalLocation: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var WoObjectNum: Swift.String
  @objc public var OpObjectNum: Swift.String
  @objc public var Counter: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getOperationEquipFuncLocDetails(workOrderNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.EquipFuncLocMeasurementModel.Type? = EquipFuncLocMeasurementModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOperationEquipFuncLocDetailsForSupervisor(workOrderNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.EquipFuncLocMeasurementModel.Type? = EquipFuncLocMeasurementModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InspectionCharModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var InspLot: Swift.String
  @objc public var SelectedSet: Swift.String
  @objc public var InspOper: Swift.String
  @objc public var InspPoint: Swift.String
  @objc public var InspChar: Swift.String
  @objc public var Scope: Swift.String
  @objc public var Status: Swift.String
  @objc public var StatusDesc: Swift.String
  @objc public var CharDescr: Swift.String
  @objc public var CharType: Swift.String
  @objc public var ConfirmNo: Swift.String
  @objc public var Obligatory: Swift.String
  @objc public var SingleRes: Swift.String
  @objc public var SampleRes: Swift.String
  @objc public var CharRes: Swift.String
  @objc public var Samples: Swift.String
  @objc public var MstrChar: Swift.String
  @objc public var VerionNo: Swift.String
  @objc public var PlantChar: Swift.String
  @objc public var Method: Swift.String
  @objc public var MethodTxt: Swift.String
  @objc public var VrsnMethd: Swift.String
  @objc public var PlntMthd: Swift.String
  @objc public var SmplQuant: Swift.String
  @objc public var SmplUnit: Swift.String
  @objc public var SmplUnitt: Swift.String
  @objc public var SmplUnitc: Swift.String
  @objc public var PhysSmpl: Swift.String
  @objc public var CharWeigh: Swift.String
  @objc public var CharWeighFac: Swift.String
  @objc public var CharWeighTxt: Swift.String
  @objc public var InfoField1: Swift.String
  @objc public var InfoField2: Swift.String
  @objc public var InfoField3: Swift.String
  @objc public var DecPlaces: Swift.String
  @objc public var MeasUnit: Swift.String
  @objc public var MeasUnitt: Swift.String
  @objc public var MeasUnitc: Swift.String
  @objc public var TargetVal: Swift.String
  @objc public var UpTolLmt: Swift.String
  @objc public var LwTolLmt: Swift.String
  @objc public var UpLmt1: Swift.String
  @objc public var LwLmt1: Swift.String
  @objc public var UpLmt2: Swift.String
  @objc public var LwLmt2: Swift.String
  @objc public var UpPlsLmt: Swift.String
  @objc public var LwPlsLmt: Swift.String
  @objc public var UpCtrl1: Swift.String
  @objc public var LwCtrl1: Swift.String
  @objc public var UpCtrl2: Swift.String
  @objc public var LwCtrl2: Swift.String
  @objc public var ValnType: Swift.String
  @objc public var AcceptNo: Swift.String
  @objc public var RejectNo: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getInspCharsList(inspLotNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionCharModel.Type? = InspectionCharModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getInspCharsWith(inspLotNum: Swift.String, inspOpr: Swift.String, inspPoint: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionCharModel.Type? = InspectionCharModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AppStoreModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var AppStoreName: Swift.String
  @objc public var AppStoreId: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var Active: Swift.String
  @objc public var Flush: Swift.String
  @objc public var Refresh: Swift.String
  @objc public var ServiceName: Swift.String
  @objc public var SapStore: Swift.String
  @objc public var BaseUrl: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var SyncSeq: Swift.String
  @objc public var WC_Clear: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAppStoreList(modelClass: mJCLib.AppStoreModel.Type? = AppStoreModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getOnlineAppStoreList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "\(appStoreSet)") -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HistoryAndPendingModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var OnlineSearch: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var ReferenceOrder: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var ObjectNum: Swift.String
  @objc public var Priority: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var Startdate: Foundation.Date?
  @objc public var TechCompletion: Foundation.Date?
  @objc public var BasicFinishDate: Foundation.Date?
  @objc public var BasicStartDate: Foundation.Date?
  @objc public var EmplApplName: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FunctionalLoc: Swift.String
  @objc public var isExpandCell: Swift.Bool
  @objc public var isNotesAvailable: Swift.Bool
  @objc public var Breakdown: Swift.Bool
  @objc public var CompletionDate: Foundation.Date?
  @objc public var CompletionTime: ODSFoundation.SODataDuration
  @objc public var ContactPerson: Swift.String
  @objc public var Description: Swift.String
  @objc public var LastFirstName: Swift.String
  @objc public var MalFunctionEnd: ODSFoundation.SODataDuration
  @objc public var MalFunctionStart: Foundation.Date?
  @objc public var Notification: Swift.String
  @objc public var NotificationType: Swift.String
  @objc public var ObjectNumber: Swift.String
  @objc public var ReqEndtTime: ODSFoundation.SODataDuration
  @objc public var ReqStart: Foundation.Date?
  @objc public var ReqStartTime: ODSFoundation.SODataDuration
  @objc public var RequiredEnd: Foundation.Date?
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWorkOrderHistoryList(filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWorkOrderHistory(workOrderNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWorkOrderPendingList(filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWorkOrderPending(workOrderNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificatonHistoryList(filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificatonHistory(notifNum: Swift.String, equipNum: Swift.String, funcLoc: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificatonPendingList(filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificatonPending(notifNum: Swift.String, equipNum: Swift.String, funcLoc: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingModel.Type? = HistoryAndPendingModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ComponentAvailabilityModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var MaterialDescription: Swift.String
  @objc public var Material: Swift.String
  @objc public var Plant: Swift.String
  @objc public var MaterialStorageLocation: Swift.String
  @objc public var MaterialType: Swift.String
  @objc public var IndustrySector: Swift.String
  @objc public var MaterialGroup: Swift.String
  @objc public var BaseUnit: Swift.String
  @objc public var Stock: Foundation.NSDecimalNumber
  @objc public var BOMCategory: Swift.String
  @objc public var BOM: Swift.String
  @objc public var ItemNode: Swift.String
  @objc public var ComponentUnit: Swift.String
  @objc public var Quantity: Foundation.NSDecimalNumber
  @objc public var EnteredBy: Swift.String
  @objc public var Counter: Swift.String
  @objc public var Component: Swift.String
  @objc public var InheritedItemNode: Swift.String
  @objc public var ItemCategory: Swift.String
  @objc public var ItemGroup: Swift.String
  @objc public var ItemId: Swift.String
  @objc public var ReferenceOrder: Swift.String
  @objc public var Reservation: Swift.String
  @objc public var Item: Swift.String
  @objc public var Deleted: Swift.Bool
  @objc public var MvtAllowed: Swift.Bool
  @objc public var FinalIssue: Swift.Bool
  @objc public var StorLocation: Swift.String
  @objc public var Batch: Swift.String
  @objc public var ReqmtQy: Foundation.NSDecimalNumber
  @objc public var WithdrawalQty: Foundation.NSDecimalNumber
  @objc public var QuantityinUne: Foundation.NSDecimalNumber
  @objc public var UnitofEntry: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var MovementType: Swift.String
  @objc public var ItemText: Swift.String
  @objc public var PlannofOpera: Swift.String
  @objc public var StorageBin: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var Description: Swift.String
  @objc public var TempID: Swift.String
  @objc public var IssueFlag: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getHTMaterialStorageLocationList(plant: Swift.String? = "", storageLocation: Swift.String? = "", inStock: Swift.Bool? = false, filterQuery: Swift.String? = "", modelClass: mJCLib.ComponentAvailabilityModel.Type? = ComponentAvailabilityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineHTMaterialStorageLocationList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "") -> Foundation.NSMutableDictionary
  public static func getBomComponentsList(bomCategory: Swift.String = "", bomNum: Swift.String = "", inStock: Swift.Bool? = false, filterQuery: Swift.String? = "", modelClass: mJCLib.ComponentAvailabilityModel.Type? = ComponentAvailabilityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineBomComponentsList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "") -> Foundation.NSMutableDictionary
  public static func getWoHistoryComponentsList(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ComponentAvailabilityModel.Type? = ComponentAvailabilityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ActivityTypeModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var OrderType: Swift.String
  @objc public var MaintActivType: Swift.String
  @objc public var Description: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getActivityList(filterQuery: Swift.String? = "", modelClass: mJCLib.ActivityTypeModel.Type? = ActivityTypeModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class appUserTableModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var RecordId: Swift.Int32
  @objc public var SettingGrp: Swift.String
  @objc public var SettingName: Swift.String
  @objc public var SettingValue: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getUserDetailsList(modelClass: mJCLib.appUserTableModel.Type? = appUserTableModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class UserDetailsModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var LastName: Swift.String
  @objc public var FirstName: Swift.String
  @objc public var Userdisplayname: Swift.String
  @objc public var PersonnelNo: Swift.String
  @objc public var Comp_code: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var Org_unit: Swift.String
  @objc public var Position: Swift.String
  @objc public var Job: Swift.String
  @objc public var COArea: Swift.String
  @objc public var Pers_Subarea: Swift.String
  @objc public var PersonnelArea: Swift.String
  @objc public var Emp_group: Swift.String
  @objc public var Emp_SubGroup: Swift.String
  @objc public var Supervisor: Swift.String
  @objc public var technician: Swift.Bool
  @objc public var Role_ID: Swift.String
  @objc public var Dashboard_ID: Swift.String
  @objc public var Assignment_Type: Swift.String
  @objc public var OpWorkCentter: Swift.String
  @objc public var userStorageLocation: Swift.String
  @objc public var WORKORDER_ASSIGNMENT_TYPE: Swift.String
  @objc public var ADD_ASSIGNMENT_TYPE: Swift.String
  @objc public var NOTIFICATION_ASSIGNMENT_TYPE: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var Plant: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AlertMsgModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var MsgID: Swift.String
  @objc public var MsgKey: Swift.String
  @objc public var MsgType: Swift.String
  @objc public var StatusCategory: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var Message: Swift.String
  @objc public var Language: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAlertMsgList(modelClass: mJCLib.AlertMsgModel.Type? = AlertMsgModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationActivityModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Notification: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var Activity: Swift.String
  @objc public var Item: Swift.String
  @objc public var Cause: Swift.String
  @objc public var CatalogType: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var ActivityCode: Swift.String
  @objc public var ActivityCodeText: Swift.String
  @objc public var ActivityText: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var TaskClass: Swift.String
  @objc public var Classificatn: Swift.String
  @objc public var StartDate: Foundation.Date?
  @objc public var StartTime: ODSFoundation.SODataDuration
  @objc public var EndDate: Foundation.Date?
  @objc public var EndTime: ODSFoundation.SODataDuration
  @objc public var Delete: Swift.String
  @objc public var SortNumber: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var TempID: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getNotificationActivityList(notifNum: Swift.String = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificationActivityListCount(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNotificationActivityDetails(notifNum: Swift.String? = "", activityNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoItemActivityList(notifNum: Swift.String = "", itemNum: Swift.String = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoItemActivityListCount(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoItemActivityDetails(notifNum: Swift.String, itemNum: Swift.String, activityNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNotificationActivityList(notifNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNotificationActivityListCount(notifNum: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNotificationActivityDetails(notifNum: Swift.String, activityNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemActivityList(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemActivityListCount(notifNum: Swift.String, itemNum: Swift.String, filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoItemActivityDetails(notifNum: Swift.String, itemNum: Swift.String, activityNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationActivityModel.Type? = NotificationActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNotificationActivityEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNotificationActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNotificationActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createNoItemActivityEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNoItemActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoItemActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoNotificationActivityEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNotificationActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNotificationActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoNoItemActivityEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoItemActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoItemActivityEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InspectionOperationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var EnteredBy: Swift.String
  @objc public var RoutingNumber: Swift.String
  @objc public var NodeNumber: Swift.String
  @objc public var InspectionLot: Swift.String
  @objc public var TaskListType: Swift.String
  @objc public var Group: Swift.String
  @objc public var GroupCounter: Swift.String
  @objc public var Sequence: Swift.String
  @objc public var Operation: Swift.String
  @objc public var Plant: Swift.String
  @objc public var SupOperNode: Swift.String
  @objc public var ControlKey: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var Counter: Swift.String
  @objc public var Nodes: Swift.String
  @objc public var Confirmation: Swift.String
  @objc public var ObjectNumber: Swift.String
  @objc public var Denominator: Foundation.NSDecimalNumber
  @objc public var Numerator: Foundation.NSDecimalNumber
  @objc public var InspPtComplete: Swift.String
  @objc public var BaseQuantity: Foundation.NSDecimalNumber
  @objc public var UoM: Swift.String
  @objc public var OperationQty: Foundation.NSDecimalNumber
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getInspOperationList(inspLotNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionOperationModel.Type? = InspectionOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class formateHelperClass : ObjectiveC.NSObject {
  public static func getListInFormte<T>(dictionary: Foundation.NSMutableDictionary, entityModelClassType: T.Type) -> Swift.Dictionary<Swift.String, Any> where T : ObjectiveC.NSObject
  public static func getConfirmationOpeartionlist(dictionary: Swift.Dictionary<Swift.String, Any>) -> Swift.Dictionary<Swift.String, Any>
  public static func getApplicationConfigurationsInformate(dictionary: Foundation.NSMutableDictionary, from: Swift.String) -> Foundation.NSMutableDictionary
  public static func getLoggedInUserDetailsInFormate(dict: Swift.Dictionary<Swift.String, Any>) -> Swift.Dictionary<Swift.String, Any>
  public static func getAttachmentlist(dictionary: Swift.Dictionary<Swift.String, Any>) -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class mjcPushHelper : ObjectiveC.NSObject {
  public static func regsterForPushSubscription(with httphandler: ODSFoundation.SODataV4_HttpConversationHandler?, entity: ODSFoundation.SODataEntity, options: Swift.Dictionary<Swift.String, Any>!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deletePushSubscription(queryRequest: Swift.String, StoreName: Swift.String, pushDeletedelegate: ODSFoundation.pushDeleteDelegate, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LtOrderControlKeyModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var OrderType: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var Plant: Swift.String
  @objc public var PriorityType: Swift.String
  @objc public var NotificationType: Swift.String
  @objc public var OrderDescription: Swift.String
  @objc public var PlantDescription: Swift.String
  @objc public var ValuationArea: Swift.String
  @objc public var ControlKey: Swift.String
  @objc public var CompanyCode: Swift.String
  @objc public var CompanyName: Swift.String
  @objc public var BusinessProcess: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getltOrderControlKeyList(filterQuery: Swift.String? = "", modelClass: mJCLib.LtOrderControlKeyModel.Type? = LtOrderControlKeyModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getltWorkOrderTypeList(filterQuery: Swift.String? = "", modelClass: mJCLib.LtOrderControlKeyModel.Type? = LtOrderControlKeyModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AttachmentTypeModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ObjectCategory: Swift.String
  @objc public var ClassName: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var DMS: Swift.String
  @objc public var BDS: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAttachmentTypeList(filterQuery: Swift.String? = "", modelClass: mJCLib.AttachmentTypeModel.Type? = AttachmentTypeModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AssetHierarchyModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ObjectId: Swift.String
  @objc public var TableId: Swift.String
  @objc public var `Type`: Swift.String
  @objc public var ParentId: Swift.String
  @objc public var HierLevel: Swift.Int
  @objc public var Description: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var NumChilds: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAssetHierarchyList(plant: Swift.String? = "", workCenter: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.AssetHierarchyModel.Type? = AssetHierarchyModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SupervisorTechnicianModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var SystemID: Swift.String
  @objc public var Technician: Swift.String
  @objc public var Name: Swift.String
  @objc public var TechnicianWorkordercount: Swift.Int
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getSupervisorTechncianDetails(filterQuery: Swift.String? = "", modelClass: mJCLib.SupervisorTechnicianModel.Type? = SupervisorTechnicianModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class mJCLoader : ObjectiveC.NSObject {
  public static func startAnimating(status: Swift.String)
  public static func stopAnimating()
  public static func resumeAnimating()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class StatusCategoryModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Msgkey: Swift.String
  @objc public var RecordNo: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var Sequence: Swift.Int
  @objc public var StatusCode: Swift.String
  @objc public var StatusVisible: Swift.String
  @objc public var StatusDescKey: Swift.String
  @objc public var VoiceCommandResKey: Swift.String
  @objc public var CnfPopup: Swift.String
  @objc public var ImageResKey: Swift.String
  @objc public var InProcess: Swift.Bool
  @objc public var StatuscCategory: Swift.String
  @objc public var Active: Swift.String
  @objc public var CaptureTime: Swift.String
  @objc public var PostTime: Swift.String
  @objc public var Ref_Cal_Status: Swift.String
  @objc public var ActivityType: Swift.String
  @objc public var ActivityTypeDesc: Swift.String
  @objc public var DispTimeSheetString: Swift.String
  @objc public var PreCheck: Swift.Int16
  @objc public var PostConfirmations: Swift.String
  @objc public var StatusType: Swift.String
  @objc public var AllowWoCreate: Swift.Bool
  @objc public var EnteredBy: Swift.String
  @objc public var RoleId: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getStatusCategoryList(modelClass: mJCLib.StatusCategoryModel.Type? = StatusCategoryModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PremiumIdModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var PSGrouping: Swift.String
  @objc public var PremiumNo: Swift.String
  @objc public var PremiumID: Swift.String
  @objc public var PremiumText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getPremiumIdList(filterQuery: Swift.String? = "", modelClass: mJCLib.PremiumIdModel.Type? = PremiumIdModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public protocol LoginCredentialDelegate {
  func ProvideUsernamePassword() -> Foundation.URLCredential
}
public protocol OfflineStoreDelegate {
  func IntialStoreOpened()
  func StoreOpenFinished()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class mJCLoginHelper : ObjectiveC.NSObject, ODSFoundation.UserCredentialDelegate, ODSFoundation.ODSStoreDelegate, ODSFoundation.ODSStoreStatusDelegate, ODSFoundation.UsernamePasswordProviderProtocol {
  @objc public func provideUsernamePassword(forAuthChallenge authChallenge: Foundation.URLAuthenticationChallenge!, completionBlock: ODSFoundation.username_password_provider_completion_t!)
  public func ProvideUsernamePassword() -> Foundation.URLCredential
  public class var uniqueInstance: mJCLib.mJCLoginHelper {
    get
  }
  public static func registerUser(with manager: ODSFoundation.HttpConversationManager?, toServer rawServerUrl: Swift.String?, andAppId appId: Swift.String?, completion completionBlock: @escaping (_ connectiondata: Foundation.Data?, _ urlresponse: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)
  public static func deleteUserRegistration(_ applicationConnectionId: Swift.String?, with manager: ODSFoundation.HttpConversationManager?, fromServer rawServerUrl: Swift.String?, withAppId appId: Swift.String?, completion completionBlock: @escaping (_ connectiondata: Foundation.Data?, _ urlresponse: Foundation.URLResponse?, _ error: Foundation.NSError?, _ success: Swift.Bool) -> Swift.Void)
  public func registerUser1(completion completionBlock: @escaping (_ connectiondata: Foundation.Data?, _ urlresponse: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)
  public static func setLoggedInUser(userID: Swift.String)
  public func openIntialStore()
  public func openAllStores()
  public func offlineStoreOpenFailed(storeName: Swift.String, error: Swift.Error!)
  public func ODSStoreStatus(storeStatus: Swift.String)
  public func offlineStoreOpenFinished(storeName: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EquipmentModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Equipment: Swift.String
  @objc public var EquipDescription: Swift.String
  @objc public var EquipCategory: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var EnteredBy: Swift.String
  @objc public var ChangedOn: Foundation.Date?
  @objc public var ChangedBy: Swift.String
  @objc public var AuthorizGroup: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var InventoryNo: Swift.String
  @objc public var SizeDimens: Swift.String
  @objc public var Weight: Foundation.NSDecimalNumber
  @objc public var UnitofWeight: Swift.String
  @objc public var AcquistionDate: Foundation.Date?
  @objc public var AcquistnValue: Foundation.NSDecimalNumber
  @objc public var Currency: Swift.String
  @objc public var WarrantyEnd: Foundation.Date?
  @objc public var Manufacturer: Swift.String
  @objc public var ManufCountry: Swift.String
  @objc public var ManufSerialNo: Swift.String
  @objc public var ModelNumber: Swift.String
  @objc public var ConstructYear: Swift.String
  @objc public var ConstructMth: Swift.String
  @objc public var DeliveryDate: Foundation.Date?
  @objc public var StartupDate: Foundation.Date?
  @objc public var WarrantyDate: Foundation.Date?
  @objc public var ObjectNumber: Swift.String
  @objc public var EquipmentData: Swift.Bool
  @objc public var Configuration: Swift.Bool
  @objc public var ProdResTools: Swift.Bool
  @objc public var ValidFrom: Foundation.Date?
  @objc public var PlanningPlant: Swift.String
  @objc public var ManufPartNo: Swift.String
  @objc public var SuperiorEquipment: Swift.String
  @objc public var Position: Swift.String
  @objc public var PlannerGroup: Swift.String
  @objc public var PlantWorkCenter: Swift.String
  @objc public var LocAccAssmt: Swift.String
  @objc public var Customer: Swift.String
  @objc public var Vendor: Swift.String
  @objc public var CatalogProfile: Swift.String
  @objc public var EquipLongText: Swift.Bool
  @objc public var FuncLocation: Swift.String
  @objc public var ABCIndicator: Swift.String
  @objc public var MaintPlant: Swift.String
  @objc public var Location: Swift.String
  @objc public var Room: Swift.String
  @objc public var PlantSection: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var COArea: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var WBSElement: Swift.String
  @objc public var CompanyCode: Swift.String
  @objc public var Asset: Swift.String
  @objc public var SubNumber: Swift.String
  @objc public var SettlementOrder: Swift.String
  @objc public var ConstType: Swift.String
  @objc public var TechIdentNo: Swift.String
  @objc public var StandingOrder: Swift.String
  @objc public var AddNumber: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var SystemStatus: Swift.String
  @objc public var UserStatus: Swift.String
  @objc public var SystemStatusCode: Swift.String
  @objc public var UserStatusCode: Swift.String
  @objc public var UpdateFlag: Swift.String
  @objc public var CusWarrantyType: Swift.String
  @objc public var CusWarrantyStartDate: Foundation.Date?
  @objc public var CusWarrantyEndDate: Foundation.Date?
  @objc public var CusMasterWarranty: Swift.String
  @objc public var CusWarrantyStatus: Swift.String
  @objc public var VenWarrantyType: Swift.String
  @objc public var VenWarrantyStartDate: Foundation.Date?
  @objc public var VenWarrantyEndDate: Foundation.Date?
  @objc public var VenMasterWarranty: Swift.String
  @objc public var VenWarrantyStatus: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getEquipmentList(filterQuery: Swift.String? = "", modelClass: mJCLib.EquipmentModel.Type? = EquipmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getEquipmentDetails(equipNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.EquipmentModel.Type? = EquipmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getEquipmentListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWorkorderEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWorkorderEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWorkorderEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class OrderTypeFeatureModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Feature: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var Object: Swift.String
  @objc public var MandatoryLevel: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getOrderTypeFeaturesList(filterQuery: Swift.String? = "", modelClass: mJCLib.OrderTypeFeatureModel.Type? = OrderTypeFeatureModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WoHeaderModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var WorkOrderNum: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var NotificationNum: Swift.String
  @objc public var Category: Swift.String
  @objc public var CategoryText: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var LastChangedBy: Swift.String
  @objc public var ChangeDtForOrderMaster: Foundation.Date?
  @objc public var Plant: Swift.String
  @objc public var BusArea: Swift.String
  @objc public var BusAreaText: Swift.String
  @objc public var ControllingArea: Swift.String
  @objc public var ResponsibleCostCenter: Swift.String
  @objc public var Status: Swift.String
  @objc public var TechCompletionDate: Foundation.Date?
  @objc public var DeletionFlag: Swift.Bool
  @objc public var StrtDate: Foundation.Date?
  @objc public var CompanyCode: Swift.String
  @objc public var PersonResponsible: Swift.String
  @objc public var PersonInchargeTel: Swift.String
  @objc public var WorkPermitIssued: Swift.String
  @objc public var ObjectNumber: Swift.String
  @objc public var WBSElem: Swift.String
  @objc public var ToMainWorkCtr: Swift.String
  @objc public var ToPlantMainWorkCtr: Swift.String
  @objc public var MainWorkCtr: Swift.String
  @objc public var PlantMainWorkCtr: Swift.String
  @objc public var BasicFnshDate: Foundation.Date?
  @objc public var BasicStrtDate: Foundation.Date?
  @objc public var SchdFnshDate: Foundation.Date?
  @objc public var SchdStrtDate: Foundation.Date?
  @objc public var ActlStrtDate: Foundation.Date?
  @objc public var CnfOrderFinishDate: Foundation.Date?
  @objc public var ActlFnshDate: Foundation.Date?
  @objc public var ResponsiblPlannerGrp: Swift.String
  @objc public var PlannerGroupDes: Swift.String
  @objc public var BasicFnshTime: ODSFoundation.SODataDuration
  @objc public var BasicStrtTime: ODSFoundation.SODataDuration
  @objc public var Priority: Swift.String
  @objc public var FuncLocation: Swift.String
  @objc public var EquipNum: Swift.String
  @objc public var EquipCategory: Swift.String
  @objc public var FuncLocCategory: Swift.String
  @objc public var TechObjDescription: Swift.String
  @objc public var BOM: Swift.String
  @objc public var BOMCategory: Swift.String
  @objc public var TechObjLocAndAssgnmnt: Swift.String
  @objc public var SysCondition: Swift.String
  @objc public var SysContitionText: Swift.String
  @objc public var MaintPlanningPlant: Swift.String
  @objc public var CustomerNum: Swift.String
  @objc public var PersonResponsibleTechInsp: Swift.String
  @objc public var MaintActivityType: Swift.String
  @objc public var MaintActivityTypeText: Swift.String
  @objc public var MaintPlant: Swift.String
  @objc public var UserStatusCode: Swift.String
  @objc public var UserStatus: Swift.String
  @objc public var SysStatusCode: Swift.String
  @objc public var SysStatus: Swift.String
  @objc public var MobileObjStatus: Swift.String
  @objc public var MobileObjectType: Swift.String
  @objc public var WOAddressNumber: Swift.String
  @objc public var AddressNumber: Swift.String
  @objc public var TempID: Swift.String
  @objc public var StatusFlag: Swift.String
  @objc public var Notes: Swift.String
  @objc public var TransferFlag: Swift.String
  @objc public var TransferReason: Swift.String
  @objc public var TransferPerson: Swift.String
  @objc public var Breakdown: Swift.String
  @objc public var BreakdownDur: Swift.Double
  @objc public var CreateNotifFlag: Swift.String
  @objc public var InspectionLot: Swift.String
  @objc public var ErrorEntity: Swift.Bool
  @objc public var ErrorMsg: Swift.String
  @objc public var SuperiorOrder: Swift.String
  @objc public var FollowUpOrder: Swift.String
  @objc public var FolllowOnFlag: Swift.String
  @objc public var Name: Swift.String
  @objc public var Address: Swift.String
  @objc public var PhoneNumber: Swift.String
  @objc public var Latitude: Foundation.NSDecimalNumber
  @objc public var Longitude: Foundation.NSDecimalNumber
  @objc public var GeoLocation: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var Unassigned: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var isSelectedCell: Swift.Bool
  @objc public var Technician: Swift.String
  @objc public var hasAttachment: Swift.Bool
  @objc public var TechnicianName: Swift.String
  @objc public var PostalCode: Swift.String
  @objc public var TechID: Swift.String
  @objc public var Location: Swift.String
  @objc public var NAVOPERA: Foundation.NSMutableDictionary
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWorkorderList(filterQuery: Swift.String? = "", modelClass: mJCLib.WoHeaderModel.Type? = WoHeaderModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWorkorderListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWorkorderDetailsWith(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoHeaderModel.Type? = WoHeaderModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineWorkOrderList(filterQuery: Swift.String? = "", navProperty: Swift.String? = "", httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func updateOnlineWorkorderEntity(httpcon: ODSFoundation.HttpConversationManager, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func getEntitySetDetails(httpcon: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func createOnlineWorkorderEntity(httpcon: ODSFoundation.HttpConversationManager, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func getSuperVisorWorkorderList(filterQuery: Swift.String? = "", modelClass: mJCLib.WoHeaderModel.Type? = WoHeaderModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorWorkorderListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getSuperVisorWorkorderDetailsWith(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoHeaderModel.Type? = WoHeaderModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSuperVisorWorkorderList(technicianId: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.WoHeaderModel.Type? = WoHeaderModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWorkorderEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWorkorderEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWorkorderEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FunctionalLocationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var FunctionalLoc: Swift.String
  @objc public var PrimaryLang: Swift.String
  @objc public var StrIndicator: Swift.String
  @objc public var FunctLocCat: Swift.String
  @objc public var SupFunctLoc: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var EnteredBy: Swift.String
  @objc public var ChangedOn: Foundation.Date?
  @objc public var ChangedBy: Swift.String
  @objc public var StartupDate: Foundation.Date?
  @objc public var RefLocation: Swift.String
  @objc public var ConstType: Swift.String
  @objc public var ConsTypeorig: Swift.String
  @objc public var ManufPartNo: Swift.String
  @objc public var EquipInstall: Swift.Bool
  @objc public var PlanningPlant: Swift.String
  @objc public var PlannerGroup: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var CatalogProfile: Swift.String
  @objc public var LocAccAssmt: Swift.String
  @objc public var ObjectNumber: Swift.String
  @objc public var Position: Swift.String
  @objc public var EQObjecttype: Swift.String
  @objc public var InventoryNo: Swift.String
  @objc public var SizeDimens: Swift.String
  @objc public var GrossWeight: Foundation.NSDecimalNumber
  @objc public var WeightUnit: Swift.String
  @objc public var AcquistnValue: Foundation.NSDecimalNumber
  @objc public var Currency: Swift.String
  @objc public var AcquistionDate: Foundation.Date?
  @objc public var Manufacturer: Swift.String
  @objc public var ManufCountry: Swift.String
  @objc public var ConstructYear: Swift.String
  @objc public var ConstructMth: Swift.String
  @objc public var ModelNumber: Swift.String
  @objc public var ManufSerialNo: Swift.String
  @objc public var Description: Swift.String
  @objc public var MainWorkcenter: Swift.String
  @objc public var WorkcenterText: Swift.String
  @objc public var SystemStatus: Swift.String
  @objc public var UserStatus: Swift.String
  @objc public var SystemStatusCode: Swift.String
  @objc public var UserStatusCode: Swift.String
  @objc public var ABCIndicator: Swift.String
  @objc public var Sortfield: Swift.String
  @objc public var MaintPlant: Swift.String
  @objc public var Location: Swift.String
  @objc public var Room: Swift.String
  @objc public var PlantSection: Swift.String
  @objc public var PPworkctr: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var COArea: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var WBSElement: Swift.String
  @objc public var CompanyCode: Swift.String
  @objc public var Asset: Swift.String
  @objc public var Subnumber: Swift.String
  @objc public var StandgOrder: Swift.String
  @objc public var SettlementOrder: Swift.String
  @objc public var AddressNumber: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getFuncLocationList(filterQuery: Swift.String? = "", modelClass: mJCLib.FunctionalLocationModel.Type? = FunctionalLocationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getFuncLocationDetails(funcLocation: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.FunctionalLocationModel.Type? = FunctionalLocationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getFuncLocationListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CodeGroupModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Catalog: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var Code: Swift.String
  @objc public var Version: Swift.String
  @objc public var CodeGroupText: Swift.String
  @objc public var CodeText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getCatalogCodeList(cataLogCode: Swift.String? = "", codeGroup: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.CodeGroupModel.Type? = CodeGroupModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationItemCauseModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var CatalogType: Swift.String
  @objc public var Cause: Swift.String
  @objc public var CauseAssembly: Swift.String
  @objc public var CauseCode: Swift.String
  @objc public var CauseText: Swift.String
  @objc public var ChangedBy: Swift.String
  @objc public var ChangedOn: Foundation.Date?
  @objc public var CodeGroup: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var Delete: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var Item: Swift.String
  @objc public var Notification: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var Quantity: Foundation.NSDecimalNumber
  @objc public var SortNumber: Swift.String
  @objc public var TempID: Swift.String
  @objc public var UnitofMeasure: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getNotificationItemCauseList(notifNum: Swift.String, itemNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemCauseModel.Type? = NotificationItemCauseModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificationItemCauseListCount(notifNum: Swift.String, itemNum: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNotificationItemCauseDetails(notifNum: Swift.String, itemNum: Swift.String, itemCauseNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemCauseModel.Type? = NotificationItemCauseModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemCauseList(notifNum: Swift.String, itemNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemCauseModel.Type? = NotificationItemCauseModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemCauseListCount(notifNum: Swift.String, itemNum: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoItemCauseDetails(notifNum: Swift.String, itemNum: Swift.String, itemCauseNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemCauseModel.Type? = NotificationItemCauseModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNotificationItemCauseEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNotificationItemCauseEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNotificationItemCauseEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoNoItemCauseEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoItemCauseEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoItemCauseEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MaintencePlantModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Plant: Swift.String
  @objc public var Name1: Swift.String
  @objc public var ValuationArea: Swift.String
  @objc public var Name2: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var CompanyName: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getMainttencePlantList(filterQuery: Swift.String? = "", modelClass: mJCLib.MaintencePlantModel.Type? = MaintencePlantModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BatchRequestModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc required override dynamic public init()
  public static func getExecuteTransactionBatchRequest(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getExecuteQmBatchRequest(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getExecuteLowVolumeBatchRequest(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getExecuteHighVolumeBatchRequest(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InspectionPointModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var InspLot: Swift.String
  @objc public var InspOper: Swift.String
  @objc public var InspPoint: Swift.String
  @objc public var PointDesc: Swift.String
  @objc public var PartialLot: Swift.String
  @objc public var Quantity: Swift.String
  @objc public var Unit: Swift.String
  @objc public var UnitText: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FunctLoc: Swift.String
  @objc public var PhysSmpl: Swift.String
  @objc public var Usert1: ODSFoundation.SODataDuration
  @objc public var Userc1: Swift.String
  @objc public var Userc2: Swift.String
  @objc public var Usern1: Swift.String
  @objc public var Usern2: Swift.String
  @objc public var Userd1: Foundation.Date?
  @objc public var CatType: Swift.String
  @objc public var PlantSelSet: Swift.String
  @objc public var SelSet: Swift.String
  @objc public var CodeGrp: Swift.String
  @objc public var Code: Swift.String
  @objc public var Remark: Swift.String
  @objc public var InspDate: Foundation.Date?
  @objc public var InspTime: ODSFoundation.SODataDuration
  @objc public var Inspector: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getInspPointsList(inspLotNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionPointModel.Type? = InspectionPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getInspPointListWith(inspLot: Swift.String, operNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionPointModel.Type? = InspectionPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public enum logEventType : Swift.Int {
  case info
  case dedug
  case warning
  case error
  case serverError
  case verbose
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class mJCLogger {
  public static var appLogLevel: Swift.Int?
  public class func log(_ object: Any, Type: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Notification: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var NotificationType: Swift.String
  @objc public var RequiredEndDate: Foundation.Date?
  @objc public var RequiredEndTime: ODSFoundation.SODataDuration
  @objc public var ShortText: Swift.String
  @objc public var MalFunctStartTime: ODSFoundation.SODataDuration
  @objc public var PriorityType: Swift.String
  @objc public var MalfunctEndTime: ODSFoundation.SODataDuration
  @objc public var Priority: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var RequiredStartDate: Foundation.Date?
  @objc public var RequiredStartTime: ODSFoundation.SODataDuration
  @objc public var EnteredBy: Swift.String
  @objc public var PlannerGroup: Swift.String
  @objc public var PlannerGroupDes: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var ChangedBy: Swift.String
  @objc public var ChangedOn: Foundation.Date?
  @objc public var NotifTime: ODSFoundation.SODataDuration
  @objc public var NotifDate: Foundation.Date?
  @objc public var ReportedBy: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var Customer: Swift.String
  @objc public var ObjectNumber: Swift.String
  @objc public var CompletionDate: Foundation.Date?
  @objc public var CompletionTime: ODSFoundation.SODataDuration
  @objc public var Vendor: Swift.String
  @objc public var AddressNumber: Swift.String
  @objc public var LocationAddress: Swift.String
  @objc public var CatalogType: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var Coding: Swift.String
  @objc public var Batch: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var PltforWorkCtr: Swift.String
  @objc public var MainWorkCenter: Swift.String
  @objc public var Delete: Swift.String
  @objc public var PartnerFunctn: Swift.String
  @objc public var Partner: Swift.String
  @objc public var SystemStatus: Swift.String
  @objc public var UserStatus: Swift.String
  @objc public var MobileStatus: Swift.String
  @objc public var MobileObjectType: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var LocAccAssmt: Swift.String
  @objc public var Assembly: Swift.String
  @objc public var Breakdown: Swift.String
  @objc public var MalfunctStart: Foundation.Date?
  @objc public var MalfunctEnd: Foundation.Date?
  @objc public var BreakdownDur: Swift.Double
  @objc public var Unit: Swift.String
  @objc public var FunctionalLoc: Swift.String
  @objc public var ABCIndicator: Swift.String
  @objc public var MaintPlant: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var ControllingArea: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var TempID: Swift.String
  @objc public var StatusFlag: Swift.String
  @objc public var ErrorEntity: Swift.Bool
  @objc public var ErrorMsg: Swift.String
  @objc public var Name: Swift.String
  @objc public var Address: Swift.String
  @objc public var PhoneNumber: Swift.String
  @objc public var PostalCode: Swift.String
  @objc public var Latitude: Foundation.NSDecimalNumber
  @objc public var Longitude: Foundation.NSDecimalNumber
  @objc public var GeoLocation: Swift.String
  @objc public var NavNOItem: Foundation.NSMutableDictionary
  @objc public var hasAttachment: Swift.Bool
  @objc public var isSelectedCell: Swift.Bool
  @objc public var TechID: Swift.String
  @objc public var Location: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var SODataentity: ODSFoundation.SODataV4_EntityType
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getNotificationList(modelClass: mJCLib.NotificationModel.Type? = NotificationModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificationListCount(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNotificationDetailsWith(NotifNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationModel.Type? = NotificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineNotificationList(filterQuery: Swift.String? = "", navProperty: Swift.String? = "", httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func updateOnlineNotificationEntity(httpcon: ODSFoundation.HttpConversationManager, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func getWoNotificationList(filterQuery: Swift.String? = "")
  public static func getWoNotificationListCount(filterQuery: Swift.String? = "")
  public static func getWoNotificationDetailsWith(NotifNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationModel.Type? = NotificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNotificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNotificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNotificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WorkCenterModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var WorkCenter: Swift.String
  @objc public var Plant: Swift.String
  @objc public var Description: Swift.String
  @objc public var StartDate: Foundation.Date?
  @objc public var ObjectType: Swift.String
  @objc public var EndDate: Foundation.Date?
  @objc public var ObjectID: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var Deletion: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWorkCentersList(filterQuery: Swift.String? = "", modelClass: mJCLib.WorkCenterModel.Type? = WorkCenterModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WoComponentIssueModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var TempID: Swift.String
  @objc public var Counter: Swift.String
  @objc public var Item: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var Reservation: Swift.String
  @objc public var Material: Swift.String
  @objc public var Plant: Swift.String
  @objc public var StorLocation: Swift.String
  @objc public var IssueQty: Foundation.NSDecimalNumber
  @objc public var UOM: Swift.String
  @objc public var MovementType: Swift.String
  @objc public var Batch: Swift.String
  @objc public var ValType: Swift.String
  @objc public var HeaderTxt: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getIssuedComponentsList(workOrderNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.WoComponentIssueModel.Type? = WoComponentIssueModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func issueComponentEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateIssueComponentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteIssueComponentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WorkOrderActivityModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var COArea: Swift.String
  @objc public var ActivityType: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var CostCenterDescription: Swift.String
  @objc public var FiscalYear: Swift.String
  @objc public var ChartofAccts: Swift.String
  @objc public var FiscalYearVariant: Swift.String
  @objc public var Name: Swift.String
  @objc public var Description: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWorkOrderActivityList(filterQuery: Swift.String? = "", modelClass: mJCLib.WorkOrderActivityModel.Type? = WorkOrderActivityModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BussinessAreaModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var BusinessArea: Swift.String
  @objc public var BusinessAreaText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getBussinessAreaList(filterQuery: Swift.String? = "", modelClass: mJCLib.BussinessAreaModel.Type? = BussinessAreaModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MeasurementPointModel : ObjectiveC.NSObject, mJCLib.Initable, Foundation.NSCopying {
  @objc public var MeasDocument: Swift.String
  @objc public var MeasuringPoint: Swift.String
  @objc public var OpObjectNumber: Swift.String
  @objc public var WOObjectNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var Counter: Swift.String
  @objc public var FunctionalLocation: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var Description: Swift.String
  @objc public var MeasPtCategory: Swift.String
  @objc public var LoMRLimit: Swift.Double
  @objc public var LoMRContainsvalue: Swift.Bool
  @objc public var MeasDocumentDate: Foundation.Date?
  @objc public var date: Foundation.Date?
  @objc public var UpMRLimit: Swift.Double
  @objc public var MeasDocumentTime: ODSFoundation.SODataDuration
  @objc public var UpMRContainvalue: Swift.Bool
  @objc public var MeasReading: Swift.Double
  @objc public var MeasRangeUnit: Swift.String
  @objc public var RefCounter: Swift.Bool
  @objc public var MeasText: Swift.String
  @objc public var CatalogType: Swift.String
  @objc public var MeasValuationCode: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var RefCodeGroup: Swift.Bool
  @objc public var EnteredBy: Swift.String
  @objc public var ValCodeSuff: Swift.Bool
  @objc public var Characteristic: Swift.String
  @objc public var IntMeasUnit: Swift.String
  @objc public var LimitMinChar: Swift.String
  @objc public var LimitMinChar1: Swift.String
  @objc public var LimitMaxChar: Swift.String
  @objc public var LimitMaxChar1: Swift.String
  @objc public var UomChar: Swift.String
  @objc public var PrevDoc: Swift.Bool
  @objc public var MeasCntrReading: Swift.Double
  @objc public var MeasDifference: Swift.Double
  @objc public var MeasCatalogType: Swift.String
  @objc public var MeasCodeGroup: Swift.String
  @objc public var MeasReadingChar: Swift.String
  @objc public var PCntrrChar: Swift.String
  @objc public var PCdiffChar: Swift.String
  @objc public var MeasCodeText: Swift.String
  @objc public var MeasDescription: Swift.String
  @objc public var MeasurementTime: ODSFoundation.SODataDuration
  @objc public var MeasurementDate: Foundation.Date?
  @objc public var isoutofRange: Swift.Bool
  @objc public var ValuationCode: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var oldReading: Swift.String
  @objc public var oldReadingDesc: Swift.String
  @objc public var MeasPosition: Swift.String
  @objc public var editOption: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public static func getMeasurementPointDetails(filterQuery: Swift.String? = "", modelClass: mJCLib.MeasurementPointModel.Type? = MeasurementPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getFilledMeasurementPointDetails(WoObjectNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.MeasurementPointModel.Type? = MeasurementPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getMeasuringPointDocumentHistory(measuringPoint: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.MeasurementPointModel.Type? = MeasurementPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSupMeasurementPointDetails(filterQuery: Swift.String? = "", modelClass: mJCLib.MeasurementPointModel.Type? = MeasurementPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSupFilledMeasurementPointDetails(WoObjectNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.MeasurementPointModel.Type? = MeasurementPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSupMeasuringPointDocumentHistory(measuringPoint: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.MeasurementPointModel.Type? = MeasurementPointModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createMeasurementPointEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateMeasurementPointEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteMeasurementPointEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LtWorkFlowModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Id: Swift.String
  @objc public var Event: Swift.String
  @objc public var ObjectCategory: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var ActionType: Swift.String
  @objc public var ActionKey: Swift.String
  @objc public var Sequance: Foundation.NSNumber
  @objc public var Active: Swift.String
  @objc public var Remarks: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getltWorkFlowList(filterQuery: Swift.String? = "", modelClass: mJCLib.LtWorkFlowModel.Type? = LtWorkFlowModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LTStatusProfileModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var RoleID: Swift.String
  @objc public var StatusProfile: Swift.String
  @objc public var UserStatusCode: Swift.String
  @objc public var StatusCategory: Swift.String
  @objc public var StatusCode: Swift.String
  @objc public var StatusDescription: Swift.String
  @objc public var WithoutStatNo: Swift.Bool
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getLtStatusProfileDetails(filterQuery: Swift.String? = "", modelClass: mJCLib.LTStatusProfileModel.Type? = LTStatusProfileModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public protocol Initable {
  init()
}
@objc @_inheritsConvenienceInitializers open class mJCAlertHelper : ObjectiveC.NSObject {
  public static func showAlert(_ parent: UIKit.UIViewController? = nil, title: Swift.String?, message: Swift.String?, button: Swift.String)
  public static func showAlertWithHandler(_ parent: UIKit.UIViewController? = nil, parameters: ODSFoundation.Parameters, handler: @escaping (Swift.Int) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ErrorArchiveModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc required override dynamic public init()
  public var entity: ODSFoundation.SODataEntityDefault
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class UploadedAttachmentsModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Equipment: Swift.String
  @objc public var FuncLocation: Swift.String
  @objc public var Line: Swift.String
  @objc public var Task: Swift.String
  @objc public var Item: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var DocID: Swift.String
  @objc public var FILE_SIZE: Swift.String
  @objc public var BINARY_FLG: Swift.String
  @objc public var FIRST_LINE: Swift.String
  @objc public var LAST_LINE: Swift.String
  @objc public var FILE_NAME: Swift.String
  @objc public var MIMETYPE: Swift.String
  @objc public var PROPERTY: Swift.String
  @objc public var Description: Swift.String
  @objc public var TempID: Swift.String
  @objc public var URL: Swift.String
  @objc public var Notification: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWoUploadAttachmentListWith(workOrderNo: Swift.String? = "", equipNum: Swift.String? = "", funcLoc: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.UploadedAttachmentsModel.Type? = UploadedAttachmentsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoUploadAttachmentCountWith(workOrderNo: Swift.String? = "", equipNum: Swift.String? = "", funcLoc: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoUploadAttachmentListWith(notifNo: Swift.String? = "", equipNum: Swift.String? = "", funcLoc: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.UploadedAttachmentsModel.Type? = UploadedAttachmentsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoUploadAttachmentCount(notifNo: Swift.String? = "", equipNum: Swift.String? = "", funcLoc: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.UploadedAttachmentsModel.Type? = UploadedAttachmentsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func uploadWoAttachmentEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateUploadedWoAttachmentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteUploadedWoAttachmentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func uploadNoAttachmentEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateUploadedNoAttachmentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteUploadedNoAttachmentEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ClassificationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Equipment: Swift.String
  @objc public var Object: Swift.String
  @objc public var ObjectClass: Swift.String
  @objc public var ClassType: Swift.String
  @objc public var ClassNum: Swift.String
  @objc public var IntClassNo: Swift.String
  @objc public var IntCounter: Swift.String
  @objc public var ItemNumber: Swift.Int16
  @objc public var Status: Swift.String
  @objc public var StdClass: Swift.String
  @objc public var Recursive: Swift.Bool
  @objc public var ChangeNumber: Swift.String
  @objc public var ValidFrom: Foundation.Date?
  @objc public var DeletionInd: Swift.Bool
  @objc public var EnteredBy: Swift.String
  @objc public var ClassTypeDesc: Swift.String
  @objc public var ClassDesc: Swift.String
  @objc public var FunctionalLoc: Swift.String
  @objc public var StdCass: Swift.String
  @objc public var DateTo: Foundation.Date?
  @objc public var Characteristic: Swift.String
  @objc public var Description: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getWoEquipmentClassificationsList(equipmentNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoEquipClassificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoEquipClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoEquipClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoFunctionalLocClassificationList(funcLoc: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoFunctionalLocClassificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoFunctionalLocClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoFunctionalLocClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoEquipmentClassificationsList(equipmentNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNoEquipmentClassificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNoEquipmentClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoEquipmentClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoFunctionLocClassificationList(funcLoc: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNoFunctionLocClassificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNoFunctionLocClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoFunctionLocClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoEquipmentClassificationsList(equipmentNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoNoEquipClassificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoEquipClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoEquipClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoFuncLocClassificationList(funcLoc: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoNoFuncLocClassificationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoFuncLocClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoFuncLocClassificationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getEquipmentClassification(equipmentNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getFuncLocClassification(funcLoc: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.ClassificationModel.Type? = ClassificationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EntityKeysModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var EntitySetName: Swift.String
  @objc public var KeyProperty: Swift.String
  @objc public var KeyName: Swift.String
  @objc public var IsRefKey: Swift.String
  @objc public var IsVisible: Swift.String
  @objc public var Sequence: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getEntityKeysList(isVisible: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.EntityKeysModel.Type? = EntityKeysModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WoConfirmationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var TempID: Swift.String
  @objc public var ConfNo: Swift.String
  @objc public var ConfCounter: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var SubOper: Swift.String
  @objc public var CapaCategory: Swift.String
  @objc public var Split: Swift.UInt16
  @objc public var FinConf: Swift.String
  @objc public var Complete: Swift.String
  @objc public var ClearRes: Swift.Bool
  @objc public var PostgDate: Foundation.Date?
  @objc public var DevReason: Swift.String
  @objc public var ConfText: Swift.String
  @objc public var Plant: Swift.String
  @objc public var WorkCntr: Swift.String
  @objc public var ActWork: Foundation.NSDecimalNumber
  @objc public var UnWork: Swift.String
  @objc public var RemWork: Foundation.NSDecimalNumber
  @objc public var UnRemWrk: Swift.String
  @objc public var ActualDur: Foundation.NSDecimalNumber
  @objc public var UnActDur: Swift.String
  @objc public var ExecStartDate: Foundation.Date?
  @objc public var ExecStartTime: ODSFoundation.SODataDuration
  @objc public var ExecFinDate: Foundation.Date?
  @objc public var ExecFinTime: ODSFoundation.SODataDuration
  @objc public var FcstFinDate: Foundation.Date?
  @objc public var FcstFinTime: ODSFoundation.SODataDuration
  @objc public var PersNo: Swift.String
  @objc public var TimeidNo: Swift.String
  @objc public var ActType: Swift.String
  @objc public var Wagetype: Swift.String
  @objc public var CalcMotive: Swift.String
  @objc public var ExCreatedBy: Swift.String
  @objc public var ExCreatedDate: Foundation.Date?
  @objc public var ExCreatedTime: ODSFoundation.SODataDuration
  @objc public var ActWork2: Foundation.NSDecimalNumber
  @objc public var RemWork2: Foundation.NSDecimalNumber
  @objc public var EnteredBy: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func createWoConfirmationEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoConfirmationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoConfirmationEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CharateristicsModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Equipment: Swift.String
  @objc public var CharacteristicName: Swift.String
  @objc public var ClassNum: Swift.String
  @objc public var DataType: Swift.String
  @objc public var Characters: Swift.Int16
  @objc public var Value1: Swift.String
  @objc public var Decimals: Swift.Int16
  @objc public var Object: Swift.String
  @objc public var Required: Swift.String
  @objc public var Value2: Swift.String
  @objc public var Description: Swift.String
  @objc public var InternalChar: Swift.String
  @objc public var Counter: Swift.String
  @objc public var UnitofMeasure: Swift.String
  @objc public var ObjectClass: Swift.String
  @objc public var ClassType: Swift.String
  @objc public var IntCounter: Swift.String
  @objc public var CharValue: Swift.String
  @objc public var ValueFrom: Swift.Double
  @objc public var IntMeasunit: Swift.String
  @objc public var ValueTo: Swift.Double
  @objc public var IntMeasUnit: Swift.String
  @objc public var Code: Swift.String
  @objc public var ToleranceFrom: Swift.Double
  @objc public var ToleranceTo: Swift.Double
  @objc public var Percentage: Swift.String
  @objc public var Increment: Swift.Double
  @objc public var Author: Swift.String
  @objc public var ChangeNumber: Swift.String
  @objc public var ValidFrom: Foundation.Date?
  @objc public var DeletionInd: Swift.Bool
  @objc public var InternalChara: Swift.String
  @objc public var InstanceCntr: Swift.String
  @objc public var Position: Swift.String
  @objc public var CompType: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var SingleValue: Swift.Bool
  @objc public var FunctionalLoc: Swift.String
  @objc public var DateTo: Foundation.Date?
  @objc public var Technical: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getWoEquipmentCharateristicsList(equipmentNum: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoFunctionalLocCharateristicsList(funcLoc: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoEquipmentCharateristicsList(equipmentNum: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNoFunctionalLocCharateristicsList(funcLoc: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoEquipmentCharateristicsList(equipmentNum: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoNoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoEquipmentCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNoFunctionalLocCharateristicsList(funcLoc: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createWoNoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNoFunctionalLocCharateristicsEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getEquipmentCharateristicsList(equipmentNum: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getFuncLocCharateristicsList(funcLoc: Swift.String, classNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.CharateristicsModel.Type? = CharateristicsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InspectionResultModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Description: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var InspLot: Swift.String
  @objc public var InspOper: Swift.String
  @objc public var InspChar: Swift.String
  @objc public var InspSample: Swift.String
  @objc public var ResNo: Swift.String
  @objc public var ExtNo: Swift.String
  @objc public var LastRes: Swift.String
  @objc public var InspDate: Foundation.Date?
  @objc public var InspTime: ODSFoundation.SODataDuration
  @objc public var ResValue: Swift.String
  @objc public var ResAttr: Swift.String
  @objc public var ResInval: Swift.String
  @objc public var ResValuat: Swift.String
  @objc public var ErrClass: Swift.String
  @objc public var Defects: Swift.String
  @objc public var Inspector: Swift.String
  @objc public var AddInfo1: Swift.String
  @objc public var AddInfo2: Swift.String
  @objc public var Remark: Swift.String
  @objc public var Code1: Swift.String
  @objc public var CodeGrp1: Swift.String
  @objc public var Code2: Swift.String
  @objc public var CodeGrp2: Swift.String
  @objc public var Code3: Swift.String
  @objc public var CodeGrp3: Swift.String
  @objc public var Code4: Swift.String
  @objc public var CodeGrp4: Swift.String
  @objc public var Code5: Swift.String
  @objc public var CodeGrp5: Swift.String
  @objc public var OriginalValue: Swift.String
  @objc public var InputProcessing: Swift.String
  @objc public var DiffDeciPlaces: Swift.Int16
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getInspResultList(inspLotNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionResultModel.Type? = InspectionResultModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getInspResultListWith(inspLotNum: Swift.String, inspOper: Swift.String, inspSample: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionResultModel.Type? = InspectionResultModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func creatInspCharEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateInspCharEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteInspCharEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AllowedFollowOnObjectTypeModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var EnteredBy: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var AllowedObjectType: Swift.String
  @objc public var Description: Swift.String
  @objc public var RoleId: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAllowedFollowOnObjectTypeList(objectType: Swift.String? = "", roleId: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.AllowedFollowOnObjectTypeModel.Type? = AllowedFollowOnObjectTypeModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BreakdownReportModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var date: Foundation.Date?
  @objc public var Period: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FuncLocation: Swift.String
  @objc public var ActualBreakdns: Foundation.NSDecimalNumber
  @objc public var Downtime: Foundation.NSDecimalNumber
  @objc public var MTTR: Foundation.NSDecimalNumber
  @objc public var MTBR: Foundation.NSDecimalNumber
  @objc public var MeanTimeToRepair: Foundation.NSDecimalNumber
  @objc public var TimeBetweenRepairs: Foundation.NSDecimalNumber
  @objc public var MeanTimeBetweenRepairs: Foundation.NSDecimalNumber
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getOnlineBreakdownReportList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "") -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InspectionLotModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var InspLot: Swift.String
  @objc public var Plant: Swift.String
  @objc public var InspType: Swift.String
  @objc public var InspLotOrigin: Swift.String
  @objc public var ObjectNo: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var CreatedOnDate: Foundation.Date?
  @objc public var CreatedAtTime: ODSFoundation.SODataDuration
  @objc public var InspectionStartsOnDate: Foundation.Date?
  @objc public var InspectionStartsAtTime: ODSFoundation.SODataDuration
  @objc public var InspectionEndsOnDate: Foundation.Date?
  @objc public var InspectionEndsAtTime: ODSFoundation.SODataDuration
  @objc public var InspPointType: Swift.String
  @objc public var OrderId: Swift.String
  @objc public var TxtInspObject: Swift.String
  @objc public var InspLotSize: Foundation.NSDecimalNumber
  @objc public var InspLotBaseUom: Swift.String
  @objc public var SampleSize: Foundation.NSDecimalNumber
  @objc public var SampleBaseUom: Swift.String
  @objc public var SampleQtyLongTermInspChar: Foundation.NSDecimalNumber
  @objc public var SampleQtyActuallyInspected: Foundation.NSDecimalNumber
  @objc public var SampleQtyDestroyed: Foundation.NSDecimalNumber
  @objc public var SampleQtyDefective: Foundation.NSDecimalNumber
  @objc public var TaskListType: Swift.String
  @objc public var TaskListNumber: Swift.String
  @objc public var TaskListUsage: Swift.String
  @objc public var TaskListCounter: Swift.String
  @objc public var UdMode: Swift.String
  @objc public var UdCatalogType: Swift.String
  @objc public var UdPlant: Swift.String
  @objc public var UdSelectedSet: Swift.String
  @objc public var UdCodeGroup: Swift.String
  @objc public var UdCode: Swift.String
  @objc public var CodeValuation: Swift.String
  @objc public var UdRecordedByUser: Swift.String
  @objc public var UdRecordedOnDate: Foundation.Date?
  @objc public var UdRecordedAtTime: ODSFoundation.SODataDuration
  @objc public var UdChangedByUser: Swift.String
  @objc public var UdChangedOnDate: Foundation.Date?
  @objc public var UdChangedAtTime: ODSFoundation.SODataDuration
  @objc public var SysStatus: Swift.String
  @objc public var SyStText: Swift.String
  @objc public var SyStDscr: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getInspectionLotList(filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionLotModel.Type? = InspectionLotModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getInspLotDetails(inspLotNum: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.InspectionLotModel.Type? = InspectionLotModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationTypeModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var NotifictnType: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var NotifCat: Swift.String
  @objc public var CatalogProfile: Swift.String
  @objc public var PriorityType: Swift.String
  @objc public var NotificationTypeText: Swift.String
  @objc public var BusinessProcess: Swift.String
  @objc public var StatusProfile: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getNotificationTypeList(filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationTypeModel.Type? = NotificationTypeModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LongTextModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var OnlineSearch: Swift.String
  @objc public var TextName: Swift.String
  @objc public var Item: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var ComponentItem: Swift.String
  @objc public var TextObject: Swift.String
  @objc public var TagColumn: Swift.String
  @objc public var TextLine: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var TextID: Swift.String
  @objc public var TempID: Swift.String
  @objc public var PlannofOpera: Swift.String
  @objc public var Counter: Swift.String
  @objc public var SubOperation: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWoLongText(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoHistoryPendingLongTextSet(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoPendingOpLongTextSet(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoHistoryOpLongTextSet(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoLongText(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNotificationLongTextSet(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNoHistoryPendingLongTextSet(filterQuery: Swift.String? = "", modelClass: mJCLib.LongTextModel.Type? = LongTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineWorkOrderLongText(filterQuery: Swift.String? = "", httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func getOnlineNotificationLongText(filterQuery: Swift.String? = "", httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func createLongTextEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateLongTextEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteLongTextEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationItemsModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Notification: Swift.String
  @objc public var OnlineSearch: Swift.String
  @objc public var Item: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var ChangedBy: Swift.String
  @objc public var ChangedOn: Foundation.Date?
  @objc public var ShortText: Swift.String
  @objc public var CodeGroupParts: Swift.String
  @objc public var CodeGroupPartsText: Swift.String
  @objc public var DefectTypes: Swift.String
  @objc public var DamageCodeGroup: Swift.String
  @objc public var DamageCode: Swift.String
  @objc public var CatalogType: Swift.String
  @objc public var ObjectPartCode: Swift.String
  @objc public var ObjectPartCodeText: Swift.String
  @objc public var Assembly: Swift.String
  @objc public var InstallPoint: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var PltforWorkCtr: Swift.String
  @objc public var Delete: Swift.String
  @objc public var SortNumber: Swift.String
  @objc public var Material: Swift.String
  @objc public var Plant: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var Quantity: Foundation.NSDecimalNumber
  @objc public var WorkOrderNum: Swift.String
  @objc public var OperAct: Swift.String
  @objc public var TempID: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getNotificationItemsList(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemsModel.Type? = NotificationItemsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getNotificationItemsListCount(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getNotificationItemsDetails(notifNum: Swift.String? = "", itemNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemsModel.Type? = NotificationItemsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNotificationItemsList(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemsModel.Type? = NotificationItemsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getWoNoItemsListCount(notifNum: Swift.String? = "", filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getWoNotificationItemDetails(notifNum: Swift.String? = "", itemNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.NotificationItemsModel.Type? = NotificationItemsModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createNotificationItemEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateNotificationItemEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteNotificationItemEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createWoNotificationItemEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateWoNotificationItemEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteWoNotificationItemEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PersonResponseModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var EnteredBy: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var Plant: Swift.String
  @objc public var Technician: Swift.String
  @objc public var PersonnelNo: Swift.String
  @objc public var PersonnelArea: Swift.String
  @objc public var OrgKey: Swift.String
  @objc public var BusinessArea: Swift.String
  @objc public var OperationWorkCenter: Swift.String
  @objc public var CostCenter: Swift.String
  @objc public var EmplApplName: Swift.String
  @objc public var COArea: Swift.String
  @objc public var SystemID: Swift.String
  @objc public var Supervisor: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getPersonResponseList(filterQuery: Swift.String? = "", modelClass: mJCLib.PersonResponseModel.Type? = PersonResponseModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AppFeaturesModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ViewType: Swift.String
  @objc public var Feature: Swift.String
  @objc public var ActiveFlag: Swift.String
  @objc public var Remarks: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAppFeaturesList(modelClass: mJCLib.AppFeaturesModel.Type? = AppFeaturesModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public var storeDefineReqArray: [mJCLib.ServiceConfigModel]
public var storeListArray: [mJCLib.AppStoreModel]
public var mjcApplicationID: Swift.String
public var mjcServerUrl: Swift.String
public var mjcServerIp: Swift.String
public var mjcServerPortNo: Swift.Int
public var https: Swift.Bool
public var demoMode: Swift.Bool
public var credentialDelegate: mJCLib.LoginCredentialDelegate?
public var offlineStoreDelegate: mJCLib.OfflineStoreDelegate?
public var loggedInUser: Swift.String
public var offlinestoreListArray: [mJCLib.AppStoreModel]
public var offlinestoreDefineReqArray: [mJCLib.ServiceConfigModel]
public var localDateFormate: Swift.String
public var localDateTimeFormate: Swift.String
public var OnlineDateTimeFormate: Swift.String
public var loginAttempts: Swift.Int
public let tableConfigSet: Swift.String
public let appStoreSet: Swift.String
public let applicationConfigSet: Swift.String
public let workOrderStatusSet: Swift.String
public let transactionDataConfigSet: Swift.String
public let changePasswordSet: Swift.String
public let screenMappingSet: Swift.String
public let applicationFeatureSet: Swift.String
public let serviceConfigSet: Swift.String
public let statusCategorySet: Swift.String
public let appUserTableSet: Swift.String
public let entitySetKeysSet: Swift.String
public let alertMsgSet: Swift.String
public let subscriptionCollection: Swift.String
public let woHeader: Swift.String
public let woOperationSet: Swift.String
public let woCapacitySet: Swift.String
public let woConfirmationSet: Swift.String
public let woComponentSet: Swift.String
public let woComponentIssueSet: Swift.String
public let woAttachmentSet: Swift.String
public let noAttachmentSet: Swift.String
public let uploadNOAttachmentContentSet: Swift.String
public let uploadWOAttachmentContentSet: Swift.String
public let noAttachContentSet: Swift.String
public let woAttachContentSet: Swift.String
public let woNOAttachmentSet: Swift.String
public let woHistorySet: Swift.String
public let woPendingSet: Swift.String
public let notificationPendingSet: Swift.String
public let notificationHistorySet: Swift.String
public let woPendingOperationSet: Swift.String
public let woHistoryOperationSet: Swift.String
public let woObjectSet: Swift.String
public let measurementPointReadingSet: Swift.String
public let measurementDocumentHistorySet: Swift.String
public let notificationHeaderSet: Swift.String
public let notificationItemSet: Swift.String
public let notificationItemCauseSet: Swift.String
public let notificationTaskSet: Swift.String
public let notificationActivitySet: Swift.String
public let woNotificationHeaderSet: Swift.String
public let woNotificationItemCollection: Swift.String
public let woNotificationItemCausesCollection: Swift.String
public let woNotificationTaskCollection: Swift.String
public let woNotificationActivityCollection: Swift.String
public let woLongTextSet: Swift.String
public var woHistoryPendingLongTextSet: Swift.String
public let woNotificationLongTextSet: Swift.String
public let noHistoryPendingLongTextSet: Swift.String
public let notificationLongTextSet: Swift.String
public let woPendingOpLongTextSet: Swift.String
public let woHistoryOpLongTextSet: Swift.String
public let statusChangeLogSet: Swift.String
public let catRecordSet: Swift.String
public let woEquipmentClassificationSet: Swift.String
public let woEquipmentCharacteristicsSet: Swift.String
public let noEquipmentClassificationSet: Swift.String
public let noEquipmentCharacteristicsSet: Swift.String
public let woNoEquimentiClassificationSet: Swift.String
public let woNoEquimentiCharacteristicsSet: Swift.String
public let bomMaterialSet: Swift.String
public let woHistoryCompSet: Swift.String
public let woFunctionalLocClassificationSet: Swift.String
public let woFunctionalLocCharateristicsSet: Swift.String
public let noFunctionalLocClassificationSet: Swift.String
public let noFunctionalLocCharateristicsSet: Swift.String
public let woNoFunctionalLocCharateristicsSet: Swift.String
public let woNoFunctionalLocClassificationSet: Swift.String
public let breakdownReportSet: Swift.String
public let equipmentHeaderSet: Swift.String
public let equipmentClassificationSet: Swift.String
public let equipmentCharateristicsSet: Swift.String
public let componentAvailabiltySet: Swift.String
public let functionalLocationHeaderSet: Swift.String
public let functionalLocClassificationSet: Swift.String
public let functionalLocCharateristicsSet: Swift.String
public let classCharacteristicValueSet: Swift.String
public let assetHierarchySet: Swift.String
public let equipmentCategorySet: Swift.String
public let htGISAssetMappingSet: Swift.String
public let standardTextSet: Swift.String
public let ltStorageLocationSet: Swift.String
public let ltAttachmentTypeSet: Swift.String
public let ltPrioritySet: Swift.String
public let ltActivityTableSet: Swift.String
public let ltAllowedFollowOnObjectTypeSet: Swift.String
public let ltWorkCenterSet: Swift.String
public let ltNotificationTypeSet: Swift.String
public let ltCatalogProfileSet: Swift.String
public let ltCatalogCodeSet: Swift.String
public let ltPlanningPlantSet: Swift.String
public let ltAttendanceTypeSet: Swift.String
public let ltPersonRespSet: Swift.String
public let ltWorkflowSet: Swift.String
public let ltReasonCodeSet: Swift.String
public let ltOrderControlKeySet: Swift.String
public let ltWorkOrderTypeSet: Swift.String
public let ltOrderTypeFeatureSet: Swift.String
public let ltPremiumIDSet: Swift.String
public let ltBusinessAreaSet: Swift.String
public let ltPMActivitySet: Swift.String
public let ltStatusProfileSet: Swift.String
public let inspectionLotSet: Swift.String
public let inspectionOperSet: Swift.String
public let inspectionPointSet: Swift.String
public let inspectionCharSet: Swift.String
public let ispectionResultsGetSet: Swift.String
public let LTQmResultTableSet: Swift.String
public let supervisorWoHeader: Swift.String
public let superVisorCompSet: Swift.String
public let supervisorTechnicianSet: Swift.String
public let supMeasurementPointReadingSet: Swift.String
public let SupmeasurementDocumentHistorySet: Swift.String
public let supervisorCatRecordSet: Swift.String
public let superVisorOperSet: Swift.String
@objc @_inheritsConvenienceInitializers open class StatusChangeLogModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Counter: Swift.String
  @objc public var ObjectNum: Swift.String
  @objc public var Operation: Swift.String
  @objc public var StatusCode: Swift.String
  @objc public var StatusChangedTime: Foundation.Date?
  @objc public var IsConsidered: Swift.Bool
  @objc public var StatusCategory: Swift.String
  @objc public var Longitude: Foundation.NSDecimalNumber
  @objc public var Latitude: Foundation.NSDecimalNumber
  @objc public var PostedBy: Swift.String
  @objc public var StatusTime: ODSFoundation.SODataDuration
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getStatusChangeLogList(filterQuery: Swift.String? = "", modelClass: mJCLib.StatusChangeLogModel.Type? = StatusChangeLogModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createStatusChangeLogEntry(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateStatusChangeLogEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteStatusChangeLogEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HistoryAndPendingOperationModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var OperationNum: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var Plant: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getHistoryOperations(workOrderNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingOperationModel.Type? = HistoryAndPendingOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getPendingOperations(workOrderNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.HistoryAndPendingOperationModel.Type? = HistoryAndPendingOperationModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChangePasswordModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc required override dynamic public init()
  public static func getEntitySetDetails(httpcon: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func updatePasswordEntity(httpcon: ODSFoundation.HttpConversationManager, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class mJCNetWorkHelper : ObjectiveC.NSObject {
  public static func checkInternetConnectionwithServerDetails(serverURL: Swift.String) -> Swift.String
  public static func checkInternetConnection() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ReasonCodeModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Active: Swift.String
  @objc public var Language: Swift.String
  @objc public var `Type`: Swift.String
  @objc public var Code: Swift.String
  @objc public var Reason: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var ObjectCategory: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getResonCodeList(status: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.ReasonCodeModel.Type? = ReasonCodeModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class attachmentContentModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var DocID: Swift.String
  @objc public var Line: Swift.String
  @objc public var Notification: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var FILE_SIZE: Swift.String
  @objc public var BINARY_FLG: Swift.String
  @objc public var FIRST_LINE: Swift.String
  @objc public var LAST_LINE: Swift.String
  @objc public var FILE_NAME: Swift.String
  @objc public var MIMETYPE: Swift.String
  @objc public var PROPERTY: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func downloadWoAttachmentContent(DocID: Swift.String, objectNum: Swift.String, httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  public static func downloadNoAttachmentContent(DocID: Swift.String, objectNum: Swift.String, httpConvManager: ODSFoundation.HttpConversationManager) -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WorkorderObjectModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var OnlineSearch: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var ObjectCounter: Swift.Int32
  @objc public var ObjectNumber: Swift.String
  @objc public var ObjectList: Swift.Int32
  @objc public var Equipment: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var Notification: Swift.String
  @objc public var Assembly: Swift.String
  @objc public var LocAccAssmt: Swift.String
  @objc public var SortField: Swift.String
  @objc public var ProcessIndic: Swift.String
  @objc public var ObjListUsage: Swift.String
  @objc public var SerialNumber: Swift.String
  @objc public var Material: Swift.String
  @objc public var Number: Swift.String
  @objc public var MaterialDescription: Swift.String
  @objc public var EquipmentDescription: Swift.String
  @objc public var FunctionalLoc: Swift.String
  @objc public var FuncDescription: Swift.String
  @objc public var Description: Swift.String
  @objc public var PlanningPlant: Swift.String
  @objc public var NODescription: Swift.String
  @objc public var NotificationType: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getWorkOrderObjects(workOrderNum: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.WorkorderObjectModel.Type? = WorkorderObjectModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AttendanceTypeModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var PSGrouping: Swift.String
  @objc public var AttAbsType: Swift.String
  @objc public var AATypeText: Swift.String
  @objc public var PersonnelArea: Swift.String
  @objc public var PersSubArea: Swift.String
  @objc public var PSText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAttendanceTypeList(filterQuery: Swift.String? = "", modelClass: mJCLib.AttendanceTypeModel.Type? = AttendanceTypeModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CatalogProfileModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var CatalogProfile: Swift.String
  @objc public var CatalogCode: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var Status: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getCatalogProfileList(catalogCode: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.CatalogProfileModel.Type? = CatalogProfileModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TimeSheetModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var TempID: Swift.String
  @objc public var Counter: Swift.String
  @objc public var PersonnelNo: Swift.String
  @objc public var date: Foundation.Date?
  @objc public var SendCCtr: Swift.String
  @objc public var ActivityType: Swift.String
  @objc public var SendingOrder: Swift.String
  @objc public var SendPOItem: Swift.String
  @objc public var SendBusProc: Swift.String
  @objc public var ActivityNumber: Swift.String
  @objc public var RecCCtr: Swift.String
  @objc public var RecWBSelem: Swift.String
  @objc public var RecOrder: Swift.String
  @objc public var Network: Swift.String
  @objc public var PlannofOpera: Swift.String
  @objc public var OperaCounter: Swift.String
  @objc public var AttAbsType: Swift.String
  @objc public var WageType: Swift.String
  @objc public var COArea: Swift.String
  @objc public var UnitofMeasure: Swift.String
  @objc public var Plant: Swift.String
  @objc public var OrderCategory: Swift.String
  @objc public var CompanyCode: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedonTime: ODSFoundation.SODataDuration
  @objc public var EnteredBy: Swift.String
  @objc public var LastChange: Foundation.Date?
  @objc public var LastChangeTime: ODSFoundation.SODataDuration
  @objc public var ChangedBy: Swift.String
  @objc public var ApprovedBy: Swift.String
  @objc public var ApprovalDate: Foundation.Date?
  @objc public var WorkItemID: Swift.String
  @objc public var Status: Swift.String
  @objc public var RefCounter: Swift.String
  @objc public var Reason: Swift.String
  @objc public var DocumentNumber: Swift.String
  @objc public var TaskCounter: Swift.String
  @objc public var CatsHours: Foundation.NSDecimalNumber
  @objc public var StartTime: ODSFoundation.SODataDuration
  @objc public var EndTime: ODSFoundation.SODataDuration
  @objc public var PreviousDay: Swift.Bool
  @objc public var FullDay: Swift.Bool
  @objc public var PremiumNo: Swift.String
  @objc public var PremiumID: Swift.String
  @objc public var RemainingWork: Foundation.NSDecimalNumber
  @objc public var FinalConfirmtn: Swift.String
  @objc public var ShortText: Swift.String
  @objc public var LongText: Swift.Bool
  @objc public var Amount: Foundation.NSDecimalNumber
  @objc public var CATSQuantity: Foundation.NSDecimalNumber
  @objc public var OperAct: Swift.String
  @objc public var SubOperation: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var ErrorEntity: Swift.Bool
  @objc public var ErrorMsg: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var isExpand: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getTimeSheetData(date: Foundation.Date, filterQuery: Swift.String? = "", modelClass: mJCLib.TimeSheetModel.Type? = TimeSheetModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getSupervisorTimeSheetData(personnelNo: Swift.String, filterQuery: Swift.String? = "", modelClass: mJCLib.TimeSheetModel.Type? = TimeSheetModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createTimeSheetEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateTimeSheetEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteTimeSheetEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AppDetailsClass : ObjectiveC.NSObject {
  public static func setAppBasicDetails(details: Swift.Dictionary<Swift.String, Any>)
  public static func setFwLogLevel(levelDict: Swift.Dictionary<Swift.String, Any>)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class StandardTextModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var TextObject: Swift.String
  @objc public var StandardTextName: Swift.String
  @objc public var TextID: Swift.String
  @objc public var Language: Swift.String
  @objc public var LineWidth: Swift.String
  @objc public var Lines: Swift.String
  @objc public var LongText: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getStandardText(filterQuery: Swift.String? = "", modelClass: mJCLib.StandardTextModel.Type? = StandardTextModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ApplcationConfigModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var RecordNum: Swift.String
  @objc public var Key: Swift.String
  @objc public var Value: Swift.String
  @objc public var Category: Swift.String
  @objc public var Active: Swift.String
  @objc required override dynamic public init()
  public static func getapplcationConfigList(filterQuery: Swift.String? = "", completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class QmResultModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var Charnum: Swift.String
  @objc public var Description: Swift.String
  @objc public var Catalog: Swift.String
  @objc public var SelectedSet: Swift.String
  @objc public var Plant: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var Code: Swift.String
  @objc public var CodeValuation: Swift.String
  @objc public var DefectClass: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getQmResultsList()
  public static func getQmResultsListWith(Equipment: Swift.String)
  public static func getQmResultsListWith(equipment: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: mJCLib.QmResultModel.Type? = QmResultModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class mJCOnlineHelper : ObjectiveC.NSObject {
  public static func getDataFromOnlineStore(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, requestUrl: Swift.String, entitySet: Swift.String) -> Foundation.NSMutableDictionary
  public static func getDataFromOnlineStore(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, requestUrl: Swift.String, entitySet: Swift.String, navProperty: Swift.String) -> Foundation.NSMutableDictionary
  public static func getDataFromOnlineStore(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, requestUrl: Swift.String, entitySet: Swift.String, expectSingle: Swift.Bool) -> Foundation.NSMutableDictionary
  public static func SODataQueryRequestToNSMutableDictionary(QueryResult: ODSFoundation.SODataV4_QueryResult, EntitySet: ODSFoundation.SODataV4_EntitySet) -> Foundation.NSMutableDictionary
  public static func getEntitySetDetails(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, entityString: Swift.String) -> Foundation.NSMutableDictionary
  public static func createOnlineEntity(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, entityString: Swift.String, entity: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func updateOnlineEntity(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WorkOrderStatusModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var ObjectType: Swift.String
  @objc public var StatusCategoryId: Swift.String
  @objc public var ControlKey: Swift.String
  @objc public var CurrentStatusCode: Swift.String
  @objc public var AllowedStatusCode: Swift.String
  @objc public var StatusCategory: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var StatusAllowed: Swift.String
  @objc public var Status: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getworkOrderValidStatusList(modelClass: mJCLib.WorkOrderStatusModel.Type? = WorkOrderStatusModel.self, filterQuery: Swift.String? = "", completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EquipmentCategoryModel : ObjectiveC.NSObject, mJCLib.Initable {
  @objc public var EquipCategory: Swift.String
  @objc public var Language: Swift.String
  @objc public var CategoryDesc: Swift.String
  @objc public var categoryDisplayString: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc required override dynamic public init()
  public static func getEquipmentCategoryList(filterQuery: Swift.String? = "", modelClass: mJCLib.EquipmentCategoryModel.Type? = EquipmentCategoryModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class mJCStoreHelper : ObjectiveC.NSObject {
  public static func OpenOfflineStore(storeName: Swift.String, serviceName: Swift.String, options: Swift.Dictionary<Swift.String, Any>, storeDelegate: ODSFoundation.ODSStoreDelegate, storeStatuDelegate: ODSFoundation.ODSStoreStatusDelegate)
  public static func OpenOfflineStore1(storeName: Swift.String, serviceName: Swift.String, defineReq: [Swift.String], storeDelegate: ODSFoundation.ODSStoreDelegate, storeStatuDelegate: ODSFoundation.ODSStoreStatusDelegate)
  public static func flushAndRefreshStores(masterDataRefresh: Swift.Bool, flushDelegate: ODSFoundation.ODSStoreFlushDelegate, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate)
  public static func removeOfflineStores(storeNameArr: [Swift.String]) -> Swift.Bool
  public static func checkForUnflushedData(storeNameArr: [Swift.String] = []) -> Swift.Bool
  public static func closeOfflineStores(storeNameArr: [Swift.String] = []) -> Swift.Bool
  public static func configTimeBasedBackGroundSync(syncType: Swift.String, timeInterval: Swift.String, retryCount: Swift.String, retryInterval: Swift.String)
  public static func configMasterDataBackGroundSync(refreshUnitHour: Swift.Bool, timeInterval: Swift.String, retryCount: Swift.String, retryInterval: Swift.String)
  public static func configEventBasedSync(enable: Swift.Bool, syncType: Swift.String)
  public static func checkStoreStatus(StoreName: Swift.String) -> Swift.Bool
  public static func removeEventBasedSync()
  public static func removeMasterDataBackGroundSync()
  public static func removeTimeBasedBackGroundSync()
  @objc override dynamic public init()
  @objc deinit
}
extension mJCLib.logEventType : Swift.Equatable {}
extension mJCLib.logEventType : Swift.Hashable {}
extension mJCLib.logEventType : Swift.RawRepresentable {}
