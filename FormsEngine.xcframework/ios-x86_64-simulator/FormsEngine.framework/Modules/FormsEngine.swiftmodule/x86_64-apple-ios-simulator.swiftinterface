// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name FormsEngine
import Foundation
import ODSFoundation
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers open class FormMetaDataModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var InstanceId: Swift.String
  @objc public var Submitted: Swift.String
  @objc public var FormId: Swift.String
  @objc public var MultipleSub: Swift.String
  @objc public var Version: Swift.String
  @objc public var WoNum: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var ResponseData: Swift.String
  @objc public var FormHtml: Swift.String
  @objc public var FormModel: Swift.String
  @objc public var Occurances: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedBy: Swift.String
  @objc public var IsDraft: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormMetaData(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormMetaDataModel.Type? = FormMetaDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormAttachmentModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var InstanceId: Swift.String
  @objc public var FormId: Swift.String
  @objc public var Version: Swift.String
  @objc public var AttachCounter: Swift.String
  @objc public var FileName: Swift.String
  @objc public var MimeType: Swift.String
  @objc public var Description: Swift.String
  @objc public var ObjectNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FunctionalLoc: Swift.String
  @objc public var ImageData: Swift.String
  @objc public var QuestionId: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedBy: Swift.String
  @objc public var ModifiedOn: Foundation.Date?
  @objc public var ModifiedBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFilleFormAttachments(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormAttachmentModel.Type? = FormAttachmentModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createFormAttachment(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateFormAttachment(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteFormAttachment(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormsFormateHelperClass : ObjectiveC.NSObject {
  public static func getListInFormte<T>(dictionary: Foundation.NSMutableDictionary, entityModelClassType: T.Type) -> Swift.Dictionary<Swift.String, Any> where T : ObjectiveC.NSObject
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ApproverMasterDataModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var UserSystemID: Swift.String
  @objc public var PersonnelNum: Swift.String
  @objc public var EmailID: Swift.String
  @objc public var Active: Swift.Bool
  @objc public var FirstName: Swift.String
  @objc public var LastName: Swift.String
  @objc public var Contact: Swift.String
  @objc public var DepartmentID: Swift.String
  @objc public var DepartmentName: Swift.String
  @objc public var ApproverRole: Swift.String
  @objc public var ApproverLevel: Swift.String
  @objc public var Plant: Swift.String
  @objc public var WorkCenter: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getApproverMasterDataData(filterQuery: Swift.String? = "", modelClass: FormsEngine.ApproverMasterDataModel.Type? = ApproverMasterDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormResponseCaptureModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var InstanceID: Swift.String
  @objc public var FormID: Swift.String
  @objc public var Version: Swift.String
  @objc public var WoNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var TaskListType: Swift.String
  @objc public var Group: Swift.String
  @objc public var GroupCounter: Swift.String
  @objc public var InternalCounter: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FunctionLocation: Swift.String
  @objc public var ResponseData: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedBy: Swift.String
  @objc public var ModifiedOn: Foundation.Date?
  @objc public var ModifiedBy: Swift.String
  @objc public var IsDraft: Swift.String
  @objc public var NonObjType: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var Counter: Swift.String
  @objc public var Remarks: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormResponseCaptureData(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormResponseCaptureModel.Type? = FormResponseCaptureModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createResponseCaptureEntry(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateResponseCaptureEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteResponseCaptureEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormMasterMetaDataModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var FormName: Swift.String
  @objc public var Version: Swift.String
  @objc public var FormID: Swift.String
  @objc public var CreatedBy: Swift.String
  @objc public var Active: Swift.Bool
  @objc public var Category: Swift.String
  @objc public var multiOccur: Swift.Bool
  @objc public var mandatory: Swift.Bool
  @objc public var occur: Swift.Int
  @objc public var FormCategory: Swift.String
  @objc public var FunctionalArea: Swift.String
  @objc public var SubArea: Swift.String
  @objc public var Description: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormMasterDataList(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormMasterMetaDataModel.Type? = FormMasterMetaDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public protocol Initable {
  init()
}
@objc @_inheritsConvenienceInitializers open class FEOfflineHelper : ObjectiveC.NSObject {
  public static func getODataEntriesfromOffline<T>(queryRequest: Swift.String, storeName: Swift.String, entitySetClassType: T.Type, completionHandler: @escaping (Swift.Dictionary<Swift.String, Any>, Foundation.NSError?) -> ()) where T : ObjectiveC.NSObject
  public static func getODataEntriesfromOffline(queryRequest: Swift.String, storeName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func SODataRequestToNSMutableDictionary(SODataRequest: ODSFoundation.SODataRequestExecution) -> Foundation.NSMutableDictionary
  public static func getBatchEntries(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, storeName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func createOfflineEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, storeName: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateOfflineEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteOfflineEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormMasterModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var FormID: Swift.String
  @objc public var Version: Swift.String
  @objc public var CodeGroup: Swift.String
  @objc public var FormName: Swift.String
  @objc public var Description: Swift.String
  @objc public var FormData: Swift.String
  @objc public var FormHTML: Swift.String
  @objc public var FormModel: Swift.String
  @objc public var Active: Swift.Bool
  @objc public var Theme: Swift.String
  @objc public var Stylesheet: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedBy: Swift.String
  @objc public var ModifiedOn: Foundation.Date?
  @objc public var ModifiedBy: Swift.String
  @objc public var Category: Swift.String
  @objc public var FunctionalArea: Swift.String
  @objc public var SubArea: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormMasterData(formId: Swift.String? = "", formVersion: Swift.String? = "", filterQuery: Swift.String? = "", modelClass: FormsEngine.FormMasterModel.Type? = FormMasterModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class DeptMasterDataModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var DepartmentID: Swift.String
  @objc public var DepartmentName: Swift.String
  @objc public var Plant: Swift.String
  @objc public var Active: Swift.Bool
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getDeptMasterData(filterQuery: Swift.String? = "", modelClass: FormsEngine.DeptMasterDataModel.Type? = DeptMasterDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public var OnlineDateTimeFormate: Swift.String
public var formStoreName: Swift.String
public let formMasterSet: Swift.String
public let formAssingmentSet: Swift.String
public let responseCaptureSet: Swift.String
public let formAttachmentSet: Swift.String
public let formWorkOrderSet: Swift.String
public let formMetaDataSet: Swift.String
public let formManualAssignmentSet: Swift.String
public let formMasterMetadataSet: Swift.String
public let formApproverSet: Swift.String
public let approverMasterDataSet: Swift.String
public let deptMasterDataSet: Swift.String
public let formResponseApprovalStatusSet: Swift.String
public let formImageSet: Swift.String
public let ReviewerFormResponseSet: Swift.String
@objc @_inheritsConvenienceInitializers open class FormAssignDataModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var FormID: Swift.String
  @objc public var Version: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var ControlKey: Swift.String
  @objc public var TaskListType: Swift.String
  @objc public var Group: Swift.String
  @objc public var GroupCounter: Swift.String
  @objc public var InternalCounter: Swift.String
  @objc public var EquipCategory: Swift.String
  @objc public var FuncLocCategory: Swift.String
  @objc public var Category: Swift.String
  @objc public var JobType: Swift.String
  @objc public var Mandatory: Swift.String
  @objc public var FlowSequence: Swift.String
  @objc public var MultipleSub: Swift.String
  @objc public var Occur: Swift.String
  @objc public var Theme: Swift.String
  @objc public var Stylesheet: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedBy: Swift.String
  @objc public var ModifiedOn: Foundation.Date?
  @objc public var ModifiedBy: Swift.String
  @objc public var filledFormCount: Swift.Int
  @objc public var FormAssignmentType: Swift.String
  @objc public var WorkOrderNum: Swift.String
  @objc public var OprNum: Swift.String
  @objc public var FormCategory: Swift.String
  @objc public var PostNotification: Swift.Bool
  @objc public var AssignedDate: Foundation.Date?
  @objc public var AssignedTime: ODSFoundation.SODataDuration
  @objc public var AssignedBy: Swift.String
  @objc public var Notification: Swift.String
  @objc public var NotificationItem: Swift.String
  @objc public var NotificationTask: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FunctionalLocation: Swift.String
  @objc public var FormName: Swift.String
  @objc public var ApproverID: Swift.String
  @objc public var FormStatus: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAssgnedFormData(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormAssignDataModel.Type? = FormAssignDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getFormManualAssignmentData(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormAssignDataModel.Type? = FormAssignDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createFormManualAssignmentEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateFormManualAssignmentEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteFormManualAssignmentEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getFormApproverData(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormAssignDataModel.Type? = FormAssignDataModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createFormApprovalEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateFormApprovalEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteFormApprovalEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HtmlHelper : ObjectiveC.NSObject {
  public static func convertFormIntoHtml(options: [Swift.String : Any]) -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormWorkOrderModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var WorkOrderNumber: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var Description: Swift.String
  @objc public var FormSet: Swift.String
  @objc public var FormMetaDataSet: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormWorkOrder(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormWorkOrderModel.Type? = FormWorkOrderModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormsBatchRequestModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc required override dynamic public init()
  public static func getExecuteFormsBatchRequest(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormResponseApprovalStatusModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var FormID: Swift.String
  @objc public var Version: Swift.String
  @objc public var FormInstanceID: Swift.String
  @objc public var ApproverID: Swift.String
  @objc public var FormSubmittedBy: Swift.String
  @objc public var Counter: Swift.String
  @objc public var FormContentStatus: Swift.String
  @objc public var Remarks: Swift.String
  @objc public var CreatedDate: Foundation.Date?
  @objc public var CreatedTime: ODSFoundation.SODataDuration
  @objc public var FormName: Swift.String
  @objc public var IterationRequired: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormResponseApprovalStatusData(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormResponseApprovalStatusModel.Type? = FormResponseApprovalStatusModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createFormResponseApprovalStatusEntry(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateFormResponseApprovalStatusEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteFormResponseApprovalStatusEntry(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormQuestionImageModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var Formid: Swift.String
  @objc public var Version: Swift.String
  @objc public var Question: Swift.String
  @objc public var FileName: Swift.String
  @objc public var MediaType: Swift.String
  @objc public var Base64: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormQuestionImageList(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormQuestionImageModel.Type? = FormQuestionImageModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FormReviewerResponseModel : ObjectiveC.NSObject, FormsEngine.Initable {
  @objc public var InstanceID: Swift.String
  @objc public var FormID: Swift.String
  @objc public var Version: Swift.String
  @objc public var WoNum: Swift.String
  @objc public var OperationNum: Swift.String
  @objc public var TaskListType: Swift.String
  @objc public var Group: Swift.String
  @objc public var GroupCounter: Swift.String
  @objc public var InternalCounter: Swift.String
  @objc public var Equipment: Swift.String
  @objc public var FunctionLocation: Swift.String
  @objc public var ResponseData: Swift.String
  @objc public var CreatedOn: Foundation.Date?
  @objc public var CreatedBy: Swift.String
  @objc public var ModifiedOn: Foundation.Date?
  @objc public var ModifiedBy: Swift.String
  @objc public var IsDraft: Swift.String
  @objc public var NonObjType: Swift.String
  @objc public var OrderType: Swift.String
  @objc public var Counter: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getFormReviewerResponseList(filterQuery: Swift.String? = "", modelClass: FormsEngine.FormReviewerResponseModel.Type? = FormReviewerResponseModel.self, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func createFormReviewerResponseEntity(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateFormReviewerResponseEntity(entity: ODSFoundation.SODataEntity, flushDelegate: ODSFoundation.ODSStoreFlushDelegate? = nil, refreshDelegate: ODSFoundation.ODSStoreRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc deinit
}
public typealias JavascriptCallback = (Swift.Bool, Any?) -> Swift.Void
public struct JavascriptFunction {
}
public protocol WebViewHandlerDelegate {
  func didReceiveMessage(message: Any)
  func didReceiveParameters(parameters: [Swift.String : Any])
}
@objc @_inheritsConvenienceInitializers open class WebViewHandler : ObjectiveC.NSObject {
  public var webView: WebKit.WKWebView
  public var delegate: FormsEngine.WebViewHandlerDelegate?
  @objc override dynamic public init()
  public func callJavascript(javascriptString: Swift.String, callback: @escaping FormsEngine.JavascriptCallback)
  public func load(_ request: Foundation.URLRequest)
  @objc deinit
}
extension FormsEngine.WebViewHandler : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension FormsEngine.WebViewHandler : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
