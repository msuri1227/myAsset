//# xsc 19.1.1-0d1263-20190301

#ifndef SODATAV4_DATA_1_H
#define SODATAV4_DATA_1_H


@class SODataV4_List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer; /* internal */
@class SODataV4_Map_sortedEntries_AnnotationMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_AnyMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_DataMethodMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_DataSchemaMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_EntityContainerMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_EntitySetMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_EntityTypeMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_EnumTypeMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_EnumValueMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_ObjectMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_PropertyMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer; /* internal */
@class SODataV4_Map_sortedEntries_StringMap_in_data_KeyComparer; /* internal */
@class SODataV4_AggregateExpression;
@class SODataV4_AggregateFrom;
@class SODataV4_AggregateMethod;
@class SODataV4_Annotation;
@class SODataV4_AnnotationMap_Entry;
@class SODataV4_AnnotationTerm;
@class SODataV4_AnnotationTermMap_Entry;
@class SODataV4_AnyMap_Entry;
@class SODataV4_ArrayFunction;
@class SODataV4_ArrayProperty;
@class SODataV4_BasicType;
@class SODataV4_BasicTypes; /* internal */
@class SODataV4_CancelToken;
@class SODataV4_CancellationListener;
@class SODataV4_ChangedLink;
@class SODataV4_ComplexTypeMap_Entry;
@class SODataV4_ComplexValueMap_Entry;
@class SODataV4_ConvertDataValue;
@class SODataV4_CustomPath;
@class SODataV4_DataFormat;
@class SODataV4_DataInternal;
@class SODataV4_DataMethod;
@class SODataV4_DataMethodCall;
@class SODataV4_DataMethodMap_Entry;
@class SODataV4_DataMethodMetrics;
@class SODataV4_DataMetric;
@class SODataV4_DataMetricMap_Entry;
@class SODataV4_DataQuery;
@class SODataV4_DataSchema;
@class SODataV4_DataSchemaMap_Entry;
@class SODataV4_DataType;
@class SODataV4_DataTypeMap_Entry;
@class SODataV4_DataValue;
@class SODataV4_DataValueMap_Entry;
@class SODataV4_DataVersion;
@class SODataV4_DateNumber; /* internal */
@class SODataV4_DateTimeFormat; /* internal */
@class SODataV4_DateTimeParser; /* internal */
@class SODataV4_DayOfWeek;
@class SODataV4_EntityContainer;
@class SODataV4_EntityContainerMap_Entry;
@class SODataV4_EntityKey;
@class SODataV4_EntitySet;
@class SODataV4_EntitySetMap_Entry;
@class SODataV4_EntitySetMetrics;
@class SODataV4_EntityStream;
@class SODataV4_EntityTypeMap_Entry;
@class SODataV4_EntityValueMap_Entry;
@class SODataV4_EnumTypeMap_Entry;
@class SODataV4_EnumValueMap_Entry;
@class SODataV4_ErrorResponse;
@class SODataV4_ExpandItem;
@class SODataV4_HttpDateTime;
@class SODataV4_LoginCredentials; /* internal */
@class SODataV4_MapBase;
@class SODataV4_MonthOfYear;
@class SODataV4_ObjectMap_Entry;
@class SODataV4_Parameter;
@class SODataV4_PathAnnotations;
@class SODataV4_PathAnnotationsMap_Entry;
@class SODataV4_PropertyMap_Entry;
@class SODataV4_QueryFunction;
@class SODataV4_QueryFunctionCode;
@class SODataV4_QueryFunctionMap_Entry;
@class SODataV4_QueryInternal;
@class SODataV4_QueryNumber; /* internal */
@class SODataV4_QueryOperator;
@class SODataV4_QueryOperatorCode;
@class SODataV4_QueryOperatorMap_Entry;
@class SODataV4_QueryResult;
@class SODataV4_RequestOptions;
@class SODataV4_SelectItem;
@class SODataV4_SetBase;
@class SODataV4_SimpleTypeMap_Entry;
@class SODataV4_SortItem;
@class SODataV4_SortOrder;
@class SODataV4_StringMap_Entry;
@class SODataV4_SystemFlags; /* internal */
@class SODataV4_SystemKey; /* internal */
@class SODataV4_TimeNumber; /* internal */
@class SODataV4_TypeFacets;
@class SODataV4_UpdateMode;
@class SODataV4_WellKnownText; /* internal */
@class SODataV4_AnnotationList_SortByName; /* internal */
@class SODataV4_AnnotationMap;
@class SODataV4_AnnotationTermMap;
@class SODataV4_AnyMap;
@class SODataV4_BinaryValue;
@class SODataV4_BooleanValue;
@class SODataV4_ByteValue;
@class SODataV4_CharValue;
@class SODataV4_ComplexComparer; /* internal */
@class SODataV4_ComplexTypeList_SortByName; /* internal */
@class SODataV4_ComplexTypeMap;
@class SODataV4_ComplexValueMap;
@class SODataV4_DataComparer;
@class SODataV4_DataEquality;
@class SODataV4_DataMethodList_SortByName; /* internal */
@class SODataV4_DataMethodMap;
@class SODataV4_DataMetricList_SortByMetric; /* internal */
@class SODataV4_DataMetricMap;
@class SODataV4_DataSchemaMap;
@class SODataV4_DataTypeList_SortByName; /* internal */
@class SODataV4_DataTypeMap;
@class SODataV4_DataValueMap;
@class SODataV4_DayTimeDuration;
@class SODataV4_DecimalValue;
@class SODataV4_DeltaStream;
@class SODataV4_DoubleValue;
@class SODataV4_EntityComparer; /* internal */
@class SODataV4_EntityContainerMap;
@class SODataV4_EntitySetList_SortByName; /* internal */
@class SODataV4_EntitySetMap;
@class SODataV4_EntityTypeList_SortByName; /* internal */
@class SODataV4_EntityTypeMap;
@class SODataV4_EntityValueMap;
@class SODataV4_EnumType;
@class SODataV4_EnumTypeList_SortByName; /* internal */
@class SODataV4_EnumTypeMap;
@class SODataV4_EnumValue;
@class SODataV4_EnumValueList_SortByValue; /* internal */
@class SODataV4_EnumValueMap;
@class SODataV4_FloatValue;
@class SODataV4_GeospatialValue;
@class SODataV4_GlobalDateTime;
@class SODataV4_GuidValue;
@class SODataV4_ImmutableRequestOptions; /* internal */
@class SODataV4_IntValue;
@class SODataV4_IntegerValue;
@class SODataV4_ListBase;
@class SODataV4_LocalDate;
@class SODataV4_LocalDateTime;
@class SODataV4_LocalTime;
@class SODataV4_LongValue;
@class SODataV4_ObjectMap;
@class SODataV4_PathAnnotationsMap;
@class SODataV4_PropertyList_MyComparer; /* internal */
@class SODataV4_PropertyList_MyEquality; /* internal */
@class SODataV4_PropertyMap;
@class SODataV4_QueryAlias;
@class SODataV4_QueryFilter;
@class SODataV4_QueryFunctionCall;
@class SODataV4_QueryFunctionMap;
@class SODataV4_QueryOperatorCall;
@class SODataV4_QueryOperatorMap;
@class SODataV4_QueryType;
@class SODataV4_QueryValue;
@class SODataV4_ShortValue;
@class SODataV4_SimpleType;
@class SODataV4_SimpleTypeList_SortByName; /* internal */
@class SODataV4_SimpleTypeMap;
@class SODataV4_StreamBase;
@class SODataV4_StreamLink;
@class SODataV4_StringMap;
@class SODataV4_StringSet;
@class SODataV4_StringValue;
@class SODataV4_StructureBase;
@class SODataV4_StructureType;
@class SODataV4_UndefinedValue; /* internal */
@class SODataV4_UnsignedByte;
@class SODataV4_UnsignedShort;
@class SODataV4_YearMonthDuration;
@class SODataV4_AggregateExpressionList;
@class SODataV4_AggregateFromList;
@class SODataV4_AggregateValueList;
@class SODataV4_AnnotationList;
@class SODataV4_AnnotationMap_EntryList;
@class SODataV4_AnnotationTermList;
@class SODataV4_AnnotationTermMap_EntryList;
@class SODataV4_AnyList;
@class SODataV4_AnyMap_EntryList;
@class SODataV4_BinaryList;
@class SODataV4_BooleanList;
@class SODataV4_ByteList;
@class SODataV4_ByteStream;
@class SODataV4_CancellationListenerList; /* internal */
@class SODataV4_ChangedLinkList;
@class SODataV4_CharList;
@class SODataV4_CharStream;
@class SODataV4_ComplexType;
@class SODataV4_ComplexTypeList;
@class SODataV4_ComplexTypeMap_EntryList;
@class SODataV4_ComplexValue;
@class SODataV4_ComplexValueList;
@class SODataV4_ComplexValueListWithNulls;
@class SODataV4_ComplexValueMap_EntryList;
@class SODataV4_CustomPathList;
@class SODataV4_DataException;
@class SODataV4_DataMethodList;
@class SODataV4_DataMethodMap_EntryList;
@class SODataV4_DataMetricList;
@class SODataV4_DataMetricMap_EntryList;
@class SODataV4_DataSchemaList;
@class SODataV4_DataSchemaMap_EntryList;
@class SODataV4_DataTypeList;
@class SODataV4_DataTypeMap_EntryList;
@class SODataV4_DataValueList;
@class SODataV4_DataValueListWithNulls;
@class SODataV4_DataValueMap_EntryList;
@class SODataV4_DateTimeException; /* internal */
@class SODataV4_DayTimeDurationList;
@class SODataV4_DecimalList;
@class SODataV4_DoubleList;
@class SODataV4_EntityContainerList;
@class SODataV4_EntityContainerMap_EntryList;
@class SODataV4_EntitySetList;
@class SODataV4_EntitySetMap_EntryList;
@class SODataV4_EntityType;
@class SODataV4_EntityTypeList;
@class SODataV4_EntityTypeMap_EntryList;
@class SODataV4_EntityValue;
@class SODataV4_EntityValueList;
@class SODataV4_EntityValueListWithNulls;
@class SODataV4_EntityValueMap_EntryList;
@class SODataV4_EnumTypeList;
@class SODataV4_EnumTypeMap_EntryList;
@class SODataV4_EnumValueList;
@class SODataV4_EnumValueMap_EntryList;
@class SODataV4_ErrorResponseList;
@class SODataV4_ExpandItemList;
@class SODataV4_FloatList;
@class SODataV4_GeographyValue;
@class SODataV4_GeographyValueList;
@class SODataV4_GeometryValue;
@class SODataV4_GeometryValueList;
@class SODataV4_GlobalDateTimeList;
@class SODataV4_GuidValueList;
@class SODataV4_IntList;
@class SODataV4_IntegerList;
@class SODataV4_LineStringCoordinates;
@class SODataV4_LocalDateList;
@class SODataV4_LocalDateTimeList;
@class SODataV4_LocalTimeList;
@class SODataV4_LongList;
@class SODataV4_MultiLineStringCoordinates;
@class SODataV4_MultiPointCoordinates;
@class SODataV4_MultiPolygonCoordinates;
@class SODataV4_ObjectList;
@class SODataV4_ObjectMap_EntryList;
@class SODataV4_ParameterList;
@class SODataV4_PathAnnotationsList;
@class SODataV4_PathAnnotationsMap_EntryList;
@class SODataV4_PointCoordinates;
@class SODataV4_PolygonCoordinates;
@class SODataV4_PropertyList;
@class SODataV4_PropertyMap_EntryList;
@class SODataV4_PropertyPath;
@class SODataV4_PropertyPathList;
@class SODataV4_QueryFunctionList;
@class SODataV4_QueryFunctionMap_EntryList;
@class SODataV4_QueryOperatorList;
@class SODataV4_QueryOperatorMap_EntryList;
@class SODataV4_SelectItemList;
@class SODataV4_ShortList;
@class SODataV4_SimpleTypeList;
@class SODataV4_SimpleTypeMap_EntryList;
@class SODataV4_SortItemList;
@class SODataV4_StringList;
@class SODataV4_StringMap_EntryList;
@class SODataV4_StructureTypeList;
@class SODataV4_TransformValue;
@class SODataV4_TransformValueList;
@class SODataV4_UnsignedByteList;
@class SODataV4_UnsignedShortList;
@class SODataV4_YearMonthDurationList;
@class SODataV4_AggregateValue;
@class SODataV4_AmountTransform;
@class SODataV4_ByteStreamFromBinary; /* internal */
@class SODataV4_ByteStreamFromChars; /* internal */
@class SODataV4_ByteStreamToBuffer; /* internal */
@class SODataV4_ByteStreamWithUndo; /* internal */
@class SODataV4_CharStreamFromBytes; /* internal */
@class SODataV4_CharStreamFromString; /* internal */
@class SODataV4_CharStreamToBuffer; /* internal */
@class SODataV4_CharStreamWithUndo; /* internal */
@class SODataV4_DataFormatException;
@class SODataV4_DataNetworkException;
@class SODataV4_DataPath;
@class SODataV4_DataQueryException;
@class SODataV4_DataSchemaException;
@class SODataV4_DataServiceException;
@class SODataV4_DataStorageException;
@class SODataV4_DataStreamException;
@class SODataV4_EmptyByteStream; /* internal */
@class SODataV4_EmptyCharStream; /* internal */
@class SODataV4_ExpandTransform;
@class SODataV4_FilterTransform;
@class SODataV4_GeographyCollection;
@class SODataV4_GeographyLineString;
@class SODataV4_GeographyMultiLineString;
@class SODataV4_GeographyMultiPoint;
@class SODataV4_GeographyMultiPolygon;
@class SODataV4_GeographyPoint;
@class SODataV4_GeographyPolygon;
@class SODataV4_GeometryCollection;
@class SODataV4_GeometryLineString;
@class SODataV4_GeometryMultiLineString;
@class SODataV4_GeometryMultiPoint;
@class SODataV4_GeometryMultiPolygon;
@class SODataV4_GeometryPoint;
@class SODataV4_GeometryPolygon;
@class SODataV4_GroupTransform;
@class SODataV4_Property;
@class SODataV4_QueryResultException;
@class SODataV4_RequestCancelledException;
@class SODataV4_BottomTransform;
@class SODataV4_NavigationProperty;
@class SODataV4_StreamProperty;
@class SODataV4_StructuralProperty;
@class SODataV4_TopTransform;
@class SODataV4_WellKnownTextException; /* internal */
@class SODataV4_Any_asNullable_data_ComplexValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_DataPath_in_data; /* internal */
@class SODataV4_Any_asNullable_data_DataValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_DayTimeDuration_in_data; /* internal */
@class SODataV4_Any_asNullable_data_EntityValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_EnumValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyCollection_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyLineString_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyMultiLineString_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyMultiPoint_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyMultiPolygon_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyPoint_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyPolygon_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeographyValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryCollection_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryLineString_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryMultiLineString_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryMultiPoint_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryMultiPolygon_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryPoint_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryPolygon_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GeometryValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GlobalDateTime_in_data; /* internal */
@class SODataV4_Any_asNullable_data_GuidValue_in_data; /* internal */
@class SODataV4_Any_asNullable_data_LocalDateTime_in_data; /* internal */
@class SODataV4_Any_asNullable_data_LocalDate_in_data; /* internal */
@class SODataV4_Any_asNullable_data_LocalTime_in_data; /* internal */
@class SODataV4_Any_asNullable_data_YearMonthDuration_in_data; /* internal */
@class SODataV4_Any_as_core_MapFromString_in_data; /* internal */
@class SODataV4_Any_as_core_UntypedSet_in_data; /* internal */
@class SODataV4_Any_as_data_AggregateExpression_in_data; /* internal */
@class SODataV4_Any_as_data_AggregateFrom_in_data; /* internal */
@class SODataV4_Any_as_data_AggregateValue_in_data; /* internal */
@class SODataV4_Any_as_data_AnnotationMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_AnnotationTermMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_AnnotationTerm_in_data; /* internal */
@class SODataV4_Any_as_data_Annotation_in_data; /* internal */
@class SODataV4_Any_as_data_AnyMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_BinaryValue_in_data; /* internal */
@class SODataV4_Any_as_data_BooleanValue_in_data; /* internal */
@class SODataV4_Any_as_data_ByteValue_in_data; /* internal */
@class SODataV4_Any_as_data_CancellationListener_in_data; /* internal */
@class SODataV4_Any_as_data_ChangedLink_in_data; /* internal */
@class SODataV4_Any_as_data_CharStream_in_data; /* internal */
@class SODataV4_Any_as_data_CharValue_in_data; /* internal */
@class SODataV4_Any_as_data_ComplexTypeMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_ComplexType_in_data; /* internal */
@class SODataV4_Any_as_data_ComplexValueList_in_data; /* internal */
@class SODataV4_Any_as_data_ComplexValueMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_ComplexValue_in_data; /* internal */
@class SODataV4_Any_as_data_CustomPath_in_data; /* internal */
@class SODataV4_Any_as_data_DataMethodMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_DataMethod_in_data; /* internal */
@class SODataV4_Any_as_data_DataMetricMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_DataMetric_in_data; /* internal */
@class SODataV4_Any_as_data_DataPath_in_data; /* internal */
@class SODataV4_Any_as_data_DataSchemaMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_DataSchema_in_data; /* internal */
@class SODataV4_Any_as_data_DataTypeMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_DataType_in_data; /* internal */
@class SODataV4_Any_as_data_DataValueList_in_data; /* internal */
@class SODataV4_Any_as_data_DataValueMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_DataValue_in_data; /* internal */
@class SODataV4_Any_as_data_DayTimeDuration_in_data; /* internal */
@class SODataV4_Any_as_data_DecimalValue_in_data; /* internal */
@class SODataV4_Any_as_data_DoubleValue_in_data; /* internal */
@class SODataV4_Any_as_data_EntityContainerMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_EntityContainer_in_data; /* internal */
@class SODataV4_Any_as_data_EntitySetMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_EntitySet_in_data; /* internal */
@class SODataV4_Any_as_data_EntityTypeMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_EntityType_in_data; /* internal */
@class SODataV4_Any_as_data_EntityValueList_in_data; /* internal */
@class SODataV4_Any_as_data_EntityValueMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_EntityValue_in_data; /* internal */
@class SODataV4_Any_as_data_EnumTypeMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_EnumType_in_data; /* internal */
@class SODataV4_Any_as_data_EnumValueMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_EnumValue_in_data; /* internal */
@class SODataV4_Any_as_data_ErrorResponse_in_data; /* internal */
@class SODataV4_Any_as_data_ExpandItem_in_data; /* internal */
@class SODataV4_Any_as_data_FloatValue_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyCollection_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyLineString_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyMultiLineString_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyMultiPoint_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyMultiPolygon_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyPoint_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyPolygon_in_data; /* internal */
@class SODataV4_Any_as_data_GeographyValue_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryCollection_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryLineString_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryMultiLineString_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryMultiPoint_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryMultiPolygon_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryPoint_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryPolygon_in_data; /* internal */
@class SODataV4_Any_as_data_GeometryValue_in_data; /* internal */
@class SODataV4_Any_as_data_GlobalDateTime_in_data; /* internal */
@class SODataV4_Any_as_data_GuidValue_in_data; /* internal */
@class SODataV4_Any_as_data_IntValue_in_data; /* internal */
@class SODataV4_Any_as_data_IntegerValue_in_data; /* internal */
@class SODataV4_Any_as_data_LineStringCoordinates_in_data; /* internal */
@class SODataV4_Any_as_data_ListBase_in_data; /* internal */
@class SODataV4_Any_as_data_LocalDateTime_in_data; /* internal */
@class SODataV4_Any_as_data_LocalDate_in_data; /* internal */
@class SODataV4_Any_as_data_LocalTime_in_data; /* internal */
@class SODataV4_Any_as_data_LongValue_in_data; /* internal */
@class SODataV4_Any_as_data_ObjectMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_Parameter_in_data; /* internal */
@class SODataV4_Any_as_data_PathAnnotationsMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_PathAnnotations_in_data; /* internal */
@class SODataV4_Any_as_data_PointCoordinates_in_data; /* internal */
@class SODataV4_Any_as_data_PolygonCoordinates_in_data; /* internal */
@class SODataV4_Any_as_data_PropertyMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_PropertyPath_in_data; /* internal */
@class SODataV4_Any_as_data_Property_in_data; /* internal */
@class SODataV4_Any_as_data_QueryFilter_in_data; /* internal */
@class SODataV4_Any_as_data_QueryFunctionCall_in_data; /* internal */
@class SODataV4_Any_as_data_QueryFunctionMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_QueryFunction_in_data; /* internal */
@class SODataV4_Any_as_data_QueryOperatorCall_in_data; /* internal */
@class SODataV4_Any_as_data_QueryOperatorMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_QueryOperator_in_data; /* internal */
@class SODataV4_Any_as_data_SelectItem_in_data; /* internal */
@class SODataV4_Any_as_data_ShortValue_in_data; /* internal */
@class SODataV4_Any_as_data_SimpleTypeMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_SimpleType_in_data; /* internal */
@class SODataV4_Any_as_data_SortItem_in_data; /* internal */
@class SODataV4_Any_as_data_StreamLink_in_data; /* internal */
@class SODataV4_Any_as_data_StreamProperty_in_data; /* internal */
@class SODataV4_Any_as_data_StringMap_Entry_in_data; /* internal */
@class SODataV4_Any_as_data_StringValue_in_data; /* internal */
@class SODataV4_Any_as_data_StructureBase_in_data; /* internal */
@class SODataV4_Any_as_data_StructureType_in_data; /* internal */
@class SODataV4_Any_as_data_TransformValue_in_data; /* internal */
@class SODataV4_Any_as_data_UnsignedByte_in_data; /* internal */
@class SODataV4_Any_as_data_UnsignedShort_in_data; /* internal */
@class SODataV4_Any_as_data_YearMonthDuration_in_data; /* internal */
@class SODataV4_Any_isNullable_data_ComplexValue_in_data; /* internal */
@class SODataV4_Any_isNullable_data_DataValue_in_data; /* internal */
@class SODataV4_Any_isNullable_data_EntityValue_in_data; /* internal */
@class SODataV4_ApplyDefault_DataQuery_in_data; /* internal */
@class SODataV4_Default_empty_ComplexTypeList_in_data; /* internal */
@class SODataV4_Default_empty_EntityTypeList_in_data; /* internal */
@class SODataV4_Default_empty_ExpandItemList_in_data; /* internal */
@class SODataV4_Default_empty_SelectItemList_in_data; /* internal */
@class SODataV4_Default_empty_SortItemList_in_data; /* internal */
@class SODataV4_Default_new_DataQuery_in_data; /* internal */
@class SODataV4_Default_new_StringMap_in_data; /* internal */
@class SODataV4_Default_new_TypeFacets_in_data; /* internal */
@class SODataV4_Default_none_RequestOptions_in_data; /* internal */
@class SODataV4_Default_undefined_EntitySet_in_data; /* internal */
@class SODataV4_List_map_GeographyValueList_StringList_in_data; /* internal */
@class SODataV4_List_map_GeometryValueList_StringList_in_data; /* internal */
@class SODataV4_List_map_LineStringCoordinates_StringList_in_data; /* internal */
@class SODataV4_List_map_MultiLineStringCoordinates_StringList_in_data; /* internal */
@class SODataV4_List_map_MultiPointCoordinates_StringList_in_data; /* internal */
@class SODataV4_List_map_MultiPolygonCoordinates_StringList_in_data; /* internal */
@class SODataV4_List_map_PointCoordinates_StringList_in_data; /* internal */
@class SODataV4_List_map_PolygonCoordinates_StringList_in_data; /* internal */
@class SODataV4_List_sort_static_StringList_StringOperator_compare_in_data; /* internal */
@class SODataV4_Map_invert_StringMap_StringMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_AnnotationMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_AnnotationTermMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_AnyMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_ComplexTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_DataMethodMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_DataSchemaMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_EntityContainerMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_EntitySetMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_EntityTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_EnumTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_EnumValueMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_ObjectMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_PropertyMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_SimpleTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedEntries_StringMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_AnnotationMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_AnnotationTermMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_ComplexTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_DataMethodMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_DataSchemaMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_EntityContainerMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_EntitySetMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_EntityTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_EnumTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_EnumValueMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_PropertyMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_SimpleTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedKeys_StringMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_AnnotationMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_AnnotationTermMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_ComplexTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_DataMethodMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_DataSchemaMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_EntityContainerMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_EntitySetMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_EntityTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_EnumTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_EnumValueMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_PropertyMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_SimpleTypeMap_in_data; /* internal */
@class SODataV4_Map_sortedValues_StringMap_in_data; /* internal */
@class SODataV4_Share_withNullable_ComplexValueList_in_data; /* internal */
@class SODataV4_Share_withNullable_DataValueList_in_data; /* internal */
@class SODataV4_Share_withNullable_EntityValueList_in_data; /* internal */

#ifdef import_SODataV4__List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer_internal
#ifndef imported_SODataV4__List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer_internal
#define imported_SODataV4__List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer_public
/* internal */
@interface SODataV4_List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_List_sort_static_StringList_StringOperator_compare_in_data_ItemComparer* singleton;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnnotationMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_AnnotationMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_AnnotationMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_AnnotationMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_AnnotationMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnyMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_AnyMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_AnyMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_AnyMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_AnyMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_DataMethodMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_DataMethodMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_DataMethodMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_DataMethodMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_DataMethodMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_DataSchemaMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_DataSchemaMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_EntityContainerMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_EntityContainerMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntitySetMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_EntitySetMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_EntitySetMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_EntitySetMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_EntitySetMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_EntityTypeMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_EntityTypeMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_EnumTypeMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_EnumTypeMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EnumValueMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_EnumValueMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_EnumValueMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_EnumValueMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_EnumValueMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_ObjectMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_ObjectMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_ObjectMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_ObjectMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_ObjectMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_PropertyMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_PropertyMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_PropertyMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_PropertyMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_PropertyMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_StringMap_in_data_KeyComparer_internal
#ifndef imported_SODataV4__Map_sortedEntries_StringMap_in_data_KeyComparer_internal
#define imported_SODataV4__Map_sortedEntries_StringMap_in_data_KeyComparer_public
/* internal */
@interface SODataV4_Map_sortedEntries_StringMap_in_data_KeyComparer : SODataV4_Comparer
{
    @private SODataV4_Comparer* _Nonnull comparer_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Map_sortedEntries_StringMap_in_data_KeyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_Comparer*) comparer;
- (void) setComparer :(nonnull SODataV4_Comparer*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Comparer* comparer;
@end
#endif
#endif

#ifndef imported_SODataV4__AggregateExpression_public
#define imported_SODataV4__AggregateExpression_public
/// @brief Encapsulates an [OData](http://odata.org) aggregate expression item.
///
///
@interface SODataV4_AggregateExpression : SODataV4_ObjectBase
{
    @private SODataV4_DataValue* _Nullable value_;
    @private SODataV4_AggregateMethod* _Nullable method_;
    @private NSString* _Nullable alias_;
    @private SODataV4_boolean isCount_;
    @private SODataV4_PropertyPath* _Nullable navigationPath_;
    @private SODataV4_AggregateFromList* _Nonnull aggregateFromList_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_AggregateExpression*) new;
/// @internal
///
- (void) _init;
/// @brief The items in the "from" clause of the aggregate item.
///
///
- (nonnull SODataV4_AggregateFromList*) aggregateFromList;
/// @brief The alias of the aggregate transformation item.
///
///
- (nullable NSString*) alias;
/// @brief Creates a $count aggregate expression item.
///
///
/// @return The aggregate transformation value.
/// @param alias The alias for the aggregate item.
+ (nonnull SODataV4_AggregateExpression*) count :(nonnull NSString*)alias;
/// @brief Creates an aggregate expression item.
///
///
/// @return The aggregate transformation value.
/// @param value The value to be aggregated.
/// @param method The aggregate method to be used for aggregating.
/// @param alias The alias for the returned result property.
+ (nonnull SODataV4_AggregateExpression*) create :(nullable SODataV4_DataValue*)value :(nullable SODataV4_AggregateMethod*)method :(nullable NSString*)alias;
/// @brief Creates an aggregate expression item.
///
///
/// @return The aggregate transformation value.
/// @param value The value to be aggregated.
/// @param method The aggregate method to be used for aggregating.
/// @param alias The alias for the returned result property.
/// @param navigationPath The path of the related entities to apply the aggregate transformation on.
+ (nonnull SODataV4_AggregateExpression*) createWithNavigationPath :(nullable SODataV4_DataValue*)value :(nullable SODataV4_AggregateMethod*)method :(nullable NSString*)alias :(nullable SODataV4_PropertyPath*)navigationPath;
/// @brief Adds a 'from' clause to the aggregate expression.
///
///
/// @return The aggregate expression value.
/// @param propertyPath The property path for the 'from' clause.
/// @param method The aggregate method for the 'from' clause.
- (nonnull SODataV4_AggregateExpression*) from :(nonnull SODataV4_PropertyPath*)propertyPath :(nullable SODataV4_AggregateMethod*)method;
/// @brief True if the aggregate transformation item represents a $count item.
///
///
- (SODataV4_boolean) isCount;
/// @brief The method of the aggregate transformation item.
///
///
- (nullable SODataV4_AggregateMethod*) method;
/// @brief The navigation path to be applied for the aggregate expression. All the paths will be evaluated relative to this path.
///
///
- (nullable SODataV4_PropertyPath*) navigationPath;
/// @brief The value of the aggregate transformation item.
///
///
- (nullable SODataV4_DataValue*) value;
/// @brief The items in the "from" clause of the aggregate item.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AggregateFromList* aggregateFromList;
/// @brief The alias of the aggregate transformation item.
///
///
@property (nonatomic, readonly, strong, nullable) NSString* alias;
/// @brief True if the aggregate transformation item represents a $count item.
///
///
@property (nonatomic, readonly) SODataV4_boolean isCount;
/// @brief The method of the aggregate transformation item.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_AggregateMethod* method;
/// @brief The navigation path to be applied for the aggregate expression. All the paths will be evaluated relative to this path.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_PropertyPath* navigationPath;
/// @brief The value of the aggregate transformation item.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_DataValue* value;
@end
#endif

#ifdef import_SODataV4__AggregateExpression_private
#ifndef imported_SODataV4__AggregateExpression_private
#define imported_SODataV4__AggregateExpression_private
@interface SODataV4_AggregateExpression (private)
+ (nonnull SODataV4_AggregateExpression*) _new1 :(SODataV4_boolean)p1 :(nullable NSString*)p2 :(nullable SODataV4_AggregateMethod*)p3 :(nullable SODataV4_DataValue*)p4;
+ (nonnull SODataV4_AggregateExpression*) _new2 :(nullable NSString*)p1 :(nullable SODataV4_AggregateMethod*)p2 :(nullable SODataV4_DataValue*)p3;
+ (nonnull SODataV4_AggregateExpression*) _new3 :(nullable SODataV4_PropertyPath*)p1 :(nullable NSString*)p2 :(nullable SODataV4_AggregateMethod*)p3 :(nullable SODataV4_DataValue*)p4;
@end
#endif
#endif

#ifndef imported_SODataV4__AggregateFrom_public
#define imported_SODataV4__AggregateFrom_public
/// @brief Represents the 'from' clause in an aggregate transformation item.
///
///
@interface SODataV4_AggregateFrom : SODataV4_ObjectBase
{
    @private SODataV4_PropertyPath* _Nonnull propertyPath_;
    @private SODataV4_AggregateMethod* _Nullable method_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Creates a 'from' clause to the aggregate transformation item.
///
///
/// @return The '' from clause for an aggregate transformation value.
/// @param propertyPath The property path for the 'from' clause.
/// @param method The aggregate method for the 'from' clause.
+ (nonnull SODataV4_AggregateFrom*) create :(nonnull SODataV4_PropertyPath*)propertyPath :(nullable SODataV4_AggregateMethod*)method;
/// @brief Aggregate method of the From clause in the Aggregate item
///
///
- (nullable SODataV4_AggregateMethod*) method;
/// @brief Property path of the From clause in the Aggregate item
///
///
- (nonnull SODataV4_PropertyPath*) propertyPath;
/// @brief Aggregate method of the From clause in the Aggregate item
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_AggregateMethod* method;
/// @brief Property path of the From clause in the Aggregate item
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_PropertyPath* propertyPath;
@end
#endif

#ifdef import_SODataV4__AggregateFrom_private
#ifndef imported_SODataV4__AggregateFrom_private
#define imported_SODataV4__AggregateFrom_private
@interface SODataV4_AggregateFrom (private)
+ (nonnull SODataV4_AggregateFrom*) new;
+ (nonnull SODataV4_AggregateFrom*) _new1 :(nonnull SODataV4_PropertyPath*)p1 :(nullable SODataV4_AggregateMethod*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__AggregateMethod_public
#define imported_SODataV4__AggregateMethod_public
/// @brief Represents the method of the aggregate transformation item.
///
///
@interface SODataV4_AggregateMethod : SODataV4_ObjectBase
{
    @private NSString* _Nonnull name_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Represents the 'average' aggregate method.
///
///
+ (nonnull SODataV4_AggregateMethod*) average;
/// @brief Represents the 'countdistinct' aggregate method.
///
///
+ (nonnull SODataV4_AggregateMethod*) countDistinct;
/// @brief Creates a custom aggregate method.
///
///
/// @return A custom aggregate method.
/// @param name The name of the custom aggregate method.
+ (nonnull SODataV4_AggregateMethod*) custom :(nonnull NSString*)name;
/// @brief Represents the 'max' aggregate method.
///
///
+ (nonnull SODataV4_AggregateMethod*) maximum;
/// @brief Represents the 'min' aggregate method.
///
///
+ (nonnull SODataV4_AggregateMethod*) minimum;
/// @brief The name of the aggregate method.
///
///
- (nonnull NSString*) name;
/// @brief Represents the 'sum' aggregate method.
///
///
+ (nonnull SODataV4_AggregateMethod*) sum;
/// @brief Represents the 'average' aggregate method.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateMethod* average;
/// @brief Represents the 'countdistinct' aggregate method.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateMethod* countDistinct;
/// @brief Represents the 'max' aggregate method.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateMethod* maximum;
/// @brief Represents the 'min' aggregate method.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateMethod* minimum;
/// @brief The name of the aggregate method.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief Represents the 'sum' aggregate method.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateMethod* sum;
@end
#endif

#ifdef import_SODataV4__AggregateMethod_private
#ifndef imported_SODataV4__AggregateMethod_private
#define imported_SODataV4__AggregateMethod_private
@interface SODataV4_AggregateMethod (private)
+ (nonnull SODataV4_AggregateMethod*) new;
+ (nonnull SODataV4_AggregateMethod*) _new1 :(nonnull NSString*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__Annotation_public
#define imported_SODataV4__Annotation_public
/// @brief Represents an [OData](http://odata.org) annotation.
///
///
/// @see `SODataV4_AnnotationTerm`.
@interface SODataV4_Annotation : SODataV4_ObjectBase
{
    @private SODataV4_AnnotationTerm* _Nonnull term_;
    @private NSString* _Nullable qualifier_;
    @private SODataV4_boolean explicitNull_;
    @private SODataV4_DataValue* _Nullable explicitValue_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Annotation*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_Annotation`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_Annotation`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Is `SODataV4_Annotation`.`explicitValue` an explicit `nil` value?
///
///
- (SODataV4_boolean) explicitNull;
/// @brief Explicit annotation value.
///
///
/// @see `SODataV4_Annotation`.`value`.
- (nullable SODataV4_DataValue*) explicitValue;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_Annotation`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief Annotation qualifier.
///
///
- (nullable NSString*) qualifier;
/// @brief Is `SODataV4_Annotation`.`explicitValue` an explicit `nil` value?
///
///
- (void) setExplicitNull :(SODataV4_boolean)value;
/// @brief Explicit annotation value.
///
///
/// @see `SODataV4_Annotation`.`value`.
- (void) setExplicitValue :(nullable SODataV4_DataValue*)value;
/// @brief Annotation qualifier.
///
///
- (void) setQualifier :(nullable NSString*)value;
/// @brief Annotation term.
///
///
- (void) setTerm :(nonnull SODataV4_AnnotationTerm*)value;
/// @brief Annotation term.
///
///
- (nonnull SODataV4_AnnotationTerm*) term;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Annotation value.
///
/// Will return `term.defaultValue` if `SODataV4_Annotation`.`explicitValue` is `nil` and `SODataV4_Annotation`.`explicitNull` is `false`.
/// Otherwise returns `SODataV4_Annotation`.`explicitValue`.
- (nullable SODataV4_DataValue*) value;
/// @brief Obsolete. Use `SODataV4_Annotation`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_Annotation`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Is `SODataV4_Annotation`.`explicitValue` an explicit `nil` value?
///
///
@property (nonatomic, readwrite) SODataV4_boolean explicitNull;
/// @brief Explicit annotation value.
///
///
/// @see `SODataV4_Annotation`.`value`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValue* explicitValue;
/// @brief Annotation qualifier.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* qualifier;
/// @brief Annotation term.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_AnnotationTerm* term;
/// @brief Annotation value.
///
/// Will return `term.defaultValue` if `SODataV4_Annotation`.`explicitValue` is `nil` and `SODataV4_Annotation`.`explicitNull` is `false`.
/// Otherwise returns `SODataV4_Annotation`.`explicitValue`.
@property (nonatomic, readonly, strong, nullable) SODataV4_DataValue* value;
@end
#endif

#ifndef imported_SODataV4__AnnotationMap_Entry_public
#define imported_SODataV4__AnnotationMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_AnnotationMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_Annotation* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_AnnotationMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_Annotation*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_Annotation*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Annotation* value;
@end
#endif

#ifndef imported_SODataV4__AnnotationTerm_public
#define imported_SODataV4__AnnotationTerm_public
/// @brief Encapsulates an [OData](http://odata.org) term definition.
///
///
/// @see `SODataV4_Annotation`.
@interface SODataV4_AnnotationTerm : SODataV4_ObjectBase
{
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private NSString* _Nullable xmlAttribute_;
    @private SODataV4_DataType* _Nonnull type_;
    @private SODataV4_AnnotationTerm* _Nullable baseTerm_;
    @private SODataV4_DataValue* _Nullable defaultValue_;
    @private SODataV4_StringList* _Nonnull appliesTo_;
    @private SODataV4_boolean isUnicode_;
    @private SODataV4_int minLength_;
    @private SODataV4_int maxLength_;
    @private SODataV4_int precision_;
    @private SODataV4_int scale_;
    @private SODataV4_int srid_;
    @private SODataV4_boolean isNullable_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_boolean isInferred_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_AnnotationTerm*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_AnnotationTerm`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_AnnotationTerm`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief The types of CSDL definition this term applies to.
///
///
- (nonnull SODataV4_StringList*) appliesTo;
/// @brief Base term if this term is inherited, otherwise `nil`.
///
///
- (nullable SODataV4_AnnotationTerm*) baseTerm;
/// @brief Default value for `SODataV4_Annotation`.`value` of annotations referencing this term, or `nil` if there is no default value.
///
///
- (nullable SODataV4_DataValue*) defaultValue;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_AnnotationTerm`.`minLength`, `SODataV4_AnnotationTerm`.`maxLength`.
- (SODataV4_boolean) fixedLength;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_AnnotationTerm`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief `true` if this annotation term was inferred due to a missing term definition in the CSDL.
///
///
- (SODataV4_boolean) isInferred;
/// @brief `true` if this item is nullable.
///
///
- (SODataV4_boolean) isNullable;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (SODataV4_boolean) isUnicode;
/// @brief Term name within its defining schema, e.g. "MyTerm".
///
///
- (nonnull NSString*) localName;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) minLength;
/// @brief Synonym for `SODataV4_AnnotationTerm`.`qualifiedName`.
///
///
- (nonnull NSString*) name;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (SODataV4_int) precision;
/// @brief Term name qualified by its owning schema, e.g. "MySchema.MyTerm".
///
///
- (nonnull NSString*) qualifiedName;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (SODataV4_int) scale;
/// @brief The types of CSDL definition this term applies to.
///
///
- (void) setAppliesTo :(nonnull SODataV4_StringList*)value;
/// @brief Base term if this term is inherited, otherwise `nil`.
///
///
- (void) setBaseTerm :(nullable SODataV4_AnnotationTerm*)value;
/// @brief Default value for `SODataV4_Annotation`.`value` of annotations referencing this term, or `nil` if there is no default value.
///
///
- (void) setDefaultValue :(nullable SODataV4_DataValue*)value;
/// @brief `true` if this annotation term was inferred due to a missing term definition in the CSDL.
///
///
- (void) setIsInferred :(SODataV4_boolean)value;
/// @brief `true` if this item is nullable.
///
///
- (void) setIsNullable :(SODataV4_boolean)value;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (void) setIsUnicode :(SODataV4_boolean)value;
/// @brief Term name within its defining schema, e.g. "MyTerm".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMaxLength :(SODataV4_int)value;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMinLength :(SODataV4_int)value;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (void) setPrecision :(SODataV4_int)value;
/// @brief Term name qualified by its owning schema, e.g. "MySchema.MyTerm".
///
///
- (void) setQualifiedName :(nonnull NSString*)value;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (void) setScale :(SODataV4_int)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (void) setSrid :(SODataV4_int)value;
/// @brief Data type for `SODataV4_Annotation`.`value` of annotations referencing this term.
///
///
- (void) setType :(nonnull SODataV4_DataType*)value;
/// @brief If this annotation was derived from an XML attribute, then the attribute name.
///
/// XML attribute-based annotations are commonly used in OData 2.0 schemas.
- (void) setXmlAttribute :(nullable NSString*)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (SODataV4_int) srid;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Data type for `SODataV4_Annotation`.`value` of annotations referencing this term.
///
///
- (nonnull SODataV4_DataType*) type;
/// @brief If this annotation was derived from an XML attribute, then the attribute name.
///
/// XML attribute-based annotations are commonly used in OData 2.0 schemas.
- (nullable NSString*) xmlAttribute;
/// @brief Obsolete. Use `SODataV4_AnnotationTerm`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_AnnotationTerm`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief The types of CSDL definition this term applies to.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StringList* appliesTo;
/// @brief Base term if this term is inherited, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_AnnotationTerm* baseTerm;
/// @brief Default value for `SODataV4_Annotation`.`value` of annotations referencing this term, or `nil` if there is no default value.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValue* defaultValue;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_AnnotationTerm`.`minLength`, `SODataV4_AnnotationTerm`.`maxLength`.
@property (nonatomic, readonly) SODataV4_boolean fixedLength;
/// @brief `true` if this annotation term was inferred due to a missing term definition in the CSDL.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isInferred;
/// @brief `true` if this item is nullable.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isNullable;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
@property (nonatomic, readwrite) SODataV4_boolean isUnicode;
/// @brief Term name within its defining schema, e.g. "MyTerm".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int minLength;
/// @brief Synonym for `SODataV4_AnnotationTerm`.`qualifiedName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
@property (nonatomic, readwrite) SODataV4_int precision;
/// @brief Term name qualified by its owning schema, e.g. "MySchema.MyTerm".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
@property (nonatomic, readwrite) SODataV4_int scale;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
@property (nonatomic, readwrite) SODataV4_int srid;
/// @brief Data type for `SODataV4_Annotation`.`value` of annotations referencing this term.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* type;
/// @brief If this annotation was derived from an XML attribute, then the attribute name.
///
/// XML attribute-based annotations are commonly used in OData 2.0 schemas.
@property (nonatomic, readwrite, strong, nullable) NSString* xmlAttribute;
@end
#endif

#ifndef imported_SODataV4__AnnotationTermMap_Entry_public
#define imported_SODataV4__AnnotationTermMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_AnnotationTermMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_AnnotationTerm* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_AnnotationTermMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_AnnotationTerm*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_AnnotationTerm*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_AnnotationTerm* value;
@end
#endif

#ifndef imported_SODataV4__AnyMap_Entry_public
#define imported_SODataV4__AnyMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_AnyMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private NSObject* _Nullable value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_AnyMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nullable NSObject*)value;
/// @brief Map entry value.
///
///
- (nullable NSObject*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nullable) NSObject* value;
@end
#endif

#ifndef imported_SODataV4__ArrayFunction_public
#define imported_SODataV4__ArrayFunction_public
/// @internal
///
@interface SODataV4_ArrayFunction : SODataV4_ObjectBase
{
}
@end
#endif

#ifndef imported_SODataV4__ArrayProperty_public
#define imported_SODataV4__ArrayProperty_public
/// @internal
///
@interface SODataV4_ArrayProperty : SODataV4_ObjectBase
{
}
@end
#endif

#ifndef imported_SODataV4__BasicType_public
#define imported_SODataV4__BasicType_public
/// @internal
///
@interface SODataV4_BasicType : SODataV4_ObjectBase
{
}
+ (void) initialize;
+ (nonnull SODataV4_DataType*) ANNOTATION_PATH;
+ (nonnull SODataV4_DataType*) BINARY;
+ (nonnull SODataV4_DataType*) BOOLEAN;
+ (nonnull SODataV4_DataType*) BYTE;
+ (nonnull SODataV4_DataType*) BYTE_STREAM;
+ (nonnull SODataV4_DataType*) CHAR;
+ (nonnull SODataV4_DataType*) CHAR_STREAM;
+ (nonnull SODataV4_DataType*) DAY_TIME_DURATION;
+ (nonnull SODataV4_DataType*) DECIMAL;
+ (nonnull SODataV4_DataType*) DELTA_STREAM;
+ (nonnull SODataV4_DataType*) DOUBLE;
+ (nonnull SODataV4_DataType*) DYNAMIC_PATH;
+ (nonnull SODataV4_DataType*) EDM_PRIMITIVE;
+ (nonnull SODataV4_DataType*) FLOAT;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_COLLECTION;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_LINE_STRING;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_MULTI_LINE_STRING;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_MULTI_POINT;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_MULTI_POLYGON;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_POINT;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_POLYGON;
+ (nonnull SODataV4_DataType*) GEOGRAPHY_VALUE;
+ (nonnull SODataV4_DataType*) GEOMETRY_COLLECTION;
+ (nonnull SODataV4_DataType*) GEOMETRY_LINE_STRING;
+ (nonnull SODataV4_DataType*) GEOMETRY_MULTI_LINE_STRING;
+ (nonnull SODataV4_DataType*) GEOMETRY_MULTI_POINT;
+ (nonnull SODataV4_DataType*) GEOMETRY_MULTI_POLYGON;
+ (nonnull SODataV4_DataType*) GEOMETRY_POINT;
+ (nonnull SODataV4_DataType*) GEOMETRY_POLYGON;
+ (nonnull SODataV4_DataType*) GEOMETRY_VALUE;
+ (nonnull SODataV4_DataType*) GLOBAL_DATE_TIME;
+ (nonnull SODataV4_DataType*) GUID_VALUE;
+ (nonnull SODataV4_DataType*) INT;
+ (nonnull SODataV4_DataType*) INTEGER;
+ (nonnull SODataV4_DataType*) LIST;
+ (nonnull SODataV4_DataType*) LOCAL_DATE;
+ (nonnull SODataV4_DataType*) LOCAL_DATE_TIME;
+ (nonnull SODataV4_DataType*) LOCAL_TIME;
+ (nonnull SODataV4_DataType*) LONG;
+ (nonnull SODataV4_DataType*) NAVIGATION_PATH;
+ (nonnull SODataV4_DataType*) OBJECT;
+ (nonnull SODataV4_DataType*) PATH;
+ (nonnull SODataV4_DataType*) PATH_EXPRESSION;
+ (nonnull SODataV4_DataType*) PROPERTY_PATH;
+ (nonnull SODataV4_DataType*) SHORT;
+ (nonnull SODataV4_DataType*) STREAM_LINK;
+ (nonnull SODataV4_DataType*) STRING;
+ (nonnull SODataV4_DataType*) STRUCTURAL_PATH;
+ (nonnull SODataV4_DataType*) UNKNOWN;
+ (nonnull SODataV4_DataType*) UNSIGNED_BYTE;
+ (nonnull SODataV4_DataType*) UNSIGNED_INT;
+ (nonnull SODataV4_DataType*) UNSIGNED_LONG;
+ (nonnull SODataV4_DataType*) UNSIGNED_SHORT;
+ (nonnull SODataV4_DataType*) YEAR_MONTH_DURATION;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* ANNOTATION_PATH;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* BINARY;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* BOOLEAN;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* BYTE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* BYTE_STREAM;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* CHAR;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* CHAR_STREAM;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* DAY_TIME_DURATION;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* DECIMAL;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* DELTA_STREAM;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* DOUBLE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* DYNAMIC_PATH;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* EDM_PRIMITIVE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* FLOAT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_COLLECTION;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_LINE_STRING;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_MULTI_LINE_STRING;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_MULTI_POINT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_MULTI_POLYGON;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_POINT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_POLYGON;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOGRAPHY_VALUE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_COLLECTION;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_LINE_STRING;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_MULTI_LINE_STRING;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_MULTI_POINT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_MULTI_POLYGON;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_POINT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_POLYGON;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GEOMETRY_VALUE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GLOBAL_DATE_TIME;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* GUID_VALUE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* INT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* INTEGER;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* LIST;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* LOCAL_DATE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* LOCAL_DATE_TIME;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* LOCAL_TIME;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* LONG;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* NAVIGATION_PATH;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* OBJECT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* PATH;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* PATH_EXPRESSION;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* PROPERTY_PATH;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* SHORT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* STREAM_LINK;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* STRING;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* STRUCTURAL_PATH;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* UNKNOWN;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* UNSIGNED_BYTE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* UNSIGNED_INT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* UNSIGNED_LONG;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* UNSIGNED_SHORT;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* YEAR_MONTH_DURATION;
@end
#endif

#ifdef import_SODataV4__BasicTypes_internal
#ifndef imported_SODataV4__BasicTypes_internal
#define imported_SODataV4__BasicTypes_public
/* internal */
@interface SODataV4_BasicTypes : SODataV4_ObjectBase
{
    @private SODataV4_DataTypeList* _Nonnull _list_;
    @private SODataV4_DataTypeMap* _Nonnull _map_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
- (nullable SODataV4_DataType*) byCode :(SODataV4_int)code;
- (nullable SODataV4_DataType*) byName :(nonnull NSString*)name;
+ (nonnull SODataV4_BasicTypes*) myInit;
+ (nonnull SODataV4_BasicTypes*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_BasicTypes* singleton;
@end
#endif
#endif

#ifdef import_SODataV4__BasicTypes_private
#ifndef imported_SODataV4__BasicTypes_private
#define imported_SODataV4__BasicTypes_private
@interface SODataV4_BasicTypes (private)
+ (nonnull SODataV4_BasicTypes*) new;
- (nonnull SODataV4_DataTypeList*) _list;
- (nonnull SODataV4_DataTypeMap*) _map;
- (void) set_list :(nonnull SODataV4_DataTypeList*)value;
- (void) set_map :(nonnull SODataV4_DataTypeMap*)value;
+ (nonnull SODataV4_BasicTypes*) _new1 :(nonnull SODataV4_DataTypeList*)p1 :(nonnull SODataV4_DataTypeMap*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataTypeList* _list;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataTypeMap* _map;
@end
#endif
#endif

#ifndef imported_SODataV4__CancelToken_public
#define imported_SODataV4__CancelToken_public
/// @brief A token for requesting the cancellation of asynchronous requests.
///
///
@interface SODataV4_CancelToken : SODataV4_ObjectBase
{
    @private SODataV4_boolean _cancelled_;
    @private SODataV4_CancellationListenerList* _Nonnull _listeners;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_CancelToken*) new;
/// @internal
///
- (void) _init;
/// @brief Add a listener that will be notified if this token is cancelled.
///
///
/// @param listener Cancellation listener.
- (void) addListener :(nonnull SODataV4_CancellationListener*)listener;
/// @brief Cancel all asynchronous requests using this token.
///
///
/// @see `SODataV4_RequestOptions`.`cancelToken`.
- (void) cancel;
/// @brief Has cancellation been requested?
///
///
/// @see `SODataV4_CancelToken`.`cancel`.
- (SODataV4_boolean) isCancelled;
/// @brief Has cancellation been requested?
///
///
/// @see `SODataV4_CancelToken`.`cancel`.
@property (nonatomic, readonly) SODataV4_boolean isCancelled;
@end
#endif

#ifdef import_SODataV4__CancelToken_private
#ifndef imported_SODataV4__CancelToken_private
#define imported_SODataV4__CancelToken_private
@interface SODataV4_CancelToken (private)
- (SODataV4_boolean) _cancelled;
- (void) set_cancelled :(SODataV4_boolean)value;
@property (nonatomic, readwrite) SODataV4_boolean _cancelled;
@end
#endif
#endif

#ifndef imported_SODataV4__CancellationListener_public
#define imported_SODataV4__CancellationListener_public
/// @brief Listener for notification of request cancellation.
///
///
@interface SODataV4_CancellationListener : SODataV4_ObjectBase
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_CancellationListener*) new;
/// @internal
///
- (void) _init;
/// @brief Notify the cancellation of `token`.
///
///
/// @param token Cancellation token.
- (void) onCancel :(nonnull SODataV4_CancelToken*)token;
@end
#endif

#ifndef imported_SODataV4__ChangedLink_public
#define imported_SODataV4__ChangedLink_public
/// @brief Encapsulates an [OData](http://odata.org) changed link.
///
///
/// @see `ChangeSet.createLink`, `ChangeSet.updateLink`, `ChangeSet.deleteLink`.
@interface SODataV4_ChangedLink : SODataV4_ObjectBase
{
    @private SODataV4_EntityValue* _Nonnull source_;
    @private SODataV4_Property* _Nonnull sourceProperty_;
    @private SODataV4_EntityValue* _Nonnull target_;
    @private SODataV4_GlobalDateTime* _Nullable deltaTime_;
    @private SODataV4_boolean isCreated_;
    @private SODataV4_boolean isUpdated_;
    @private SODataV4_boolean isDeleted_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ChangedLink*) new;
/// @internal
///
- (void) _init;
/// @brief Can be used to hold the "last modified time" for a changed link.
///
///
- (nullable SODataV4_GlobalDateTime*) deltaTime;
/// @brief Is this a created link?
///
/// Created links are applicable to one-to-one and one-to-many navigation properties.
- (SODataV4_boolean) isCreated;
/// @brief Is this an deleted link?
///
/// Deleted links are applicable to one-to-one and one-to-many navigation properties.
- (SODataV4_boolean) isDeleted;
/// @brief Is this an updated link?
///
/// Updated links are only applicable to one-to-one navigation properties.
- (SODataV4_boolean) isUpdated;
/// @brief Can be used to hold the "last modified time" for a changed link.
///
///
- (void) setDeltaTime :(nullable SODataV4_GlobalDateTime*)value;
/// @brief Is this a created link?
///
/// Created links are applicable to one-to-one and one-to-many navigation properties.
- (void) setIsCreated :(SODataV4_boolean)value;
/// @brief Is this an deleted link?
///
/// Deleted links are applicable to one-to-one and one-to-many navigation properties.
- (void) setIsDeleted :(SODataV4_boolean)value;
/// @brief Is this an updated link?
///
/// Updated links are only applicable to one-to-one navigation properties.
- (void) setIsUpdated :(SODataV4_boolean)value;
/// @brief Source entity which contains the changed link.
///
///
- (void) setSource :(nonnull SODataV4_EntityValue*)value;
/// @brief Source navigation property for the changed link.
///
///
- (void) setSourceProperty :(nonnull SODataV4_Property*)value;
/// @brief Target entity referred to by the changed link.
///
///
- (void) setTarget :(nonnull SODataV4_EntityValue*)value;
/// @brief Source entity which contains the changed link.
///
///
- (nonnull SODataV4_EntityValue*) source;
/// @brief Source navigation property for the changed link.
///
///
- (nonnull SODataV4_Property*) sourceProperty;
/// @brief Target entity referred to by the changed link.
///
///
- (nonnull SODataV4_EntityValue*) target;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Can be used to hold the "last modified time" for a changed link.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* deltaTime;
/// @brief Is this a created link?
///
/// Created links are applicable to one-to-one and one-to-many navigation properties.
@property (nonatomic, readwrite) SODataV4_boolean isCreated;
/// @brief Is this an deleted link?
///
/// Deleted links are applicable to one-to-one and one-to-many navigation properties.
@property (nonatomic, readwrite) SODataV4_boolean isDeleted;
/// @brief Is this an updated link?
///
/// Updated links are only applicable to one-to-one navigation properties.
@property (nonatomic, readwrite) SODataV4_boolean isUpdated;
/// @brief Source entity which contains the changed link.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityValue* source;
/// @brief Source navigation property for the changed link.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Property* sourceProperty;
/// @brief Target entity referred to by the changed link.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityValue* target;
@end
#endif

#ifndef imported_SODataV4__ComplexTypeMap_Entry_public
#define imported_SODataV4__ComplexTypeMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_ComplexTypeMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_ComplexType* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ComplexTypeMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_ComplexType*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_ComplexType*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ComplexType* value;
@end
#endif

#ifndef imported_SODataV4__ComplexValueMap_Entry_public
#define imported_SODataV4__ComplexValueMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_ComplexValueMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_ComplexValue* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ComplexValueMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_ComplexValue*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_ComplexValue*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ComplexValue* value;
@end
#endif

#ifndef imported_SODataV4__ConvertDataValue_public
#define imported_SODataV4__ConvertDataValue_public
/// @internal
///
@interface SODataV4_ConvertDataValue : SODataV4_ObjectBase
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ConvertDataValue*) new;
/// @internal
///
- (void) _init;
+ (nonnull NSString*) toJSON :(nullable NSObject*)value;
@end
#endif

#ifndef imported_SODataV4__CustomPath_public
#define imported_SODataV4__CustomPath_public
/// @internal
///
@interface SODataV4_CustomPath : SODataV4_ObjectBase
{
    @private SODataV4_Property* _Nonnull __weak myProperty_;
    @private NSString* _Nonnull atomElement_;
    @private NSString* _Nullable atomChild_;
    @private SODataV4_boolean keepInContent_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_CustomPath*) new;
/// @internal
///
- (void) _init;
/// @brief Name of the Atom child the property maps to, e.g. "name" where `atomElement` is "author".
///
///
- (nullable NSString*) atomChild;
/// @brief Name of the Atom element the property maps to, e.g. "title".
///
///
- (nonnull NSString*) atomElement;
/// @return Custom path from target path.
/// @param path Feed customization target path.
+ (nullable SODataV4_CustomPath*) fromTarget :(nonnull NSString*)path;
/// @brief `true` if the property value should be duplicated in regular content.
///
///
- (SODataV4_boolean) keepInContent;
/// @brief Property to which this custom path applies.
///
///
- (nonnull SODataV4_Property*) myProperty;
/// @brief Name of the Atom child the property maps to, e.g. "name" where `atomElement` is "author".
///
///
- (void) setAtomChild :(nullable NSString*)value;
/// @brief Name of the Atom element the property maps to, e.g. "title".
///
///
- (void) setAtomElement :(nonnull NSString*)value;
/// @brief `true` if the property value should be duplicated in regular content.
///
///
- (void) setKeepInContent :(SODataV4_boolean)value;
/// @brief Property to which this custom path applies.
///
///
- (void) setMyProperty :(nonnull SODataV4_Property*)value;
/// @brief Name of the Atom child the property maps to, e.g. "name" where `atomElement` is "author".
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* atomChild;
/// @brief Name of the Atom element the property maps to, e.g. "title".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* atomElement;
/// @brief `true` if the property value should be duplicated in regular content.
///
///
@property (nonatomic, readwrite) SODataV4_boolean keepInContent;
/// @brief Property to which this custom path applies.
///
///
@property (nonatomic, readwrite, weak, nullable) SODataV4_Property* myProperty;
@end
#endif

#ifdef import_SODataV4__CustomPath_private
#ifndef imported_SODataV4__CustomPath_private
#define imported_SODataV4__CustomPath_private
@interface SODataV4_CustomPath (private)
+ (nonnull SODataV4_CustomPath*) _new1 :(nullable NSString*)p1 :(nonnull NSString*)p2;
+ (nonnull SODataV4_CustomPath*) _new2 :(nonnull NSString*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__DataFormat_public
#define imported_SODataV4__DataFormat_public
/// @brief Format constants for use with data protocols.
///
///
@interface SODataV4_DataFormat : SODataV4_ObjectBase
{
}
/// @return The simple name of the specified data format (e.g. "atom", "json", "html", "xml").
/// @param format Data format.
/// @see `SODataV4_DataFormat`.
+ (nonnull NSString*) getName :(SODataV4_int)format;
/// @return The MIME type for the specified data format (e.g. "application/json;charset=utf-8").
/// @param format Data format.
/// @see `SODataV4_DataFormat`.
+ (nonnull NSString*) mediaType :(SODataV4_int)format;
#define SODataV4_DataFormat_ATOM 1
#define SODataV4_DataFormat_JSON 2
#define SODataV4_DataFormat_HTML 3
#define SODataV4_DataFormat_TEXT 4
#define SODataV4_DataFormat_XML 5
@end
#endif

#ifdef import_SODataV4__DataFormat_internal
#ifndef imported_SODataV4__DataFormat_internal
#define imported_SODataV4__DataFormat_internal
@interface SODataV4_DataFormat (internal)
+ (nonnull SODataV4_UndefinedException*) bad :(SODataV4_int)format;
/// @internal
///
+ (SODataV4_int) parseAccept :(nullable NSString*)acceptHeader;
+ (SODataV4_int) parseAccept :(nullable NSString*)acceptHeader :(SODataV4_int)defaultFormat;
+ (nonnull SODataV4_UnexpectedException*) unexpected :(SODataV4_int)format;
@end
#endif
#endif

#ifndef imported_SODataV4__DataInternal_public
#define imported_SODataV4__DataInternal_public
/// @internal
///
@interface SODataV4_DataInternal : SODataV4_ObjectBase
{
}
+ (void) initialize;
+ (nonnull SODataV4_DataType*) COMPLEX_LIST_TYPE;
+ (nonnull SODataV4_DataType*) DATA_LIST_TYPE;
+ (nonnull SODataV4_DataType*) ENTITY_LIST_TYPE;
+ (SODataV4_boolean) checkETag :(nullable NSString*)tag;
+ (void) fixInferred :(nonnull SODataV4_StructureBase*)structure;
/// @return a "strong" [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag) (entity tag).
///
+ (nonnull NSString*) generateETag;
+ (nonnull NSString*) odataTypeName :(nonnull SODataV4_DataType*)type :(SODataV4_int)dataVersion :(SODataV4_boolean)edmPrefix :(SODataV4_boolean)hashPrefix;
/// @return `result` converted to `SODataV4_QueryResult`.
/// @param query Data query.
/// @param result Query result, either a QueryResult (already), or a DataValue.
+ (nonnull SODataV4_QueryResult*) queryResult :(nonnull SODataV4_DataQuery*)query :(nullable NSObject*)result;
+ (nonnull SODataV4_DataValueList*) structureDataList :(nonnull SODataV4_StructureBase*)structure;
+ (nonnull SODataV4_BooleanArray*) structureHasArray :(nonnull SODataV4_StructureBase*)structure;
+ (nonnull NSString*) xsVersion;
#define SODataV4_DataInternal_MEDIA_PROPERTY_ID -1
#define SODataV4_DataInternal_MEDIA_PROPERTY_ETAG_ID -2
#define SODataV4_DataInternal_MEDIA_PROPERTY_TYPE_ID -3
#define SODataV4_DataInternal_STREAM_PROPERTY_MIN_ETAG_ID -1999999
#define SODataV4_DataInternal_STREAM_PROPERTY_MAX_ETAG_ID -1000000
#define SODataV4_DataInternal_STREAM_PROPERTY_MIN_TYPE_ID -2999999
#define SODataV4_DataInternal_STREAM_PROPERTY_MAX_TYPE_ID -2000000
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* COMPLEX_LIST_TYPE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* DATA_LIST_TYPE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* ENTITY_LIST_TYPE;
@property (nonatomic, readonly, class, strong, nonnull) NSString* xsVersion;
@end
#endif

#ifdef import_SODataV4__DataInternal_private
#ifndef imported_SODataV4__DataInternal_private
#define imported_SODataV4__DataInternal_private
@interface SODataV4_DataInternal (private)
+ (nonnull NSString*) getVersion;
+ (nonnull NSString*) optionalEdm :(nonnull NSString*)name :(SODataV4_boolean)prefix;
+ (nonnull NSString*) optionalHash :(nonnull NSString*)name :(SODataV4_boolean)prefix;
#define SODataV4_DataInternal_XS_VERSION_EQUALS_VALUE @"xs.version=19.1.1-0d1263-20190301\n"
@end
#endif
#endif

#ifndef imported_SODataV4__DataMethod_public
#define imported_SODataV4__DataMethod_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) function or action.
///
///
@interface SODataV4_DataMethod : SODataV4_ObjectBase
{
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private NSString* _Nonnull resourcePath_;
    @private NSString* _Nonnull targetPath_;
    @private NSString* _Nullable unboundMethod_;
    @private NSString* _Nonnull boundName_;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_EntitySet* _Nullable entitySet_;
    @private NSString* _Nullable httpMethod_;
    @private SODataV4_DataMethodMap* _Nonnull overloadMap_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_DataType* _Nonnull returnType_;
    @private SODataV4_ParameterList* _Nonnull parameters_;
    @private SODataV4_boolean isImported_;
    @private SODataV4_boolean isFunction_;
    @private SODataV4_boolean isAction_;
    @private SODataV4_boolean isBound_;
    @private SODataV4_boolean isComposable_;
    @private SODataV4_DataMethodMetrics* _Nonnull metrics_;
    @private SODataV4_boolean isUnicode_;
    @private SODataV4_int minLength_;
    @private SODataV4_int maxLength_;
    @private SODataV4_int precision_;
    @private SODataV4_int scale_;
    @private SODataV4_int srid_;
    @private SODataV4_boolean isNullable_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMethod*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_DataMethod`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_DataMethod`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief The bound name of this method after its binding parameter's type, e.g. "MySchema.MyEntityType.MyAction".
///
/// If `SODataV4_DataMethod`.`isBound` is `false`, then equal to `SODataV4_DataMethod`.`qualifiedName`.
- (nonnull NSString*) boundName;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_DataMethod`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @brief Entity set bound to this method, or `nil` if the method is not bound to an entity set.
///
///
- (nullable SODataV4_EntitySet*) entitySet;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_DataMethod`.`minLength`, `SODataV4_DataMethod`.`maxLength`.
- (SODataV4_boolean) fixedLength;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_DataMethod`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief HTTP Method (e.g. "GET", "POST") for this data method.
///
///
- (nullable NSString*) httpMethod;
/// @brief Synonym for `SODataV4_DataMethod`.`resourcePath`.
///
///
- (nonnull NSString*) importedName;
/// @brief `true` if this method is an action, which is permitted to change entity state.
///
///
- (SODataV4_boolean) isAction;
/// @brief Is this method bound to a value when it is applied?
///
///
- (SODataV4_boolean) isBound;
/// @brief Is this method composable with another method?
///
///
- (SODataV4_boolean) isComposable;
/// @brief `true` if this method was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief `true` if this method is a function, which is not permitted to change entity state.
///
///
- (SODataV4_boolean) isFunction;
/// @brief Is this an ActionImport/FunctionImport (as opposed to an Action/Function)?
///
///
- (SODataV4_boolean) isImported;
/// @brief `true` if this item is nullable.
///
///
- (SODataV4_boolean) isNullable;
/// @brief Is this method overloaded?
///
///
/// @see `SODataV4_DataMethod`.`overloadMap`.
- (SODataV4_boolean) isOverloaded;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_DataMethod`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (SODataV4_boolean) isUnicode;
/// @brief The local name of this method within its owning `SODataV4_EntityContainer`, e.g. "MyAction".
///
///
- (nonnull NSString*) localName;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) maxLength;
/// @brief Metrics for runtime use of this data method.
///
///
- (nonnull SODataV4_DataMethodMetrics*) metrics;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) minLength;
/// @brief Synonym for `SODataV4_DataMethod`.`qualifiedName`.
///
///
- (nonnull NSString*) name;
/// @brief Map of overloads of this function.
///
/// If this map contains only one entry, the method is not overloaded.
- (nonnull SODataV4_DataMethodMap*) overloadMap;
/// @brief Formal parameters for this method.
///
///
/// @see `SODataV4_DataMethodCall`.`parameters`.
- (nonnull SODataV4_ParameterList*) parameters;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (SODataV4_int) precision;
/// @brief The name of this method qualified by its owning `SODataV4_EntityContainer` name, e.g. "MyContainer.MyAction".
///
/// The Entity container prefix is omitted for the "default" entity container in the outermost schema.
- (nonnull NSString*) qualifiedName;
/// @brief The name of this method as it should be referenced in resource paths.
///
///
- (nonnull NSString*) resourcePath;
/// @brief Return type for this method.
///
///
- (nonnull SODataV4_DataType*) returnType;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (SODataV4_int) scale;
/// @brief The bound name of this method after its binding parameter's type, e.g. "MySchema.MyEntityType.MyAction".
///
/// If `SODataV4_DataMethod`.`isBound` is `false`, then equal to `SODataV4_DataMethod`.`qualifiedName`.
- (void) setBoundName :(nonnull NSString*)value;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_DataMethod`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief Entity set bound to this method, or `nil` if the method is not bound to an entity set.
///
///
- (void) setEntitySet :(nullable SODataV4_EntitySet*)value;
/// @brief HTTP Method (e.g. "GET", "POST") for this data method.
///
///
- (void) setHttpMethod :(nullable NSString*)value;
/// @brief `true` if this method is an action, which is permitted to change entity state.
///
///
- (void) setIsAction :(SODataV4_boolean)value;
/// @brief Is this method bound to a value when it is applied?
///
///
- (void) setIsBound :(SODataV4_boolean)value;
/// @brief Is this method composable with another method?
///
///
- (void) setIsComposable :(SODataV4_boolean)value;
/// @brief `true` if this method was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief `true` if this method is a function, which is not permitted to change entity state.
///
///
- (void) setIsFunction :(SODataV4_boolean)value;
/// @brief Is this an ActionImport/FunctionImport (as opposed to an Action/Function)?
///
///
- (void) setIsImported :(SODataV4_boolean)value;
/// @brief `true` if this item is nullable.
///
///
- (void) setIsNullable :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_DataMethod`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (void) setIsUnicode :(SODataV4_boolean)value;
/// @brief The local name of this method within its owning `SODataV4_EntityContainer`, e.g. "MyAction".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMaxLength :(SODataV4_int)value;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMinLength :(SODataV4_int)value;
/// @brief Formal parameters for this method.
///
///
/// @see `SODataV4_DataMethodCall`.`parameters`.
- (void) setParameters :(nonnull SODataV4_ParameterList*)value;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (void) setPrecision :(SODataV4_int)value;
/// @brief The name of this method qualified by its owning `SODataV4_EntityContainer` name, e.g. "MyContainer.MyAction".
///
/// The Entity container prefix is omitted for the "default" entity container in the outermost schema.
- (void) setQualifiedName :(nonnull NSString*)value;
/// @brief The name of this method as it should be referenced in resource paths.
///
///
- (void) setResourcePath :(nonnull NSString*)value;
/// @brief Return type for this method.
///
///
- (void) setReturnType :(nonnull SODataV4_DataType*)value;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (void) setScale :(SODataV4_int)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (void) setSrid :(SODataV4_int)value;
/// @brief The name of this method qualified by its owning `SODataV4_DataSchema` and `SODataV4_EntityContainer` names, e.g. "MySchema.MyContainer/MyAction".
///
///
- (void) setTargetPath :(nonnull NSString*)value;
/// @brief Qualified name of the associated unbound method.
///
/// For OData V4+ ActionImport, this is the name of the corresponding Action.
/// For OData V4+ FunctionImport, this is the name of the corresponding Function.
/// Otherwise `nil`.
- (void) setUnboundMethod :(nullable NSString*)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (SODataV4_int) srid;
/// @brief The name of this method qualified by its owning `SODataV4_DataSchema` and `SODataV4_EntityContainer` names, e.g. "MySchema.MyContainer/MyAction".
///
///
- (nonnull NSString*) targetPath;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Parameter/return type signature for this method.
///
///
- (nonnull NSString*) typeSignature;
/// @brief Qualified name of the associated unbound method.
///
/// For OData V4+ ActionImport, this is the name of the corresponding Action.
/// For OData V4+ FunctionImport, this is the name of the corresponding Function.
/// Otherwise `nil`.
- (nullable NSString*) unboundMethod;
/// @brief Obsolete. Use `SODataV4_DataMethod`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_DataMethod`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief The bound name of this method after its binding parameter's type, e.g. "MySchema.MyEntityType.MyAction".
///
/// If `SODataV4_DataMethod`.`isBound` is `false`, then equal to `SODataV4_DataMethod`.`qualifiedName`.
@property (nonatomic, readwrite, strong, nonnull) NSString* boundName;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_DataMethod`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief Entity set bound to this method, or `nil` if the method is not bound to an entity set.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntitySet* entitySet;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_DataMethod`.`minLength`, `SODataV4_DataMethod`.`maxLength`.
@property (nonatomic, readonly) SODataV4_boolean fixedLength;
/// @brief HTTP Method (e.g. "GET", "POST") for this data method.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* httpMethod;
/// @brief Synonym for `SODataV4_DataMethod`.`resourcePath`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* importedName;
/// @brief `true` if this method is an action, which is permitted to change entity state.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isAction;
/// @brief Is this method bound to a value when it is applied?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isBound;
/// @brief Is this method composable with another method?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isComposable;
/// @brief `true` if this method was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief `true` if this method is a function, which is not permitted to change entity state.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isFunction;
/// @brief Is this an ActionImport/FunctionImport (as opposed to an Action/Function)?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isImported;
/// @brief `true` if this item is nullable.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isNullable;
/// @brief Is this method overloaded?
///
///
/// @see `SODataV4_DataMethod`.`overloadMap`.
@property (nonatomic, readonly) SODataV4_boolean isOverloaded;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_DataMethod`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
@property (nonatomic, readwrite) SODataV4_boolean isUnicode;
/// @brief The local name of this method within its owning `SODataV4_EntityContainer`, e.g. "MyAction".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int maxLength;
/// @brief Metrics for runtime use of this data method.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataMethodMetrics* metrics;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int minLength;
/// @brief Synonym for `SODataV4_DataMethod`.`qualifiedName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief Map of overloads of this function.
///
/// If this map contains only one entry, the method is not overloaded.
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataMethodMap* overloadMap;
/// @brief Formal parameters for this method.
///
///
/// @see `SODataV4_DataMethodCall`.`parameters`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ParameterList* parameters;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
@property (nonatomic, readwrite) SODataV4_int precision;
/// @brief The name of this method qualified by its owning `SODataV4_EntityContainer` name, e.g. "MyContainer.MyAction".
///
/// The Entity container prefix is omitted for the "default" entity container in the outermost schema.
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief The name of this method as it should be referenced in resource paths.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* resourcePath;
/// @brief Return type for this method.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* returnType;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
@property (nonatomic, readwrite) SODataV4_int scale;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
@property (nonatomic, readwrite) SODataV4_int srid;
/// @brief The name of this method qualified by its owning `SODataV4_DataSchema` and `SODataV4_EntityContainer` names, e.g. "MySchema.MyContainer/MyAction".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* targetPath;
/// @brief Parameter/return type signature for this method.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* typeSignature;
/// @brief Qualified name of the associated unbound method.
///
/// For OData V4+ ActionImport, this is the name of the corresponding Action.
/// For OData V4+ FunctionImport, this is the name of the corresponding Function.
/// Otherwise `nil`.
@property (nonatomic, readwrite, strong, nullable) NSString* unboundMethod;
@end
#endif

#ifndef imported_SODataV4__DataMethodCall_public
#define imported_SODataV4__DataMethodCall_public
/// @brief Encapsulates the application of an [OData](http://odata.org) method (function or action) to a list of parameters.
///
/// This is used to represent calls to functions and actionn defined within an entity model, as opposed to `SODataV4_QueryFunction` which is used to represent calls to builtin functions.
@interface SODataV4_DataMethodCall : SODataV4_ObjectBase
{
    @private SODataV4_DataMethod* _Nonnull method_;
    @private SODataV4_ParameterList* _Nonnull parameters_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMethodCall*) new;
/// @internal
///
- (void) _init;
/// @return A new function application.
/// @param method Value for `SODataV4_DataMethodCall`.`method`.
/// @param parameters Value for `SODataV4_DataMethodCall`.`parameters`.
+ (nonnull SODataV4_DataMethodCall*) apply :(nonnull SODataV4_DataMethod*)method :(nonnull SODataV4_ParameterList*)parameters;
/// @brief Metadata for the function or action.
///
///
- (nonnull SODataV4_DataMethod*) method;
/// @brief Actual parameters for ths method application.
///
///
- (nonnull SODataV4_ParameterList*) parameters;
/// @brief Metadata for the function or action.
///
///
- (void) setMethod :(nonnull SODataV4_DataMethod*)value;
/// @brief Actual parameters for ths method application.
///
///
- (void) setParameters :(nonnull SODataV4_ParameterList*)value;
/// @brief Metadata for the function or action.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMethod* method;
/// @brief Actual parameters for ths method application.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ParameterList* parameters;
@end
#endif

#ifdef import_SODataV4__DataMethodCall_private
#ifndef imported_SODataV4__DataMethodCall_private
#define imported_SODataV4__DataMethodCall_private
@interface SODataV4_DataMethodCall (private)
+ (nonnull SODataV4_DataMethodCall*) _new1 :(nonnull SODataV4_DataMethod*)p1 :(nonnull SODataV4_ParameterList*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__DataMethodMap_Entry_public
#define imported_SODataV4__DataMethodMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_DataMethodMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_DataMethod* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMethodMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_DataMethod*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_DataMethod*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMethod* value;
@end
#endif

#ifndef imported_SODataV4__DataMethodMetrics_public
#define imported_SODataV4__DataMethodMetrics_public
/// @internal
///
@interface SODataV4_DataMethodMetrics : SODataV4_ObjectBase
{
    @private SODataV4_DataMetric* _Nonnull onlineExecuteMethodTime_;
    @private SODataV4_DataMetric* _Nonnull onlineMethodResultBytes_;
    @private SODataV4_DataMetric* _Nonnull onlineMethodResultBytes_gzip_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMethodMetrics*) new;
/// @internal
///
- (void) _init;
/// @brief Metric for time spent executing queries against the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineExecuteMethodTime;
/// @brief Metric for byte count fetching query results from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineMethodResultBytes;
/// @brief Metric for gzip count fetching query results from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineMethodResultBytes_gzip;
/// @brief Metric for time spent executing queries against the backend system.
///
///
- (void) setOnlineExecuteMethodTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for byte count fetching query results from the backend system.
///
///
- (void) setOnlineMethodResultBytes :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for gzip count fetching query results from the backend system.
///
///
- (void) setOnlineMethodResultBytes_gzip :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent executing queries against the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineExecuteMethodTime;
/// @brief Metric for byte count fetching query results from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineMethodResultBytes;
/// @brief Metric for gzip count fetching query results from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineMethodResultBytes_gzip;
@end
#endif

#ifndef imported_SODataV4__DataMetric_public
#define imported_SODataV4__DataMetric_public
/// @internal
///
@interface SODataV4_DataMetric : SODataV4_ObjectBase
{
    @private NSString* _Nonnull _component_;
    @private NSString* _Nonnull _metric_;
    @private NSString* _Nonnull _unit_;
    @private SODataV4_long _count_;
    @private SODataV4_long _sum_;
    @private SODataV4_long _minimum_;
    @private SODataV4_long _maximum_;
    @private SODataV4_int id_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMetric*) new;
/// @internal
///
- (void) _init;
/// @brief Add an observed value for an occurrence of the measured events for this metric.
///
///
/// @param value Observed value (count or time).
- (void) add :(SODataV4_long)value;
/// @brief The component which owns this metric.
///
///
- (nonnull NSString*) component;
/// @brief Reset all metrics as if no measured events have occurred (after copying the previous values).
///
///
/// @return The previous values.
+ (nonnull SODataV4_DataMetricList*) copyAndResetAll;
/// @brief The number of occurrences of the measured event.
///
///
- (SODataV4_long) count;
/// @return The 'createDatabaseTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) createDatabaseTime :(nonnull NSString*)component;
/// @return The 'createEntityTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) createEntityTime :(nonnull NSString*)component;
/// @return The 'createIndexTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) createIndexTime :(nonnull NSString*)component;
/// @return The 'createLinkTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) createLinkTime :(nonnull NSString*)component;
/// @return The 'createMediaTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) createMediaTime :(nonnull NSString*)component;
/// @return The 'createTableTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) createTableTime :(nonnull NSString*)component;
/// @return The 'deleteDatabaseTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deleteDatabaseTime :(nonnull NSString*)component;
/// @return The 'deleteEntityTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deleteEntityTime :(nonnull NSString*)component;
/// @return The 'deleteLinkTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deleteLinkTime :(nonnull NSString*)component;
/// @return The 'deleteStreamTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deleteStreamTime :(nonnull NSString*)component;
/// @return The 'deltaDownloadBytes' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deltaDownloadBytes :(nonnull NSString*)component;
/// @return The 'deltaDownloadBytes_gzip' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deltaDownloadBytes_gzip :(nonnull NSString*)component;
/// @return The 'deltaDownloadRows' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deltaDownloadRows :(nonnull NSString*)component;
/// @return The 'executeQueryTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) deltaDownloadTime :(nonnull NSString*)component;
/// @return The 'downloadMediaTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) downloadMediaTime :(nonnull NSString*)component;
/// @return The 'downloadPhaseTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) downloadPhaseTime :(nonnull NSString*)component;
/// @return The 'downloadStreamTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) downloadStreamTime :(nonnull NSString*)component;
/// @return The 'executeMethodTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) executeMethodTime :(nonnull NSString*)component;
/// @return The 'executeQueryTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) executeQueryTime :(nonnull NSString*)component;
/// @return The 'fetchMetadataSize' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) fetchMetadataSize :(nonnull NSString*)component;
/// @return The 'fetchMetadataSize_gzip' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) fetchMetadataSize_gzip :(nonnull NSString*)component;
/// @return The 'fetchMetadataTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) fetchMetadataTime :(nonnull NSString*)component;
/// @return The 'followedNextLink' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) followedNextLink :(nonnull NSString*)component;
/// @brief Construct a new metric or locate an existing metric.
///
///
/// @return Data metric (new or existing).
/// @param component Value for `SODataV4_DataMetric`.`component`.
/// @param metric Value for `SODataV4_DataMetric`.`metric`.
/// @param unit Value for `SODataV4_DataMetric`.`unit`.
+ (nonnull SODataV4_DataMetric*) getInstance :(nonnull NSString*)component :(nonnull NSString*)metric :(nonnull NSString*)unit;
/// @brief A process-uniquie ID for this metric.
///
///
- (SODataV4_int) id_;
/// @return The 'initialDownloadBytes' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) initialDownloadBytes :(nonnull NSString*)component;
/// @return The 'initialDownloadBytes_gzip' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) initialDownloadBytes_gzip :(nonnull NSString*)component;
/// @return The 'initialDownloadRows' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) initialDownloadRows :(nonnull NSString*)component;
/// @return The 'initialDownloadTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) initialDownloadTime :(nonnull NSString*)component;
/// @return The 'loadMetadataTime' metric for the specified component, which includes fetch time and parse time.
/// @param component Metric owner.
/// @see `SODataV4_DataMetric`.`fetchMetadataTime`, `SODataV4_DataMetric`.`parseMetadataTime`.
+ (nonnull SODataV4_DataMetric*) loadMetadataTime :(nonnull NSString*)component;
/// @brief Log all metrics in CSV format to the `SODataV4_DebugConsole`.
///
///
+ (void) logAll;
/// @brief The maximum observed value for occurrences of the measured event.
///
///
- (SODataV4_long) maximum;
/// @return The 'methodResultBytes' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) methodResultBytes :(nonnull NSString*)component;
/// @return The 'methodResultBytes_gzip' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) methodResultBytes_gzip :(nonnull NSString*)component;
/// @brief The name of this metric (should be unique for all metrics in the same `SODataV4_DataMetric`.`component`).
///
///
- (nonnull NSString*) metric;
/// @brief The minimum observed value for occurrences of the measured event.
///
///
- (SODataV4_long) minimum;
/// @return The 'parseMetadataTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) parseMetadataTime :(nonnull NSString*)component;
/// @return The 'pingServerTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) pingServerTime :(nonnull NSString*)component;
/// @return The 'queryResultBytes' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) queryResultBytes :(nonnull NSString*)component;
/// @return The 'queryResultBytes_gzip' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) queryResultBytes_gzip :(nonnull NSString*)component;
/// @return The 'queryResultRows' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) queryResultRows :(nonnull NSString*)component;
/// @brief Reset this metric as if no measured events have occurred.
///
///
- (void) reset;
/// @brief Reset all metrics as if no measured events have occurred.
///
///
+ (void) resetAll;
/// @return The 'selectEntityTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) selectEntityTime :(nonnull NSString*)component;
/// @brief The sum of observed values for occurrences of the measured event.
///
///
- (SODataV4_long) sum;
/// @brief The measurement unit for this metric.
///
///
- (nonnull NSString*) unit;
/// @return The 'updateEntityTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) updateEntityTime :(nonnull NSString*)component;
/// @return The 'updateLinkTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) updateLinkTime :(nonnull NSString*)component;
/// @return The 'uploadMediaTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) uploadMediaTime :(nonnull NSString*)component;
/// @return The 'uploadStreamTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) uploadStreamTime :(nonnull NSString*)component;
/// @return The 'uploadTime' metric for the specified component.
/// @param component Metric owner.
+ (nonnull SODataV4_DataMetric*) uploadTime :(nonnull NSString*)component;
/// @brief Write this metric in CSV format to the specified `buffer`.
///
///
/// @param buffer Buffer for metrics to be appended to.
- (void) write :(nonnull SODataV4_CharBuffer*)buffer;
/// @brief Print all metrics in CSV format to the specified `buffer`.
///
///
/// @param buffer Output buffer.
+ (void) writeAll :(nonnull SODataV4_CharBuffer*)buffer;
/// @brief The component which owns this metric.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* component;
/// @brief The number of occurrences of the measured event.
///
///
@property (nonatomic, readonly) SODataV4_long count;
/// @brief A process-uniquie ID for this metric.
///
///
@property (nonatomic, readonly) SODataV4_int id_;
/// @brief The maximum observed value for occurrences of the measured event.
///
///
@property (nonatomic, readonly) SODataV4_long maximum;
/// @brief The name of this metric (should be unique for all metrics in the same `SODataV4_DataMetric`.`component`).
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* metric;
/// @brief The minimum observed value for occurrences of the measured event.
///
///
@property (nonatomic, readonly) SODataV4_long minimum;
/// @brief The sum of observed values for occurrences of the measured event.
///
///
@property (nonatomic, readonly) SODataV4_long sum;
/// @brief The measurement unit for this metric.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* unit;
@end
#endif

#ifdef import_SODataV4__DataMetric_private
#ifndef imported_SODataV4__DataMetric_private
#define imported_SODataV4__DataMetric_private
@interface SODataV4_DataMetric (private)
+ (nonnull SODataV4_DataMetric*) _new1 :(nonnull NSString*)p1 :(nonnull NSString*)p2 :(nonnull NSString*)p3;
@end
#endif
#endif

#ifdef import_SODataV4__DataMetric_internal
#ifndef imported_SODataV4__DataMetric_internal
#define imported_SODataV4__DataMetric_internal
@interface SODataV4_DataMetric (internal)
- (nonnull NSString*) _component;
- (SODataV4_long) _count;
- (SODataV4_long) _maximum;
- (nonnull NSString*) _metric;
- (SODataV4_long) _minimum;
- (SODataV4_long) _sum;
- (nonnull NSString*) _unit;
+ (nonnull SODataV4_DataMetric*) byteInstance :(nonnull NSString*)component :(nonnull NSString*)metric;
- (nonnull SODataV4_DataMetric*) copy;
+ (nonnull SODataV4_DataMetric*) getMetric :(nonnull NSString*)component :(nonnull NSString*)metric :(nonnull NSString*)unit;
+ (nonnull SODataV4_DataMetric*) linkInstance :(nonnull NSString*)component :(nonnull NSString*)metric;
+ (nonnull SODataV4_DataMetric*) rowInstance :(nonnull NSString*)component :(nonnull NSString*)metric;
- (void) set_component :(nonnull NSString*)value;
- (void) set_count :(SODataV4_long)value;
- (void) set_maximum :(SODataV4_long)value;
- (void) set_metric :(nonnull NSString*)value;
- (void) set_minimum :(SODataV4_long)value;
- (void) set_sum :(SODataV4_long)value;
- (void) set_unit :(nonnull NSString*)value;
+ (nonnull SODataV4_DataMetricMap*) statsMap;
+ (nonnull SODataV4_DataMetric*) timeInstance :(nonnull NSString*)component :(nonnull NSString*)metric;
@property (nonatomic, readwrite, strong, nonnull) NSString* _component;
@property (nonatomic, readwrite) SODataV4_long _count;
@property (nonatomic, readwrite) SODataV4_long _maximum;
@property (nonatomic, readwrite, strong, nonnull) NSString* _metric;
@property (nonatomic, readwrite) SODataV4_long _minimum;
@property (nonatomic, readwrite) SODataV4_long _sum;
@property (nonatomic, readwrite, strong, nonnull) NSString* _unit;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMetricMap* statsMap;
@end
#endif
#endif

#ifndef imported_SODataV4__DataMetricMap_Entry_public
#define imported_SODataV4__DataMetricMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_DataMetricMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_DataMetric* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMetricMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_DataMetric*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_DataMetric*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* value;
@end
#endif

#ifndef imported_SODataV4__DataQuery_public
#define imported_SODataV4__DataQuery_public
/// @brief Encapsulates an [OData](http://odata.org) query request.
///
/// A query can be defined by setting query properties, or by calling query functions which provide
/// a [fluent interface](http://en.wikipedia.org/wiki/Fluent_interface).
/// Execution of a query may result in some query properties being changed (e.g. the addition of `SODataV4_DataQuery`.`expandItems` or `SODataV4_DataQuery`.`selectItems` that are required for correct execution).
/// Thus for thread safety, a query should be used only by a single thread at a time. Preferably a new query should be created before each query execution.
///
/// @see `DataService.executeQuery`.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) dataQueryExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] filter:[[Customer.address toLower] contains:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"king"]))]] orderBy:Customer.companyName];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) dataQueryExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_Property* addressProperty = [customerEntityType getProperty:@"Address"];
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] filter:[[addressProperty toLower] contains:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"king"]))]] orderBy:companyNameProperty];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     [self showCustomers:customers];
/// }
/// ````
@interface SODataV4_DataQuery : SODataV4_ObjectBase
{
    @private NSString* _Nullable requestPath_;
    @private NSString* _Nullable queryString_;
    @private SODataV4_nullable_int dataFormat_;
    @private SODataV4_EntityKey* _Nullable entityKey_;
    @private SODataV4_EntitySet* _Nullable entitySet_;
    @private SODataV4_EntityType* _Nullable entityType_;
    @private SODataV4_StructureType* _Nullable derivedType_;
    @private SODataV4_DataMethodCall* _Nullable methodCall_;
    @private SODataV4_DataPath* _Nullable propertyPath_;
    @private SODataV4_boolean expectSingle_;
    @private SODataV4_SelectItemList* _Nullable selectItems_;
    @private SODataV4_boolean allSelected_;
    @private SODataV4_boolean keySelected_;
    @private SODataV4_ExpandItemList* _Nullable expandItems_;
    @private SODataV4_TransformValueList* _Nullable transformValues_;
    @private SODataV4_GroupTransform* _Nullable groupTransform_;
    @private NSString* _Nullable searchText_;
    @private SODataV4_QueryFilter* _Nullable queryFilter_;
    @private SODataV4_SortItemList* _Nullable sortItems_;
    @private SODataV4_boolean countOnly_;
    @private SODataV4_boolean countInline_;
    @private SODataV4_boolean streamResponse_;
    @private SODataV4_boolean deltaResponse_;
    @private SODataV4_GlobalDateTime* _Nullable deltaTime_;
    @private NSString* _Nullable deltaToken_;
    @private SODataV4_boolean trackChanges_;
    @private NSString* _Nullable skipToken_;
    @private SODataV4_nullable_int skipCount_;
    @private SODataV4_nullable_int pageSize_;
    @private SODataV4_nullable_int topCount_;
    @private SODataV4_DataValueMap* _Nullable aliasValues_;
    @private SODataV4_StringMap* _Nullable customOptions_;
    @private NSObject* _Nullable internalData_;
    @private SODataV4_int systemFlags_;
    @private NSObject* _Nullable requestContext_;
    @private SODataV4_boolean hasAdjustedItems_;
    @private SODataV4_SelectItemList* _Nullable unadjustedSelectItems_;
    @private SODataV4_ExpandItemList* _Nullable unadjustedExpandItems_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataQuery*) new;
/// @internal
///
- (void) _init;
/// @brief Adds aggregate transformation items (to `SODataV4_DataQuery`.`transformValues`) for transforming the result of a query sent to an entity set.
///
/// This method is only for adding aggregate transformation items (in contrast to 'transform' method) for readibility purposes.
///
/// @return This query.
/// @param items The items to be added.
/// 
/// #### Example for aggregations
/// 
/// ```` oc
/// - (void) aggregationExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* employeeEntitySet = [service getEntitySet:@"Employees"];
///     SODataV4_EntityType* employeeEntityType = employeeEntitySet.entityType;
///     SODataV4_Property* ordersProperty = [employeeEntityType getProperty:@"Orders"];
///     SODataV4_Property* orderDetails = [ordersProperty.entityType getProperty:@"Order_Details"];
///     SODataV4_Property* ordersQuantity = [orderDetails.entityType getProperty:@"Quantity"];
///     SODataV4_DataQuery* query = [SODataV4_DataQuery new];
///     SODataV4_AggregateValue* aggregateTransform = [[ordersProperty path:ordersQuantity] sum:@"SumQuantity"];
///     [query aggregate:@[aggregateTransform]];
///     [self testApplyQueryResult:query:@"SumQuantity"];
///     SODataV4_DataQuery* queryCount = [SODataV4_DataQuery new];
///     SODataV4_AggregateValue* countAggregate = [SODataV4_AggregateValue count:@"AllEmployees"];
///     [queryCount aggregate:@[countAggregate]];
///     [self testApplyQueryResult:queryCount:SODataV4_NULL_STRING];
/// }
/// ````
/// 
/// #### Example for aggregations
/// 
/// ```` oc
/// - (void) aggregationExample
/// {
///     SODataV4_DataQuery* query = [SODataV4_DataQuery new];
///     SODataV4_AggregateValue* aggregateTransform = [[[Employee.orders path:Order.orderDetails] path:OrderDetail.quantity] sum:@"SumQuantity"];
///     [query aggregate:@[aggregateTransform]];
///     [self testApplyQueryResult:query:@"SumQuantity"];
///     SODataV4_DataQuery* queryCount = [SODataV4_DataQuery new];
///     SODataV4_AggregateValue* countAggregate = [SODataV4_AggregateValue count:@"AllEmployees"];
///     [queryCount aggregate:@[countAggregate]];
///     [self testApplyQueryResult:queryCount:SODataV4_NULL_STRING];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) aggregate :(nonnull NSArray<SODataV4_AggregateValue*>*)items;
/// @brief Parameter alias values.
///
///
- (nullable SODataV4_DataValueMap*) aliasValues;
/// @brief `true` if all properties are selected (using "*").
///
///
/// @see `SODataV4_DataQuery`.`selectAll`.
- (SODataV4_boolean) allSelected;
/// @brief Bind a value before `SODataV4_DataQuery`.`invoke` of a bound action/function.
///
///
/// @return This query.
/// @param value The value to be bound. Note: currently, only binding to an `SODataV4_EntityValue` is supported.
- (nonnull SODataV4_DataQuery*) bind :(nullable SODataV4_DataValue*)value;
/// @brief Check if this query is properly configured from the client's perspective.
///
/// Note: This does not guarantee that the server will be able to execute it.
///
/// @throw `SODataV4_DataQueryException` if the query is definitely not valid.
- (void) check;
/// @brief Set `SODataV4_DataQuery`.`countOnly` to `true` to request only the number of matching query results.
///
///
/// @return This query.
/// @see `SODataV4_DataQuery`.`inlineCount`, [Requesting the Number of Items in a Collection](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752292).
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) navigationCountExample
/// {
///     NorthwindService* service = self.service;
///     Customer* customer = [service getCustomer:[[[SODataV4_DataQuery new] expand:@[Customer.orders]] top:1]];
///     Order__List* orders = customer.orders;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] load:customer:Customer.orders] count];
///     SODataV4_long count = [[service executeQuery:query] getCount];
///     [SODataV4_Assert isTrue:(count == ((SODataV4_long)orders.length)):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:321:9"];
/// }
/// ````
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) collectionCountExample
/// {
///     NorthwindService* service = self.service;
///     Customer__List* customers = [service getCustomers];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:NorthwindServiceMetadata_EntitySets.customers] count];
///     SODataV4_long count = [[service executeQuery:query] getCount];
///     [SODataV4_Assert isTrue:(count == ((SODataV4_long)customers.length)):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:298:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) collectionCountExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityValueList* customers = [[service executeQuery:[[SODataV4_DataQuery new] from:customersEntitySet]] getEntityList];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:customersEntitySet] count];
///     SODataV4_long count = [[service executeQuery:query] getCount];
///     [SODataV4_Assert isTrue:(count == ((SODataV4_long)customers.length)):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:315:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) navigationCountExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* ordersProperty = [customerEntityType getProperty:@"Orders"];
///     SODataV4_EntityValue* customer = [[[service executeQuery:[[[[SODataV4_DataQuery new] from:customersEntitySet] expand:@[ordersProperty]] top:1]] getEntityList] first];
///     SODataV4_EntityValueList* orders = [ordersProperty getEntityList:customer];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] load:customer:ordersProperty] count];
///     SODataV4_long count = [[service executeQuery:query] getCount];
///     [SODataV4_Assert isTrue:(count == ((SODataV4_long)orders.length)):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:342:9"];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) count;
/// @brief If `true`, the service should return the total number of available results as an inline count in the result list.
///
///
/// @see `SODataV4_DataQuery`.`inlineCount`.
- (SODataV4_boolean) countInline;
/// @brief If `true`, the service should return only the number of available results matching the query.
///
///
/// @see `SODataV4_DataQuery`.`count`.
- (SODataV4_boolean) countOnly;
/// @brief Add a custom option to `SODataV4_DataQuery`.`customOptions`.
///
///
/// @return This query.
/// @param name Option name.
/// @param value Option value.
- (nonnull SODataV4_DataQuery*) custom :(nonnull NSString*)name :(nonnull NSString*)value;
/// @brief Custom query options.
///
///
- (nullable SODataV4_StringMap*) customOptions;
/// @brief The data format for this query's result.
///
///
/// @see `SODataV4_DataFormat`.
- (SODataV4_nullable_int) dataFormat;
/// @brief If `true`, the client should use delta parsing of the response.
///
///
/// @see `SODataV4_DataQuery`.`withChangeTracking`.
- (SODataV4_boolean) deltaResponse;
/// @brief The delta time (`SODataV4_DataQuery`.`deltaToken` as UTC date/time).
///
///
- (nullable SODataV4_GlobalDateTime*) deltaTime;
/// @brief The delta token for use in change tracking.
///
///
- (nullable NSString*) deltaToken;
/// @brief Derived type for limiting query results.
///
///
/// @see `SODataV4_DataQuery`.`withType`, [Addressing Derived Types](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752352).
- (nullable SODataV4_StructureType*) derivedType;
/// @brief The entity key for this query.
///
/// If specified, then `SODataV4_DataQuery`.`entitySet` should also be specified.
///
/// @see `SODataV4_DataQuery`.`withKey`.
- (nullable SODataV4_EntityKey*) entityKey;
/// @brief The entity set expected for the result of this query.
///
/// To execute a query, either this must be non-`nil`, or `SODataV4_DataQuery`.`methodCall` must be non-`nil`.
///
/// @see `SODataV4_DataQuery`.`from`.
- (nullable SODataV4_EntitySet*) entitySet;
/// @brief The entity type expected for the result of this query.
///
/// Can be used for inference of `SODataV4_DataQuery`.`entitySet`, if only one entity set in the data model uses this type.
- (nullable SODataV4_EntityType*) entityType;
/// @brief Add properties (to `SODataV4_DataQuery`.`expandItems`) for expanding from the target entity.
///
///
/// @return This query.
/// @param items The items to be expanded.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) expandExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] filter:[[Customer.customerID equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ALFKI"]))] or:[Customer.customerID equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ANATR"]))]]] expand:@[Customer.orders]] orderBy:Customer.companyName];
///     Customer__List* customers = [service getCustomers:query];
///     SODataV4_int countOrders = 0;
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             Customer* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///             Order__List* orders = customer.orders;
///             // for (let order of orders)
///             {
///                 SODataV4_int order_count = orders.length;
///                 SODataV4_int order_index;
///                 for (order_index = 0; order_index < order_count; order_index++)
///                 {
///                     Order* order = [orders get:order_index];
///                     SODataV4_int orderID = order.orderID;
///                     [Example show:@[@"  Order ",[Example formatInt:orderID]]];
///                     countOrders++;
///                 }
///             }
///         }
///     }
///     [SODataV4_Assert isTrue:(countOrders > 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:528:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) expandExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_Property* ordersProperty = [customerEntityType getProperty:@"Orders"];
///     SODataV4_Property* orderIDProperty = [ordersProperty.itemEntityType getProperty:@"OrderID"];
///     SODataV4_DataQuery* query = [[[[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] expand:@[ordersProperty]] filter:[[customerIDProperty equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ALFKI"]))] or:[customerIDProperty equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ANATR"]))]]] orderBy:companyNameProperty];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     SODataV4_int countOrders = 0;
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             SODataV4_EntityValue* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///             SODataV4_EntityValueList* orders = [ordersProperty getEntityList:customer];
///             // for (let order of orders)
///             {
///                 SODataV4_int order_count = orders.length;
///                 SODataV4_int order_index;
///                 for (order_index = 0; order_index < order_count; order_index++)
///                 {
///                     SODataV4_EntityValue* order = [orders get:order_index];
///                     SODataV4_int orderID = [orderIDProperty getInt:order];
///                     [Example show:@[@"  Order ",[Example formatInt:orderID]]];
///                     countOrders++;
///                 }
///             }
///         }
///     }
///     [SODataV4_Assert isTrue:(countOrders > 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:605:9"];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) expand :(nonnull NSArray<SODataV4_PropertyPath*>*)items;
/// @brief The properties to expand from target entities.
///
///
/// @see `SODataV4_DataQuery`.`expand`.
- (nullable SODataV4_ExpandItemList*) expandItems;
/// @brief Add a property with a nested query to `SODataV4_DataQuery`.`expandItems`.
///
///
/// @return This query.
/// @param item Item to be expanded.
/// @param query Query to control expansion.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) expandWithQueryExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] filter:[[Customer.customerID equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ALFKI"]))] or:[Customer.customerID equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ANATR"]))]]] expandWithQuery:Customer.orders:[[[SODataV4_DataQuery new] select:@[Order.orderID]] expandWithQuery:Order.orderDetails:[[SODataV4_DataQuery new] select:@[OrderDetail.quantity,OrderDetail.unitPrice]]]] orderBy:Customer.companyName];
///     Customer__List* customers = [service getCustomers:query];
///     SODataV4_int countDetails = 0;
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             Customer* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///             Order__List* orders = customer.orders;
///             // for (let order of orders)
///             {
///                 SODataV4_int order_count = orders.length;
///                 SODataV4_int order_index;
///                 for (order_index = 0; order_index < order_count; order_index++)
///                 {
///                     Order* order = [orders get:order_index];
///                     SODataV4_int orderID = order.orderID;
///                     SODataV4_BigDecimal* totalPrice = NorthwindProxyClient.DECIMAL_ZERO;
///                     // for (let orderDetail of order.orderDetails)
///                     {
///                         OrderDetail__List* orderDetail_list = order.orderDetails;
///                         SODataV4_int orderDetail_count = orderDetail_list.length;
///                         SODataV4_int orderDetail_index;
///                         for (orderDetail_index = 0; orderDetail_index < orderDetail_count; orderDetail_index++)
///                         {
///                             OrderDetail* orderDetail = [orderDetail_list get:orderDetail_index];
///                             totalPrice = [totalPrice add:[[SODataV4_DecimalFunction fromShort:orderDetail.quantity] multiply:orderDetail.unitPrice]];
///                             countDetails++;
///                         }
///                     }
///                     [Example show:@[@"Order ",[Example formatInt:orderID],@": total price ",[Example formatDecimal:totalPrice]]];
///                 }
///             }
///         }
///     }
///     [SODataV4_Assert isTrue:(countDetails > 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:561:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) expandWithQueryExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_Property* ordersProperty = [customerEntityType getProperty:@"Orders"];
///     SODataV4_Property* orderIDProperty = [ordersProperty.itemEntityType getProperty:@"OrderID"];
///     SODataV4_Property* orderDetailsProperty = [ordersProperty.itemEntityType getProperty:@"Order_Details"];
///     SODataV4_Property* quantityProperty = [orderDetailsProperty.itemEntityType getProperty:@"Quantity"];
///     SODataV4_Property* unitPriceProperty = [orderDetailsProperty.itemEntityType getProperty:@"UnitPrice"];
///     SODataV4_DataQuery* query = [[[[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] filter:[[customerIDProperty equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ALFKI"]))] or:[customerIDProperty equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"ANATR"]))]]] expandWithQuery:ordersProperty:[[[SODataV4_DataQuery new] select:@[orderIDProperty]] expandWithQuery:orderDetailsProperty:[[SODataV4_DataQuery new] select:@[quantityProperty,unitPriceProperty]]]] orderBy:companyNameProperty];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             SODataV4_EntityValue* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///             SODataV4_EntityValueList* orders = [ordersProperty getEntityList:customer];
///             // for (let order of orders)
///             {
///                 SODataV4_int order_count = orders.length;
///                 SODataV4_int order_index;
///                 for (order_index = 0; order_index < order_count; order_index++)
///                 {
///                     SODataV4_EntityValue* order = [orders get:order_index];
///                     SODataV4_int orderID = [orderIDProperty getInt:order];
///                     SODataV4_BigDecimal* totalPrice = NorthwindClient.DECIMAL_ZERO;
///                     // for (let orderDetail of ...)
///                     {
///                         SODataV4_EntityValueList* orderDetail_list = [orderDetailsProperty getEntityList:order];
///                         SODataV4_int orderDetail_count = orderDetail_list.length;
///                         SODataV4_int orderDetail_index;
///                         for (orderDetail_index = 0; orderDetail_index < orderDetail_count; orderDetail_index++)
///                         {
///                             SODataV4_EntityValue* orderDetail = [orderDetail_list get:orderDetail_index];
///                             SODataV4_short quantity = [quantityProperty getShort:orderDetail];
///                             SODataV4_BigDecimal* unitPrice = [unitPriceProperty getDecimal:orderDetail];
///                             totalPrice = [totalPrice add:[[SODataV4_DecimalFunction fromShort:quantity] multiply:unitPrice]];
///                         }
///                     }
///                     [Example show:@[@"Order ",[Example formatInt:orderID],@": total price ",[Example formatDecimal:totalPrice]]];
///                 }
///             }
///         }
///     }
/// }
/// ````
- (nonnull SODataV4_DataQuery*) expandWithQuery :(nonnull SODataV4_PropertyPath*)item :(nonnull SODataV4_DataQuery*)query;
/// @return The names of all properties expanded by this query.
///
- (nonnull SODataV4_StringSet*) expandedProperties;
/// @return `true` if this query expands `property` from the target entity.
/// @param property Property to check for.
- (SODataV4_boolean) expandsProperty :(nonnull SODataV4_Property*)property;
/// @brief Set to `true` if a single result is expected.
///
/// This may be required if `url` has been explicitly set.
- (SODataV4_boolean) expectSingle;
/// @brief Modify `SODataV4_DataQuery`.`queryFilter` to be and'ed with `test` (or set to `test` if `SODataV4_DataQuery`.`queryFilter` was `nil`).
///
///
/// @return This query.
/// @param test The query filter.
/// @see `SODataV4_QueryFilter`, `SODataV4_QueryFunction`, `SODataV4_QueryOperator`, `SODataV4_QueryValue`.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) queryWithFilterExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] filter:[[Customer.country equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"Germany"]))] and:[Customer.contactName greaterEqual:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"N"]))]]];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
/// }
/// ````
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) filterByDateExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_GlobalDateTime* oneWeekAgo = [[SODataV4_GlobalDateTime now] plusDays:-7];
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[Order.orderDate greaterThan:oneWeekAgo]];
///     Order__List* orders = [service getOrders:query];
///     [self showOrders:orders];
/// }
/// ````
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) filterByEnumExample
/// {
///     TrippinService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[TrippinPerson.gender equal:TrippinServiceMetadata_EnumValues_TrippinPersonGender.female]];
///     TrippinPersonList* people = [service getPeople:query];
///     [self showPeople:people];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) queryWithFilterExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_Property* countryProperty = [customerEntityType getProperty:@"Country"];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] filter:[[countryProperty equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"Germany"]))] and:[contactNameProperty greaterEqual:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"N"]))]]];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     [self showCustomers:customers];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) filterByDateExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* ordersEntitySet = [service getEntitySet:@"Orders"];
///     SODataV4_EntityType* orderEntityType = ordersEntitySet.entityType;
///     SODataV4_Property* orderDateProperty = [orderEntityType getProperty:@"OrderDate"];
///     SODataV4_GlobalDateTime* oneWeekAgo = [[SODataV4_GlobalDateTime now] plusDays:-7];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:ordersEntitySet] filter:[orderDateProperty greaterThan:oneWeekAgo]];
///     SODataV4_EntityValueList* orders = [[service executeQuery:query] getEntityList];
///     [self showOrders:orders];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) filterByEnumExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* peopleEntitySet = [service getEntitySet:@"People"];
///     SODataV4_EntityType* personEntityType = peopleEntitySet.entityType;
///     SODataV4_Property* genderProperty = [personEntityType getProperty:@"Gender"];
///     SODataV4_EnumType* genderEnumType = [service.metadata getEnumType:@"Microsoft.OData.Service.Sample.TrippinInMemory.Models.PersonGender"];
///     SODataV4_EnumValue* female = [genderEnumType getMember:@"Female"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:peopleEntitySet] filter:[genderProperty equal:female]];
///     SODataV4_EntityValueList* people = [[service executeQuery:query] getEntityList];
///     [self showPeople:people];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) filter :(nonnull SODataV4_QueryFilter*)test;
/// @brief Set the `SODataV4_DataQuery`.`entitySet` property to identify this query's target entity set.
///
///
/// @return This query.
/// @param entitySet The target entity set.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) fromExample
/// {
///     NorthwindService* service = self.service;
///     Customer__List* customers = [service getCustomers];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             Customer* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///         }
///     }
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) fromExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] from:customersEntitySet];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             SODataV4_EntityValue* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///         }
///     }
/// }
/// ````
- (nonnull SODataV4_DataQuery*) from :(nonnull SODataV4_EntitySet*)entitySet;
/// @brief Set the `SODataV4_DataQuery`.`entitySet` property to identify this query's target entity set, but only if the `SODataV4_DataQuery`.`entitySet` property wasn't previously set.
///
/// This function is intended for use by generated proxy classes.
///
/// @return This query.
/// @param entitySet The target entity set.
- (nonnull SODataV4_DataQuery*) fromDefault :(nonnull SODataV4_EntitySet*)entitySet;
/// @brief Adds a group transformation item to the DataQuery with the property paths given in the parameter list.
///
/// Note: If this method is called then all the transformation and aggregation items added to the query will be applied to the group transformation in the query.
///
/// @return This query.
/// @param items The property paths to be added to the group transformation.
/// 
/// #### Example for transformations
/// 
/// ```` oc
/// - (void) transformationExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* employeeEntitySet = [service getEntitySet:@"Employees"];
///     SODataV4_EntityType* employeeEntityType = employeeEntitySet.entityType;
///     SODataV4_Property* employeeReportsToProperty = [employeeEntityType getProperty:@"ReportsTo"];
///     SODataV4_Property* employee1Property = [employeeEntityType getProperty:@"Employee1"];
///     SODataV4_Property* ordersProperty = [employeeEntityType getProperty:@"Orders"];
///     SODataV4_Property* ordersQuantity = [ordersProperty.entityType getProperty:@"Quantity"];
///     SODataV4_Property* countryProperty = [employeeEntityType getProperty:@"Country"];
///     SODataV4_DataQuery* queryGroup = [SODataV4_DataQuery new];
///     SODataV4_FilterTransform* filterGroupTransform = [SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:countryProperty:[SODataV4_StringValue of:@"Budapest"]]];
///     SODataV4_GroupTransform* groupTransform = [[SODataV4_GroupTransform groupBy:@[employeeReportsToProperty]] aggregate:@[[[ordersProperty path:ordersQuantity] sum:@"SumQuantity"]]];
///     [queryGroup transform:@[groupTransform]];
///     [self testApplyQueryResult:queryGroup:@"SumQuantity"];
///     SODataV4_DataQuery* groupTransformForQuery = [[[[SODataV4_DataQuery new] groupBy:@[employeeReportsToProperty]] aggregate:@[[[ordersProperty path:ordersQuantity] sum:@"SumQuantity"]]] transform:@[filterGroupTransform]];
///     [self testApplyQueryResult:groupTransformForQuery:@"SumQuantity"];
///     SODataV4_DataQuery* queryTopPercent = [SODataV4_DataQuery new];
///     SODataV4_TopTransform* topPercentTransform = [SODataV4_TopTransform percent:((SODataV4_double)50):employeeReportsToProperty];
///     [queryTopPercent transform:@[topPercentTransform]];
///     [self testApplyQueryResult:queryTopPercent:SODataV4_NULL_STRING];
///     SODataV4_DataQuery* queryExpand = [SODataV4_DataQuery new];
///     SODataV4_ExpandTransform* expandTransform = [SODataV4_ExpandTransform withFilter:ordersProperty:[SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:employeeReportsToProperty:[SODataV4_IntValue of:1000]]]];
///     [queryExpand transform:@[expandTransform]];
///     [self testApplyQueryResult:queryExpand:SODataV4_NULL_STRING];
///     SODataV4_ExpandTransform* expandWithExpandTransform = [SODataV4_ExpandTransform withExpand:employee1Property:expandTransform];
///     SODataV4_DataQuery* queryExpand1 = [SODataV4_DataQuery new];
///     [queryExpand1 transform:@[expandWithExpandTransform]];
///     [self testApplyQueryResult:queryExpand1:SODataV4_NULL_STRING];
/// }
/// ````
/// 
/// #### Example for transformations
/// 
/// ```` oc
/// - (void) transformationExample
/// {
///     SODataV4_DataQuery* queryGroup = [SODataV4_DataQuery new];
///     SODataV4_GroupTransform* groupTransform = [[SODataV4_GroupTransform groupBy:@[Employee.reportsTo]] aggregate:@[[[[Employee.orders path:Order.orderDetails] path:OrderDetail.quantity] sum:@"SumQuantity"]]];
///     [queryGroup transform:@[groupTransform]];
///     [self testApplyQueryResult:queryGroup:@"SumQuantity"];
///     SODataV4_FilterTransform* filterGroupTransform = [SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:Employee.country:[SODataV4_StringValue of:@"Budapest"]]];
///     SODataV4_DataQuery* groupTransformForQuery = [[[[SODataV4_DataQuery new] groupBy:@[Employee.reportsTo]] aggregate:@[[[[Employee.orders path:Order.orderDetails] path:OrderDetail.quantity] sum:@"SumQuantity"]]] transform:@[filterGroupTransform]];
///     [self testApplyQueryResult:groupTransformForQuery:@"SumQuantity"];
///     SODataV4_DataQuery* queryTopPercent = [SODataV4_DataQuery new];
///     SODataV4_TopTransform* topPercentTransform = [SODataV4_TopTransform percent:((SODataV4_double)50):Employee.reportsTo];
///     [queryTopPercent transform:@[topPercentTransform]];
///     [self testApplyQueryResult:queryTopPercent:SODataV4_NULL_STRING];
///     SODataV4_DataQuery* queryExpand = [SODataV4_DataQuery new];
///     SODataV4_ExpandTransform* expandTransform = [SODataV4_ExpandTransform withFilter:Employee.orders:[SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:Employee.reportsTo:[SODataV4_IntValue of:1000]]]];
///     [queryExpand transform:@[expandTransform]];
///     [self testApplyQueryResult:queryExpand:SODataV4_NULL_STRING];
///     SODataV4_ExpandTransform* expandWithExpandTransform = [SODataV4_ExpandTransform withExpand:Employee.employee1:expandTransform];
///     SODataV4_DataQuery* queryExpand1 = [SODataV4_DataQuery new];
///     [queryExpand1 transform:@[expandWithExpandTransform]];
///     [self testApplyQueryResult:queryExpand1:SODataV4_NULL_STRING];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) groupBy :(nonnull NSArray<SODataV4_PropertyPath*>*)items;
/// @brief A group transformation item set through groupBy method
///
///
- (nullable SODataV4_GroupTransform*) groupTransform;
/// @brief Set `SODataV4_DataQuery`.`countInline` to `true` to request an inline count in the server's response.
///
///
/// @return This query.
/// @see `SODataV4_DataQuery`.`count`, [System Query Option $count](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752288).
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) inlineCountExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] from:NorthwindServiceMetadata_EntitySets.customers] skip:20] top:10] inlineCount];
///     SODataV4_QueryResult* result = [service executeQuery:query];
///     Customer__List* customers = [Customer list:[result getEntityList]];
///     SODataV4_long count = [result getInlineCount];
///     [SODataV4_Assert isTrue:(customers.length == 10):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:309:9"];
///     [SODataV4_Assert isTrue:(count > SODataV4_LONG(10)):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:310:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) inlineCountExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] from:customersEntitySet] skip:20] top:10] inlineCount];
///     SODataV4_QueryResult* result = [service executeQuery:query];
///     SODataV4_EntityValueList* customers = [result getEntityList];
///     SODataV4_long count = [result getInlineCount];
///     [SODataV4_Assert isTrue:(customers.length == 10):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:327:9"];
///     [SODataV4_Assert isTrue:(count > SODataV4_LONG(10)):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:328:9"];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) inlineCount;
/// @internal
///
- (nullable NSObject*) internalData;
/// @internal
///
- (nonnull SODataV4_DataQuery*) invoke :(nonnull SODataV4_DataMethod*)method;
/// @brief Set `SODataV4_DataQuery`.`methodCall` to associate this query with an action/function invocation.
///
///
/// @return This query.
/// @param method Data method to be called (action or function).
/// @param parameters (optional) Method parameters.
/// @see `SODataV4_DataQuery`.`bind`, for setting the binding parameter for a bound action/function.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) invokeExample
/// {
///     TrippinService* service = self.service;
///     TrippinPerson* person = [service getPersonWithMostFriends];
///     [self showPerson:person];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) invokeExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_DataMethod* functionImport = [service getDataMethod:@"GetPersonWithMostFriends"];
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] invoke:functionImport];
///     SODataV4_EntityValue* person = [[service executeQuery:query] getRequiredEntity];
///     [self showPerson:person];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) invoke :(nonnull SODataV4_DataMethod*)method :(nonnull SODataV4_ParameterList*)parameters;
/// @brief `true` if all key properties should be selected.
///
///
/// @see `SODataV4_DataQuery`.`selectKey`.
- (SODataV4_boolean) keySelected;
/// @internal
///
- (nonnull SODataV4_DataQuery*) load :(nonnull SODataV4_EntityValue*)entity;
/// @brief Set `SODataV4_DataQuery`.`entitySet` and `SODataV4_DataQuery`.`entityKey` to configure this query to load an existing entity.
///
/// Equivalent to calling `from(entity.entitySet).withKey(entity.entityKey)`.
///
/// @return This query.
/// @param entity The entity to be loaded.
/// @param path Optionally specify `SODataV4_DataQuery`.`propertyPath`.
- (nonnull SODataV4_DataQuery*) load :(nonnull SODataV4_EntityValue*)entity :(nullable SODataV4_PropertyPath*)path;
/// @brief The method call for this query.
///
/// To execute a query, either this must be non-`nil`, or `SODataV4_DataQuery`.`entitySet` must be non-`nil`.
///
/// @see `SODataV4_DataQuery`.`invoke`.
- (nullable SODataV4_DataMethodCall*) methodCall;
/// @brief Construct a new DataQuery if the `query` parameter is `nil`.
///
///
/// @return The `query` parameter, if non-`nil`. Otherwise a new DataQuery.
/// @param query Query to be checked.
+ (nonnull SODataV4_DataQuery*) newIfNull :(nullable SODataV4_DataQuery*)query;
/// @internal
///
- (nonnull SODataV4_DataQuery*) orderBy :(nonnull SODataV4_QueryValue*)value;
/// @brief Add to `SODataV4_DataQuery`.`sortItems` a value for result ordering.
///
///
/// @return This query.
/// @param value Value for ordering.
/// @param order (optional) The sort order (defaults to ascending).
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) orderByExample
/// {
///     MediaService* service = self.service;
///     SODataV4_GeographyPoint* avila = [SODataV4_GeographyPoint withLatitudeLongitude:40.6567:-4.6812];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] top:3] orderBy:[Artist.placeOfBirth geoDistance:avila]];
///     ArtistList* artists = [service getArtists:query];
///     [self showArtists:artists];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) orderByExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* artistsEntitySet = [service getEntitySet:@"Artists"];
///     SODataV4_EntityType* artistEntityType = artistsEntitySet.entityType;
///     SODataV4_Property* placeOfBirthProperty = [artistEntityType getProperty:@"placeOfBirth"];
///     SODataV4_GeographyPoint* avila = [SODataV4_GeographyPoint withLatitudeLongitude:40.6567:-4.6812];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] top:3] from:artistsEntitySet] orderBy:[placeOfBirthProperty geoDistance:avila]];
///     SODataV4_EntityValueList* artists = [[service executeQuery:query] getEntityList];
///     [self showArtists:artists];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) orderBy :(nonnull SODataV4_QueryValue*)value :(nonnull SODataV4_SortOrder*)order;
/// @brief Set `SODataV4_DataQuery`.`pageSize` to specify the page-size for server-driven paging of results.
///
/// Note: the server is not required to respect this setting. But if this setting is used, the client should expect to have to follow next-links.
///
/// @return This query.
/// @param size Client-requested page size for use by server-driven paging.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) queryWithPageExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_long expected = [[service executeQuery:[[[SODataV4_DataQuery new] from:NorthwindServiceMetadata_EntitySets.customers] count]] getCount];
///     SODataV4_int found = 0;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:NorthwindServiceMetadata_EntitySets.customers] page:5];
///     do
///     {
///         SODataV4_QueryResult* result = [service executeQuery:query];
///         Customer__List* customers = [Customer list:[result getEntityList]];
///         [self showCustomers:customers];
///         found = found + customers.length;
///         query = [result getNextQuery];
///     }
///     while (query.url != nil);
///     [SODataV4_Assert isTrue:(((SODataV4_long)found) == expected):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:382:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) queryWithPageExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:customersEntitySet] page:5];
///     do
///     {
///         SODataV4_QueryResult* result = [service executeQuery:query];
///         SODataV4_EntityValueList* customers = [result getEntityList];
///         [self showCustomers:customers];
///         query = [result getNextQuery];
///     }
///     while (query.url != nil);
/// }
/// ````
- (nonnull SODataV4_DataQuery*) page :(SODataV4_int)size;
/// @brief The maximum number of results per page.
///
/// Note that this is just a hint to the service. The service is permitted to ignore the client-requested page size.
/// Use `SODataV4_DataQuery`.`skipCount` and `SODataV4_DataQuery`.`topCount` for predictable paging.
- (SODataV4_nullable_int) pageSize;
/// @brief Set `SODataV4_DataQuery`.`propertyPath` to identify this query's target path.
///
///
/// @return This query.
/// @param target The target path.
- (nonnull SODataV4_DataQuery*) path :(nonnull SODataV4_DataPath*)target;
/// @brief Set `SODataV4_DataQuery`.`propertyPath` to identify this query's target property.
///
///
/// @return This query.
/// @param target The target property.
- (nonnull SODataV4_DataQuery*) property :(nonnull SODataV4_Property*)target;
/// @brief Property path for accessing individual properties of an entity.
///
///
/// @see `SODataV4_DataQuery`.`load`.
- (nullable SODataV4_DataPath*) propertyPath;
/// @brief The filter criteria for the target entities.
///
///
/// @see `SODataV4_DataQuery`.`filter`.
- (nullable SODataV4_QueryFilter*) queryFilter;
/// @brief The query string for this query.
///
/// Intended for use by servers. Clients should use API calls (e.g. `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`filter`, `SODataV4_DataQuery`.`orderBy`) to create query strings.
- (nullable NSString*) queryString;
/// @brief The request path for this query.
///
/// Intended for use by servers. Clients should use API calls (e.g. `SODataV4_DataQuery`.`from`) to create request paths.
- (nullable NSString*) requestPath;
/// @brief Set `SODataV4_DataQuery`.`searchText` for free-text searching.
///
///
/// @return This query.
/// @param text The search expression.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) searchExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] search:@"Juice"];
///     Product__List* products = [service getProducts:query];
///     [self showProducts:products];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) searchExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* productsEntitySet = [service getEntitySet:@"Products"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:productsEntitySet] search:@"Juice"];
///     SODataV4_EntityValueList* products = [[service executeQuery:query] getEntityList];
///     [self showProducts:products];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) search :(nonnull NSString*)text;
/// @brief The search text to locate in the target entities.
///
///
/// @see `SODataV4_DataQuery`.`search`.
- (nullable NSString*) searchText;
/// @brief Add properties (to `SODataV4_DataQuery`.`selectItems`) for selecting from the target entity.
///
///
/// @return This query.
/// @param items The items to be selected.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) selectExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]];
///     Customer__List* customers = [service getCustomers:query];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             Customer* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///         }
///     }
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) selectExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             SODataV4_EntityValue* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///         }
///     }
/// }
/// ````
- (nonnull SODataV4_DataQuery*) select :(nonnull NSArray<SODataV4_PropertyPath*>*)items;
/// @brief Set `SODataV4_DataQuery`.`allSelected` to `true`.
///
///
/// @return This query.
- (nonnull SODataV4_DataQuery*) selectAll;
/// @brief The properties to select from target entities.
///
///
/// @see `SODataV4_DataQuery`.`select`.
- (nullable SODataV4_SelectItemList*) selectItems;
/// @brief Set `SODataV4_DataQuery`.`keySelected` to `true`.
///
///
/// @return This query.
- (nonnull SODataV4_DataQuery*) selectKey;
/// @return `true` if this query selects `property` from the target entity.
/// @param property Property to check for.
- (SODataV4_boolean) selectsProperty :(nonnull SODataV4_Property*)property;
/// @brief Parameter alias values.
///
///
- (void) setAliasValues :(nullable SODataV4_DataValueMap*)value;
/// @brief `true` if all properties are selected (using "*").
///
///
/// @see `SODataV4_DataQuery`.`selectAll`.
- (void) setAllSelected :(SODataV4_boolean)value;
/// @brief If `true`, the service should return the total number of available results as an inline count in the result list.
///
///
/// @see `SODataV4_DataQuery`.`inlineCount`.
- (void) setCountInline :(SODataV4_boolean)value;
/// @brief If `true`, the service should return only the number of available results matching the query.
///
///
/// @see `SODataV4_DataQuery`.`count`.
- (void) setCountOnly :(SODataV4_boolean)value;
/// @brief Custom query options.
///
///
- (void) setCustomOptions :(nullable SODataV4_StringMap*)value;
/// @brief The data format for this query's result.
///
///
/// @see `SODataV4_DataFormat`.
- (void) setDataFormat :(SODataV4_nullable_int)value;
/// @brief If `true`, the client should use delta parsing of the response.
///
///
/// @see `SODataV4_DataQuery`.`withChangeTracking`.
- (void) setDeltaResponse :(SODataV4_boolean)value;
/// @brief The delta time (`SODataV4_DataQuery`.`deltaToken` as UTC date/time).
///
///
- (void) setDeltaTime :(nullable SODataV4_GlobalDateTime*)value;
/// @brief The delta token for use in change tracking.
///
///
- (void) setDeltaToken :(nullable NSString*)value;
/// @brief Derived type for limiting query results.
///
///
/// @see `SODataV4_DataQuery`.`withType`, [Addressing Derived Types](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752352).
- (void) setDerivedType :(nullable SODataV4_StructureType*)value;
/// @brief The entity key for this query.
///
/// If specified, then `SODataV4_DataQuery`.`entitySet` should also be specified.
///
/// @see `SODataV4_DataQuery`.`withKey`.
- (void) setEntityKey :(nullable SODataV4_EntityKey*)value;
/// @brief The entity set expected for the result of this query.
///
/// To execute a query, either this must be non-`nil`, or `SODataV4_DataQuery`.`methodCall` must be non-`nil`.
///
/// @see `SODataV4_DataQuery`.`from`.
- (void) setEntitySet :(nullable SODataV4_EntitySet*)value;
/// @brief The entity type expected for the result of this query.
///
/// Can be used for inference of `SODataV4_DataQuery`.`entitySet`, if only one entity set in the data model uses this type.
- (void) setEntityType :(nullable SODataV4_EntityType*)value;
/// @brief The properties to expand from target entities.
///
///
/// @see `SODataV4_DataQuery`.`expand`.
- (void) setExpandItems :(nullable SODataV4_ExpandItemList*)value;
/// @brief Set to `true` if a single result is expected.
///
/// This may be required if `url` has been explicitly set.
- (void) setExpectSingle :(SODataV4_boolean)value;
/// @brief A group transformation item set through groupBy method
///
///
- (void) setGroupTransform :(nullable SODataV4_GroupTransform*)value;
/// @internal
///
- (void) setInternalData :(nullable NSObject*)value;
/// @brief `true` if all key properties should be selected.
///
///
/// @see `SODataV4_DataQuery`.`selectKey`.
- (void) setKeySelected :(SODataV4_boolean)value;
/// @brief The method call for this query.
///
/// To execute a query, either this must be non-`nil`, or `SODataV4_DataQuery`.`entitySet` must be non-`nil`.
///
/// @see `SODataV4_DataQuery`.`invoke`.
- (void) setMethodCall :(nullable SODataV4_DataMethodCall*)value;
/// @brief The maximum number of results per page.
///
/// Note that this is just a hint to the service. The service is permitted to ignore the client-requested page size.
/// Use `SODataV4_DataQuery`.`skipCount` and `SODataV4_DataQuery`.`topCount` for predictable paging.
- (void) setPageSize :(SODataV4_nullable_int)value;
/// @brief Property path for accessing individual properties of an entity.
///
///
/// @see `SODataV4_DataQuery`.`load`.
- (void) setPropertyPath :(nullable SODataV4_DataPath*)value;
/// @brief The filter criteria for the target entities.
///
///
/// @see `SODataV4_DataQuery`.`filter`.
- (void) setQueryFilter :(nullable SODataV4_QueryFilter*)value;
/// @brief The query string for this query.
///
/// Intended for use by servers. Clients should use API calls (e.g. `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`filter`, `SODataV4_DataQuery`.`orderBy`) to create query strings.
- (void) setQueryString :(nullable NSString*)value;
/// @brief The request path for this query.
///
/// Intended for use by servers. Clients should use API calls (e.g. `SODataV4_DataQuery`.`from`) to create request paths.
- (void) setRequestPath :(nullable NSString*)value;
/// @brief The search text to locate in the target entities.
///
///
/// @see `SODataV4_DataQuery`.`search`.
- (void) setSearchText :(nullable NSString*)value;
/// @brief The properties to select from target entities.
///
///
/// @see `SODataV4_DataQuery`.`select`.
- (void) setSelectItems :(nullable SODataV4_SelectItemList*)value;
/// @brief The number of initial results to skip.
///
///
/// @see `SODataV4_DataQuery`.`skip`.
- (void) setSkipCount :(SODataV4_nullable_int)value;
/// @brief The skip token for use in server-driven paging.
///
///
- (void) setSkipToken :(nullable NSString*)value;
/// @brief The sort criteria for the target entities.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`, `SODataV4_DataQuery`.`thenBy`.
- (void) setSortItems :(nullable SODataV4_SortItemList*)value;
/// @brief If `true`, the client should use streamed parsing of the response.
///
///
/// @see `SODataV4_DataQuery`.`stream`.
- (void) setStreamResponse :(SODataV4_boolean)value;
/// @internal
///
- (void) setSystemFlags :(SODataV4_int)value;
/// @brief The number of initial results to return.
///
///
/// @see `SODataV4_DataQuery`.`top`.
- (void) setTopCount :(SODataV4_nullable_int)value;
/// @brief Does the client want the server to track changes?
///
///
/// @see `SODataV4_DataQuery`.`withChangeTracking`.
- (void) setTrackChanges :(SODataV4_boolean)value;
/// @brief The OData transformation items as described in OData Data Aggregation.
///
///
- (void) setTransformValues :(nullable SODataV4_TransformValueList*)value;
/// @brief The relative URL for this query; a combination of `SODataV4_DataQuery`.`requestPath` and `SODataV4_DataQuery`.`queryString` if either is non-`nil`, or `nil` if the URL is intended to be derived from other properties.
///
/// Note: It is not recommended for clients to explicitly set the URL, except by using a URL from `SODataV4_EntityValueList`.`deltaLink` or `SODataV4_EntityValueList`.`nextLink`.
///
/// @see `SODataV4_DataQuery`.`from`, `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`filter`, `SODataV4_DataQuery`.`orderBy`.
- (void) setUrl :(nullable NSString*)value;
/// @brief Set `SODataV4_DataQuery`.`skipCount` to specify the number of initial results to return.
///
///
/// @return This query.
/// @param count Number of initial results for query execution to skip.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) queryWithSkipExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] skip:20] top:10];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
///     [SODataV4_Assert isTrue:(customers.length == 10):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:407:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) queryWithSkipExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] from:customersEntitySet] skip:20] top:10];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     [self showCustomers:customers];
///     [SODataV4_Assert isTrue:(customers.length == 10):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:446:9"];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) skip :(SODataV4_int)count;
/// @brief The number of initial results to skip.
///
///
/// @see `SODataV4_DataQuery`.`skip`.
- (SODataV4_nullable_int) skipCount;
/// @brief The skip token for use in server-driven paging.
///
///
- (nullable NSString*) skipToken;
/// @brief The sort criteria for the target entities.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`, `SODataV4_DataQuery`.`thenBy`.
- (nullable SODataV4_SortItemList*) sortItems;
/// @return The names of all properties used for sorting by this query.
/// @see `SODataV4_DataQuery`.`orderBy`, `SODataV4_DataQuery`.`thenBy`.
- (nonnull SODataV4_StringSet*) sortedByProperties;
/// @brief Set `SODataV4_DataQuery`.`streamResponse` to `true` to request streamed response processing.
///
///
/// @return This query.
- (nonnull SODataV4_DataQuery*) stream;
/// @brief If `true`, the client should use streamed parsing of the response.
///
///
/// @see `SODataV4_DataQuery`.`stream`.
- (SODataV4_boolean) streamResponse;
/// @internal
///
- (SODataV4_int) systemFlags;
/// @internal
///
- (nonnull SODataV4_DataQuery*) thenBy :(nonnull SODataV4_QueryValue*)value;
/// @brief Add to `SODataV4_DataQuery`.`sortItems` a value for result ordering.
///
/// This function is an alias for `SODataV4_DataQuery`.`orderBy`.
/// By convention to improve readability when multiple ordering values are required, the first ordering value is added using `orderBy`, and subsequent ordering values are added using `thenBy`.
///
/// @return This query.
/// @param value Value for ordering.
/// @param order (optional) The sort order (defaults to ascending).
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) thenByExample
/// {
///     MediaService* service = self.service;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] orderBy:Artist.lastName] thenBy:Artist.firstName];
///     ArtistList* artists = [service getArtists:query];
///     [self showArtists:artists];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) thenByExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* artistsEntitySet = [service getEntitySet:@"Artists"];
///     SODataV4_EntityType* artistEntityType = artistsEntitySet.entityType;
///     SODataV4_Property* lastNameProperty = [artistEntityType getProperty:@"lastName"];
///     SODataV4_Property* firstNameProperty = [artistEntityType getProperty:@"firstName"];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] from:artistsEntitySet] orderBy:lastNameProperty] thenBy:firstNameProperty];
///     SODataV4_EntityValueList* artists = [[service executeQuery:query] getEntityList];
///     [self showArtists:artists];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) thenBy :(nonnull SODataV4_QueryValue*)value :(nonnull SODataV4_SortOrder*)order;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Set `SODataV4_DataQuery`.`topCount` to specify the maximum number of results to return.
///
///
/// @return This query.
/// @param count Maximum number of results for query execution to return.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) queryWithTopExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] top:10];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
///     [SODataV4_Assert isTrue:(customers.length == 10):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:417:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) queryWithTopExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:customersEntitySet] top:10];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     [self showCustomers:customers];
///     [SODataV4_Assert isTrue:(customers.length == 10):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:457:9"];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) top :(SODataV4_int)count;
/// @brief The number of initial results to return.
///
///
/// @see `SODataV4_DataQuery`.`top`.
- (SODataV4_nullable_int) topCount;
/// @brief Does the client want the server to track changes?
///
///
/// @see `SODataV4_DataQuery`.`withChangeTracking`.
- (SODataV4_boolean) trackChanges;
/// @brief Adds transformation items (to `SODataV4_DataQuery`.`transformValues`) for transforming the result of a query sent to an entity set.
///
///
/// @return This query.
/// @param items The items to be added.
/// 
/// #### Example for transformations
/// 
/// ```` oc
/// - (void) transformationExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* employeeEntitySet = [service getEntitySet:@"Employees"];
///     SODataV4_EntityType* employeeEntityType = employeeEntitySet.entityType;
///     SODataV4_Property* employeeReportsToProperty = [employeeEntityType getProperty:@"ReportsTo"];
///     SODataV4_Property* employee1Property = [employeeEntityType getProperty:@"Employee1"];
///     SODataV4_Property* ordersProperty = [employeeEntityType getProperty:@"Orders"];
///     SODataV4_Property* ordersQuantity = [ordersProperty.entityType getProperty:@"Quantity"];
///     SODataV4_Property* countryProperty = [employeeEntityType getProperty:@"Country"];
///     SODataV4_DataQuery* queryGroup = [SODataV4_DataQuery new];
///     SODataV4_FilterTransform* filterGroupTransform = [SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:countryProperty:[SODataV4_StringValue of:@"Budapest"]]];
///     SODataV4_GroupTransform* groupTransform = [[SODataV4_GroupTransform groupBy:@[employeeReportsToProperty]] aggregate:@[[[ordersProperty path:ordersQuantity] sum:@"SumQuantity"]]];
///     [queryGroup transform:@[groupTransform]];
///     [self testApplyQueryResult:queryGroup:@"SumQuantity"];
///     SODataV4_DataQuery* groupTransformForQuery = [[[[SODataV4_DataQuery new] groupBy:@[employeeReportsToProperty]] aggregate:@[[[ordersProperty path:ordersQuantity] sum:@"SumQuantity"]]] transform:@[filterGroupTransform]];
///     [self testApplyQueryResult:groupTransformForQuery:@"SumQuantity"];
///     SODataV4_DataQuery* queryTopPercent = [SODataV4_DataQuery new];
///     SODataV4_TopTransform* topPercentTransform = [SODataV4_TopTransform percent:((SODataV4_double)50):employeeReportsToProperty];
///     [queryTopPercent transform:@[topPercentTransform]];
///     [self testApplyQueryResult:queryTopPercent:SODataV4_NULL_STRING];
///     SODataV4_DataQuery* queryExpand = [SODataV4_DataQuery new];
///     SODataV4_ExpandTransform* expandTransform = [SODataV4_ExpandTransform withFilter:ordersProperty:[SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:employeeReportsToProperty:[SODataV4_IntValue of:1000]]]];
///     [queryExpand transform:@[expandTransform]];
///     [self testApplyQueryResult:queryExpand:SODataV4_NULL_STRING];
///     SODataV4_ExpandTransform* expandWithExpandTransform = [SODataV4_ExpandTransform withExpand:employee1Property:expandTransform];
///     SODataV4_DataQuery* queryExpand1 = [SODataV4_DataQuery new];
///     [queryExpand1 transform:@[expandWithExpandTransform]];
///     [self testApplyQueryResult:queryExpand1:SODataV4_NULL_STRING];
/// }
/// ````
/// 
/// #### Example for transformations
/// 
/// ```` oc
/// - (void) transformationExample
/// {
///     SODataV4_DataQuery* queryGroup = [SODataV4_DataQuery new];
///     SODataV4_GroupTransform* groupTransform = [[SODataV4_GroupTransform groupBy:@[Employee.reportsTo]] aggregate:@[[[[Employee.orders path:Order.orderDetails] path:OrderDetail.quantity] sum:@"SumQuantity"]]];
///     [queryGroup transform:@[groupTransform]];
///     [self testApplyQueryResult:queryGroup:@"SumQuantity"];
///     SODataV4_FilterTransform* filterGroupTransform = [SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:Employee.country:[SODataV4_StringValue of:@"Budapest"]]];
///     SODataV4_DataQuery* groupTransformForQuery = [[[[SODataV4_DataQuery new] groupBy:@[Employee.reportsTo]] aggregate:@[[[[Employee.orders path:Order.orderDetails] path:OrderDetail.quantity] sum:@"SumQuantity"]]] transform:@[filterGroupTransform]];
///     [self testApplyQueryResult:groupTransformForQuery:@"SumQuantity"];
///     SODataV4_DataQuery* queryTopPercent = [SODataV4_DataQuery new];
///     SODataV4_TopTransform* topPercentTransform = [SODataV4_TopTransform percent:((SODataV4_double)50):Employee.reportsTo];
///     [queryTopPercent transform:@[topPercentTransform]];
///     [self testApplyQueryResult:queryTopPercent:SODataV4_NULL_STRING];
///     SODataV4_DataQuery* queryExpand = [SODataV4_DataQuery new];
///     SODataV4_ExpandTransform* expandTransform = [SODataV4_ExpandTransform withFilter:Employee.orders:[SODataV4_FilterTransform of:[SODataV4_QueryOperator equal:Employee.reportsTo:[SODataV4_IntValue of:1000]]]];
///     [queryExpand transform:@[expandTransform]];
///     [self testApplyQueryResult:queryExpand:SODataV4_NULL_STRING];
///     SODataV4_ExpandTransform* expandWithExpandTransform = [SODataV4_ExpandTransform withExpand:Employee.employee1:expandTransform];
///     SODataV4_DataQuery* queryExpand1 = [SODataV4_DataQuery new];
///     [queryExpand1 transform:@[expandWithExpandTransform]];
///     [self testApplyQueryResult:queryExpand1:SODataV4_NULL_STRING];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) transform :(nonnull NSArray<SODataV4_TransformValue*>*)items;
/// @brief The OData transformation items as described in OData Data Aggregation.
///
///
- (nullable SODataV4_TransformValueList*) transformValues;
/// @brief The relative URL for this query; a combination of `SODataV4_DataQuery`.`requestPath` and `SODataV4_DataQuery`.`queryString` if either is non-`nil`, or `nil` if the URL is intended to be derived from other properties.
///
/// Note: It is not recommended for clients to explicitly set the URL, except by using a URL from `SODataV4_EntityValueList`.`deltaLink` or `SODataV4_EntityValueList`.`nextLink`.
///
/// @see `SODataV4_DataQuery`.`from`, `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`filter`, `SODataV4_DataQuery`.`orderBy`.
- (nullable NSString*) url;
/// @brief This function is an alias for `SODataV4_DataQuery`.`filter`.
///
///
/// @return This query.
/// @param test The query filter.
- (nonnull SODataV4_DataQuery*) where :(nonnull SODataV4_QueryFilter*)test;
/// @internal
///
- (nonnull SODataV4_DataQuery*) withChangeTracking;
/// @brief Set `SODataV4_DataQuery`.`url` from `deltaLink` and set `SODataV4_DataQuery`.`trackChanges` to `true`.
///
/// Also set `SODataV4_DataQuery`.`deltaResponse` to `true` if `deltaLink` is non-null, otherwise `false`.
///
/// @return This query.
/// @param deltaLink (optional) Delta link (absolute or, preferably, relative to the service root URL).
- (nonnull SODataV4_DataQuery*) withChangeTracking :(nullable NSString*)deltaLink;
/// @brief Set `SODataV4_DataQuery`.`entityKey` to locate an entity by its primary key.
///
///
/// @return This query.
/// @param key Entity key.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) queryWithKeyExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] withKey:[Customer key:@"QUEEN"]];
///     Customer* customer = [service getCustomer:query];
///     [self showCustomer:customer];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) queryWithKeyExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] withKey:[[SODataV4_EntityKey new] withProperty:customerIDProperty:[SODataV4_StringValue of:@"QUEEN"]]];
///     SODataV4_EntityValue* customer = [[service executeQuery:query] getRequiredEntity];
///     [self showCustomer:customer];
/// }
/// ````
- (nonnull SODataV4_DataQuery*) withKey :(nonnull SODataV4_EntityKey*)key;
/// @brief Set `SODataV4_DataQuery`.`derivedType` to limit results to a derived complex/entity type.
///
///
/// @return This query.
/// @param type Complex/entity type.
- (nonnull SODataV4_DataQuery*) withType :(nonnull SODataV4_StructureType*)type;
/// @brief Set `SODataV4_DataQuery`.`url`.
///
/// Note: It is not recommended for clients to explicitly set the URL, except by using a URL from `SODataV4_EntityValueList`.`deltaLink` or `SODataV4_EntityValueList`.`nextLink`.
///
/// @return This query.
/// @param url Query URL (absolute or, preferably, relative to the service root URL).
- (nonnull SODataV4_DataQuery*) withURL :(nullable NSString*)url;
/// @brief Parameter alias values.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValueMap* aliasValues;
/// @brief `true` if all properties are selected (using "*").
///
///
/// @see `SODataV4_DataQuery`.`selectAll`.
@property (nonatomic, readwrite) SODataV4_boolean allSelected;
/// @brief If `true`, the service should return the total number of available results as an inline count in the result list.
///
///
/// @see `SODataV4_DataQuery`.`inlineCount`.
@property (nonatomic, readwrite) SODataV4_boolean countInline;
/// @brief If `true`, the service should return only the number of available results matching the query.
///
///
/// @see `SODataV4_DataQuery`.`count`.
@property (nonatomic, readwrite) SODataV4_boolean countOnly;
/// @brief Custom query options.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_StringMap* customOptions;
/// @brief The data format for this query's result.
///
///
/// @see `SODataV4_DataFormat`.
@property (nonatomic, readwrite) SODataV4_nullable_int dataFormat;
/// @brief If `true`, the client should use delta parsing of the response.
///
///
/// @see `SODataV4_DataQuery`.`withChangeTracking`.
@property (nonatomic, readwrite) SODataV4_boolean deltaResponse;
/// @brief The delta time (`SODataV4_DataQuery`.`deltaToken` as UTC date/time).
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* deltaTime;
/// @brief The delta token for use in change tracking.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* deltaToken;
/// @brief Derived type for limiting query results.
///
///
/// @see `SODataV4_DataQuery`.`withType`, [Addressing Derived Types](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752352).
@property (nonatomic, readwrite, strong, nullable) SODataV4_StructureType* derivedType;
/// @brief The entity key for this query.
///
/// If specified, then `SODataV4_DataQuery`.`entitySet` should also be specified.
///
/// @see `SODataV4_DataQuery`.`withKey`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityKey* entityKey;
/// @brief The entity set expected for the result of this query.
///
/// To execute a query, either this must be non-`nil`, or `SODataV4_DataQuery`.`methodCall` must be non-`nil`.
///
/// @see `SODataV4_DataQuery`.`from`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntitySet* entitySet;
/// @brief The entity type expected for the result of this query.
///
/// Can be used for inference of `SODataV4_DataQuery`.`entitySet`, if only one entity set in the data model uses this type.
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityType* entityType;
/// @brief The properties to expand from target entities.
///
///
/// @see `SODataV4_DataQuery`.`expand`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_ExpandItemList* expandItems;
/// @brief Set to `true` if a single result is expected.
///
/// This may be required if `url` has been explicitly set.
@property (nonatomic, readwrite) SODataV4_boolean expectSingle;
/// @brief A group transformation item set through groupBy method
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_GroupTransform* groupTransform;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) NSObject* internalData;
/// @brief `true` if all key properties should be selected.
///
///
/// @see `SODataV4_DataQuery`.`selectKey`.
@property (nonatomic, readwrite) SODataV4_boolean keySelected;
/// @brief The method call for this query.
///
/// To execute a query, either this must be non-`nil`, or `SODataV4_DataQuery`.`entitySet` must be non-`nil`.
///
/// @see `SODataV4_DataQuery`.`invoke`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataMethodCall* methodCall;
/// @brief The maximum number of results per page.
///
/// Note that this is just a hint to the service. The service is permitted to ignore the client-requested page size.
/// Use `SODataV4_DataQuery`.`skipCount` and `SODataV4_DataQuery`.`topCount` for predictable paging.
@property (nonatomic, readwrite) SODataV4_nullable_int pageSize;
/// @brief Property path for accessing individual properties of an entity.
///
///
/// @see `SODataV4_DataQuery`.`load`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataPath* propertyPath;
/// @brief The filter criteria for the target entities.
///
///
/// @see `SODataV4_DataQuery`.`filter`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_QueryFilter* queryFilter;
/// @brief The query string for this query.
///
/// Intended for use by servers. Clients should use API calls (e.g. `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`filter`, `SODataV4_DataQuery`.`orderBy`) to create query strings.
@property (nonatomic, readwrite, strong, nullable) NSString* queryString;
/// @brief The request path for this query.
///
/// Intended for use by servers. Clients should use API calls (e.g. `SODataV4_DataQuery`.`from`) to create request paths.
@property (nonatomic, readwrite, strong, nullable) NSString* requestPath;
/// @brief The search text to locate in the target entities.
///
///
/// @see `SODataV4_DataQuery`.`search`.
@property (nonatomic, readwrite, strong, nullable) NSString* searchText;
/// @brief The properties to select from target entities.
///
///
/// @see `SODataV4_DataQuery`.`select`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_SelectItemList* selectItems;
/// @brief The number of initial results to skip.
///
///
/// @see `SODataV4_DataQuery`.`skip`.
@property (nonatomic, readwrite) SODataV4_nullable_int skipCount;
/// @brief The skip token for use in server-driven paging.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* skipToken;
/// @brief The sort criteria for the target entities.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`, `SODataV4_DataQuery`.`thenBy`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_SortItemList* sortItems;
/// @brief If `true`, the client should use streamed parsing of the response.
///
///
/// @see `SODataV4_DataQuery`.`stream`.
@property (nonatomic, readwrite) SODataV4_boolean streamResponse;
/// @internal
///
@property (nonatomic, readwrite) SODataV4_int systemFlags;
/// @brief The number of initial results to return.
///
///
/// @see `SODataV4_DataQuery`.`top`.
@property (nonatomic, readwrite) SODataV4_nullable_int topCount;
/// @brief Does the client want the server to track changes?
///
///
/// @see `SODataV4_DataQuery`.`withChangeTracking`.
@property (nonatomic, readwrite) SODataV4_boolean trackChanges;
/// @brief The OData transformation items as described in OData Data Aggregation.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_TransformValueList* transformValues;
/// @brief The relative URL for this query; a combination of `SODataV4_DataQuery`.`requestPath` and `SODataV4_DataQuery`.`queryString` if either is non-`nil`, or `nil` if the URL is intended to be derived from other properties.
///
/// Note: It is not recommended for clients to explicitly set the URL, except by using a URL from `SODataV4_EntityValueList`.`deltaLink` or `SODataV4_EntityValueList`.`nextLink`.
///
/// @see `SODataV4_DataQuery`.`from`, `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`filter`, `SODataV4_DataQuery`.`orderBy`.
@property (nonatomic, readwrite, strong, nullable) NSString* url;
@end
#endif

#ifdef import_SODataV4__DataQuery_private
#ifndef imported_SODataV4__DataQuery_private
#define imported_SODataV4__DataQuery_private
@interface SODataV4_DataQuery (private)
/// @internal
///
- (nonnull SODataV4_ExpandItem*) addExpandIfNeeded :(nonnull SODataV4_DataPath*)path;
- (nonnull SODataV4_ExpandItem*) addExpandIfNeeded :(nonnull SODataV4_DataPath*)path :(SODataV4_boolean)hide;
- (void) adjustExpandItems :(SODataV4_int)dataVersion;
- (void) adjustSelectItems :(SODataV4_int)dataVersion;
/// @internal
///
- (void) autoExpandDataValue :(nonnull SODataV4_StructureType*)structureType :(nullable SODataV4_DataValue*)dataValue;
- (void) autoExpandDataValue :(nonnull SODataV4_StructureType*)structureType :(nullable SODataV4_DataValue*)dataValue :(SODataV4_boolean)hide;
- (void) autoExpandTransformValue :(nonnull SODataV4_TransformValue*)transformValue;
- (void) autoExpandTransformValues :(nullable SODataV4_TransformValueList*)transformValues;
/// @internal
///
- (void) expandPropertyPath :(nonnull SODataV4_StructureType*)structureType :(nonnull SODataV4_PropertyPath*)propertyPath;
- (void) expandPropertyPath :(nonnull SODataV4_StructureType*)structureType :(nonnull SODataV4_PropertyPath*)propertyPath :(SODataV4_boolean)hide;
+ (nonnull SODataV4_DataMethodCall*) _new1 :(nonnull SODataV4_DataMethod*)p1 :(nonnull SODataV4_ParameterList*)p2;
+ (nonnull SODataV4_SortItem*) _new2 :(nonnull SODataV4_QueryValue*)p1 :(nonnull SODataV4_SortOrder*)p2;
@end
#endif
#endif

#ifdef import_SODataV4__DataQuery_internal
#ifndef imported_SODataV4__DataQuery_internal
#define imported_SODataV4__DataQuery_internal
@interface SODataV4_DataQuery (internal)
- (void) addExpandItem :(nonnull SODataV4_ExpandItem*)item;
- (void) addSelectItem :(nonnull SODataV4_SelectItem*)item;
- (void) addSortItem :(nonnull SODataV4_SortItem*)item;
- (void) addTransformItem :(nonnull SODataV4_TransformValue*)item;
/// @internal
///
- (void) adjustItems;
/// @brief Adjust the `SODataV4_DataQuery`.`selectItems` and `SODataV4_DataQuery`.`expandItems` of this query
///
/// to include default properties,
/// properties required to support other select/expand items, etc.
/// Also for efficiency we should avoid any duplicate select items.
/// Do all of this this recursively for nested expands.
///
/// @param dataVersion (optional) Data version expected by the client.
/// @see `SODataV4_DataVersion`.
- (void) adjustItems :(SODataV4_int)dataVersion;
- (nonnull NSString*) debugString;
- (void) getReferenced :(nonnull SODataV4_StringSet*)properties :(nullable SODataV4_StringSet*)functions :(nullable SODataV4_StringSet*)operators :(nullable SODataV4_DataValue*)value;
/// @return The required entity key for this query. Can be changed using `SODataV4_DataQuery`.`withKey`.
/// @throw `SODataV4_DataQueryException` if this query has no entity key.
- (nonnull SODataV4_EntityKey*) getRequiredEntityKey;
/// @return The required entity set for this query. Can be changed using `SODataV4_DataQuery`.`from`.
/// @throw `SODataV4_DataQueryException` if this query has no entity set.
- (nonnull SODataV4_EntitySet*) getRequiredEntitySet;
/// @brief Has `SODataV4_DataQuery`.`adjustItems` been called for this query?
///
///
- (SODataV4_boolean) hasAdjustedItems;
/// @return true if the property should be expanded by the query.
/// @param property The property to check.
- (SODataV4_boolean) hasExpandProperty :(nonnull SODataV4_Property*)property;
/// @return true if the property should be returned by the query.
/// @param property The property to check.
- (SODataV4_boolean) hasSelectProperty :(nonnull SODataV4_Property*)property;
- (SODataV4_boolean) inDownload;
- (SODataV4_boolean) inSyncTran;
- (SODataV4_boolean) inUpload;
/// @brief @see `DataContext`.
///
///
- (nullable NSObject*) requestContext;
/// @brief Has `SODataV4_DataQuery`.`adjustItems` been called for this query?
///
///
- (void) setHasAdjustedItems :(SODataV4_boolean)value;
- (void) setInDownload :(SODataV4_boolean)value;
- (void) setInSyncTran :(SODataV4_boolean)value;
- (void) setInUpload :(SODataV4_boolean)value;
/// @brief @see `DataContext`.
///
///
- (void) setRequestContext :(nullable NSObject*)value;
/// @brief The expandItems as they were before adjustItems.
///
///
- (void) setUnadjustedExpandItems :(nullable SODataV4_ExpandItemList*)value;
/// @brief The selectItems as they were before adjustItems.
///
///
- (void) setUnadjustedSelectItems :(nullable SODataV4_SelectItemList*)value;
/// @brief The expandItems as they were before adjustItems.
///
///
- (nullable SODataV4_ExpandItemList*) unadjustedExpandItems;
/// @brief The selectItems as they were before adjustItems.
///
///
- (nullable SODataV4_SelectItemList*) unadjustedSelectItems;
#define SODataV4_DataQuery_FLAG_FIX_MISSING_NULL_VALUES 1
#define SODataV4_DataQuery_FLAG_FIX_MISSING_EMPTY_LISTS 2
/// @brief Has `SODataV4_DataQuery`.`adjustItems` been called for this query?
///
///
@property (nonatomic, readwrite) SODataV4_boolean hasAdjustedItems;
@property (nonatomic, readwrite) SODataV4_boolean inDownload;
@property (nonatomic, readwrite) SODataV4_boolean inSyncTran;
@property (nonatomic, readwrite) SODataV4_boolean inUpload;
/// @brief @see `DataContext`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSObject* requestContext;
/// @brief The expandItems as they were before adjustItems.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_ExpandItemList* unadjustedExpandItems;
/// @brief The selectItems as they were before adjustItems.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_SelectItemList* unadjustedSelectItems;
@end
#endif
#endif

#ifndef imported_SODataV4__DataSchema_public
#define imported_SODataV4__DataSchema_public
/// @brief Represents an [OData](http://odata.org) data schema.
///
///
@interface SODataV4_DataSchema : SODataV4_ObjectBase
{
    @private NSString* _Nonnull namespace_;
    @private NSString* _Nullable alias_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_AnnotationTermMap* _Nonnull annotationTerms_;
    @private SODataV4_DataMethodMap* _Nonnull dataMethods_;
    @private SODataV4_SimpleTypeMap* _Nonnull simpleTypes_;
    @private SODataV4_EnumTypeMap* _Nonnull enumTypes_;
    @private SODataV4_ComplexTypeMap* _Nonnull complexTypes_;
    @private SODataV4_EntityTypeMap* _Nonnull entityTypes_;
    @private SODataV4_EntitySetMap* _Nonnull entitySets_;
    @private SODataV4_EntitySetMap* _Nonnull singletons_;
    @private SODataV4_EntityContainerMap* _Nonnull entityContainers_;
    @private SODataV4_DataMethodMap* _Nonnull lookupMethods_;
    @private SODataV4_EntitySetMap* _Nonnull lookupSets_;
    @private SODataV4_EntitySetMap* _Nonnull lookupSingletons_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataSchema*) new;
/// @internal
///
- (void) _init;
/// @brief The alias of this data schema.
///
///
- (nullable NSString*) alias;
/// @brief Obsolete. Use `SODataV4_DataSchema`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_DataSchema`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotation terms defined by this schema.
///
///
- (nonnull SODataV4_AnnotationTermMap*) annotationTerms;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Map of complex types defined by this schema.
///
///
- (nonnull SODataV4_ComplexTypeMap*) complexTypes;
/// @brief Map of data methods defined by this schema.
///
///
- (nonnull SODataV4_DataMethodMap*) dataMethods;
/// @brief Map of entity containers defined by this schema.
///
///
- (nonnull SODataV4_EntityContainerMap*) entityContainers;
/// @brief Map of entity sets defined by this schema.
///
///
- (nonnull SODataV4_EntitySetMap*) entitySets;
/// @brief Map of entity types defined by this schema.
///
///
- (nonnull SODataV4_EntityTypeMap*) entityTypes;
/// @brief Map of enum types defined by this schema.
///
///
- (nonnull SODataV4_EnumTypeMap*) enumTypes;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_DataSchema`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @internal
///
- (nonnull SODataV4_DataMethodMap*) lookupMethods;
/// @internal
///
- (nonnull SODataV4_EntitySetMap*) lookupSets;
/// @internal
///
- (nonnull SODataV4_EntitySetMap*) lookupSingletons;
/// @brief The namespace of this data schema.
///
///
- (nonnull NSString*) namespace;
/// @brief The alias of this data schema.
///
///
- (void) setAlias :(nullable NSString*)value;
/// @brief The namespace of this data schema.
///
///
- (void) setNamespace :(nonnull NSString*)value;
/// @brief Map of simple types defined by this schema.
///
///
- (nonnull SODataV4_SimpleTypeMap*) simpleTypes;
/// @brief Map of singletons defined by this schema.
///
///
- (nonnull SODataV4_EntitySetMap*) singletons;
/// @brief The alias of this data schema.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* alias;
/// @brief Obsolete. Use `SODataV4_DataSchema`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_DataSchema`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotation terms defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationTermMap* annotationTerms;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Map of complex types defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_ComplexTypeMap* complexTypes;
/// @brief Map of data methods defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataMethodMap* dataMethods;
/// @brief Map of entity containers defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntityContainerMap* entityContainers;
/// @brief Map of entity sets defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* entitySets;
/// @brief Map of entity types defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntityTypeMap* entityTypes;
/// @brief Map of enum types defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EnumTypeMap* enumTypes;
/// @internal
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataMethodMap* lookupMethods;
/// @internal
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* lookupSets;
/// @internal
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* lookupSingletons;
/// @brief The namespace of this data schema.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* namespace;
/// @brief Map of simple types defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_SimpleTypeMap* simpleTypes;
/// @brief Map of singletons defined by this schema.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* singletons;
@end
#endif

#ifndef imported_SODataV4__DataSchemaMap_Entry_public
#define imported_SODataV4__DataSchemaMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_DataSchemaMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_DataSchema* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataSchemaMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_DataSchema*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_DataSchema*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataSchema* value;
@end
#endif

#ifndef imported_SODataV4__DataType_public
#define imported_SODataV4__DataType_public
/// @brief Represents a data type defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/) or [OData](http://odata.org).
///
/// String, binary, boolean, numeric and calendar types use XML Schema nomenclature.
/// Geography, geometry, complex and entity types use OData nomenclature.
///
/// @see `SODataV4_DataValue`, `SODataV4_SimpleType`, `SODataV4_EnumType`, `SODataV4_ComplexType`, `SODataV4_EntityType`.
@interface SODataV4_DataType : SODataV4_ObjectBase
{
    @private SODataV4_int _code_;
    @private NSString* _Nonnull _name_;
    @private SODataV4_DataType* _Nullable _item_;
    @private SODataV4_DataType* _Nullable _base_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataType*) new;
/// @internal
///
- (void) _init;
/// @brief If this type is a derived simple, complex, entity or enum type, then the base type. Otherwise throw an exception.
///
///
/// @see `SODataV4_DataType`.`isDerived`.
- (nonnull SODataV4_DataType*) baseType;
/// @brief A numeric code to represent this data type.
///
///
/// @see constants.
- (SODataV4_int) code;
/// @return the data type for a basic type code.
/// @throw `SODataV4_UndefinedException` if there is no basic type with the specified code.
/// @param code Data type code.
/// @see constants.
+ (nonnull SODataV4_DataType*) forCode :(SODataV4_int)code;
/// @return the data type for a basic type name.
/// @throw `SODataV4_UndefinedException` if there is no basic type with the specified name.
/// @param name Data type name.
/// Note: for optimial performance, types should be looked up by code.
/// @see `SODataV4_DataType`.`forCode`.
+ (nonnull SODataV4_DataType*) forName :(nonnull NSString*)name;
/// @brief `true` if this type is a basic type (not a complex, entity, list or stream type).
///
///
- (SODataV4_boolean) isBasic;
/// @brief `true` if this type is a basic list type.
///
///
- (SODataV4_boolean) isBasicList;
/// @brief `true` if this type is a calendar type.
///
/// Calendar types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`
- (SODataV4_boolean) isCalendar;
/// @brief `true` if this is a complex type.
///
///
/// @see `SODataV4_ComplexType`.
- (SODataV4_boolean) isComplex;
/// @brief `true` if this is a complex list type.
///
///
- (SODataV4_boolean) isComplexList;
/// @brief `true` if this type is a derived simple, complex, entity or enum type.
///
///
- (SODataV4_boolean) isDerived;
/// @brief `true` if this is an entity type.
///
///
/// @see `SODataV4_EntityType`.
- (SODataV4_boolean) isEntity;
/// @brief `true` if this is an entity list type.
///
///
- (SODataV4_boolean) isEntityList;
/// @brief `true` if this type is an enum type.
///
///
- (SODataV4_boolean) isEnum;
/// @brief `true` if this is an enum list type.
///
///
- (SODataV4_boolean) isEnumList;
/// @brief `true` if this type is a geography type.
///
/// Geography types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`
- (SODataV4_boolean) isGeography;
/// @brief `true` if this type is a geometry type.
///
/// Geometry types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`
- (SODataV4_boolean) isGeometry;
/// @brief `true` if this type is a geospatial (geography/geometry) type.
///
/// Geospatial types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`, `SODataV4_DataType`.`isGeography`, `SODataV4_DataType`.`isGeometry`.
- (SODataV4_boolean) isGeospatial;
/// @brief `true` if this type is a GUID type.
///
///
- (SODataV4_boolean) isGuid;
/// @brief `true` if this is a list type.
///
///
/// @see `SODataV4_ListBase`.
- (SODataV4_boolean) isList;
/// @brief `true` if this type is a number type.
///
///
- (SODataV4_boolean) isNumber;
/// @brief `true` if this type is a path type.
///
///
- (SODataV4_boolean) isPath;
/// @brief `true` if this is a stream type.
///
///
/// @see `SODataV4_ByteStream`, `SODataV4_CharStream`.
- (SODataV4_boolean) isStream;
/// @brief `true` if this type is an unsigned type.
///
///
- (SODataV4_boolean) isUnsigned;
/// @brief If this type is a list type, then the item type. Otherwise throw an exception.
///
///
/// @see `SODataV4_DataType`.`isList`.
- (nonnull SODataV4_DataType*) itemType;
/// @return The data type for a list of the specified item type.
/// @param item The item type.
+ (nonnull SODataV4_DataType*) listOf :(nonnull SODataV4_DataType*)item;
/// @brief The name of this data type.
///
///
- (nonnull NSString*) name;
/// @return The name of this data type.
///
- (nonnull NSString*) toString;
/// @brief The `unknown` type.
///
///
+ (nonnull SODataV4_DataType*) unknown;
#define SODataV4_DataType_CODE_UNKNOWN 0
#define SODataV4_DataType_STRING 1
#define SODataV4_DataType_BINARY 2
#define SODataV4_DataType_BOOLEAN 3
#define SODataV4_DataType_CHAR 4
#define SODataV4_DataType_BYTE 5
#define SODataV4_DataType_SHORT 6
#define SODataV4_DataType_INT 7
#define SODataV4_DataType_LONG 8
#define SODataV4_DataType_INTEGER 9
#define SODataV4_DataType_DECIMAL 10
#define SODataV4_DataType_FLOAT 11
#define SODataV4_DataType_DOUBLE 12
#define SODataV4_DataType_UNSIGNED_BYTE 13
#define SODataV4_DataType_UNSIGNED_SHORT 14
#define SODataV4_DataType_UNSIGNED_INT 15
#define SODataV4_DataType_UNSIGNED_LONG 16
#define SODataV4_DataType_ENUM_VALUE 17
#define SODataV4_DataType_GUID_VALUE 18
#define SODataV4_DataType_BYTE_STREAM 19
#define SODataV4_DataType_CHAR_STREAM 20
#define SODataV4_DataType_STREAM_LINK 21
#define SODataV4_DataType_LOCAL_DATE 22
#define SODataV4_DataType_LOCAL_TIME 23
#define SODataV4_DataType_LOCAL_DATE_TIME 24
#define SODataV4_DataType_GLOBAL_DATE_TIME 25
#define SODataV4_DataType_DAY_TIME_DURATION 26
#define SODataV4_DataType_YEAR_MONTH_DURATION 27
#define SODataV4_DataType_GEOGRAPHY_VALUE 31
#define SODataV4_DataType_GEOGRAPHY_POINT 32
#define SODataV4_DataType_GEOGRAPHY_MULTI_POINT 33
#define SODataV4_DataType_GEOGRAPHY_LINE_STRING 34
#define SODataV4_DataType_GEOGRAPHY_MULTI_LINE_STRING 35
#define SODataV4_DataType_GEOGRAPHY_POLYGON 36
#define SODataV4_DataType_GEOGRAPHY_MULTI_POLYGON 37
#define SODataV4_DataType_GEOGRAPHY_COLLECTION 38
#define SODataV4_DataType_GEOMETRY_VALUE 41
#define SODataV4_DataType_GEOMETRY_POINT 42
#define SODataV4_DataType_GEOMETRY_MULTI_POINT 43
#define SODataV4_DataType_GEOMETRY_LINE_STRING 44
#define SODataV4_DataType_GEOMETRY_MULTI_LINE_STRING 45
#define SODataV4_DataType_GEOMETRY_POLYGON 46
#define SODataV4_DataType_GEOMETRY_MULTI_POLYGON 47
#define SODataV4_DataType_GEOMETRY_COLLECTION 48
#define SODataV4_DataType_EDM_PRIMITIVE 49
#define SODataV4_DataType_OBJECT 50
#define SODataV4_DataType_COMPLEX_VALUE 51
#define SODataV4_DataType_ENTITY_VALUE 52
#define SODataV4_DataType_LIST 60
#define SODataV4_DataType_DATA_VALUE_LIST 61
#define SODataV4_DataType_COMPLEX_VALUE_LIST 62
#define SODataV4_DataType_ENTITY_VALUE_LIST 63
#define SODataV4_DataType_DELTA_STREAM 64
#define SODataV4_DataType_PATH 80
#define SODataV4_DataType_PATH_EXPRESSION 81
#define SODataV4_DataType_ANNOTATION_PATH 82
#define SODataV4_DataType_STRUCTURAL_PATH 83
#define SODataV4_DataType_NAVIGATION_PATH 84
#define SODataV4_DataType_PROPERTY_PATH 85
#define SODataV4_DataType_TARGET_PATH 86
#define SODataV4_DataType_DYNAMIC_PATH 87
#define SODataV4_DataType_QUERY_ALIAS 90
#define SODataV4_DataType_QUERY_FILTER 91
#define SODataV4_DataType_QUERY_FUNCTION_CALL 92
#define SODataV4_DataType_QUERY_OPERATOR_CALL 93
/// @brief If this type is a derived simple, complex, entity or enum type, then the base type. Otherwise throw an exception.
///
///
/// @see `SODataV4_DataType`.`isDerived`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* baseType;
/// @brief A numeric code to represent this data type.
///
///
/// @see constants.
@property (nonatomic, readonly) SODataV4_int code;
/// @brief `true` if this type is a basic type (not a complex, entity, list or stream type).
///
///
@property (nonatomic, readonly) SODataV4_boolean isBasic;
/// @brief `true` if this type is a basic list type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isBasicList;
/// @brief `true` if this type is a calendar type.
///
/// Calendar types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`
@property (nonatomic, readonly) SODataV4_boolean isCalendar;
/// @brief `true` if this is a complex type.
///
///
/// @see `SODataV4_ComplexType`.
@property (nonatomic, readonly) SODataV4_boolean isComplex;
/// @brief `true` if this is a complex list type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isComplexList;
/// @brief `true` if this type is a derived simple, complex, entity or enum type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isDerived;
/// @brief `true` if this is an entity type.
///
///
/// @see `SODataV4_EntityType`.
@property (nonatomic, readonly) SODataV4_boolean isEntity;
/// @brief `true` if this is an entity list type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isEntityList;
/// @brief `true` if this type is an enum type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isEnum;
/// @brief `true` if this is an enum list type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isEnumList;
/// @brief `true` if this type is a geography type.
///
/// Geography types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`
@property (nonatomic, readonly) SODataV4_boolean isGeography;
/// @brief `true` if this type is a geometry type.
///
/// Geometry types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`
@property (nonatomic, readonly) SODataV4_boolean isGeometry;
/// @brief `true` if this type is a geospatial (geography/geometry) type.
///
/// Geospatial types are also basic types.
///
/// @see `SODataV4_DataType`.`isBasic`, `SODataV4_DataType`.`isGeography`, `SODataV4_DataType`.`isGeometry`.
@property (nonatomic, readonly) SODataV4_boolean isGeospatial;
/// @brief `true` if this type is a GUID type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isGuid;
/// @brief `true` if this is a list type.
///
///
/// @see `SODataV4_ListBase`.
@property (nonatomic, readonly) SODataV4_boolean isList;
/// @brief `true` if this type is a number type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isNumber;
/// @brief `true` if this type is a path type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isPath;
/// @brief `true` if this is a stream type.
///
///
/// @see `SODataV4_ByteStream`, `SODataV4_CharStream`.
@property (nonatomic, readonly) SODataV4_boolean isStream;
/// @brief `true` if this type is an unsigned type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isUnsigned;
/// @brief If this type is a list type, then the item type. Otherwise throw an exception.
///
///
/// @see `SODataV4_DataType`.`isList`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* itemType;
/// @brief The name of this data type.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief The `unknown` type.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* unknown;
@end
#endif

#ifdef import_SODataV4__DataType_private
#ifndef imported_SODataV4__DataType_private
#define imported_SODataV4__DataType_private
@interface SODataV4_DataType (private)
+ (nonnull SODataV4_DataType*) _new1 :(nonnull NSString*)p1 :(SODataV4_int)p2;
+ (nonnull SODataV4_DataType*) _new2 :(nonnull NSString*)p1 :(SODataV4_int)p2 :(nullable SODataV4_DataType*)p3;
@end
#endif
#endif

#ifdef import_SODataV4__DataType_internal
#ifndef imported_SODataV4__DataType_internal
#define imported_SODataV4__DataType_internal
@interface SODataV4_DataType (internal)
/// @internal
///
- (nullable SODataV4_DataType*) _base;
/// @internal
///
- (SODataV4_int) _code;
/// @internal
///
- (nullable SODataV4_DataType*) _item;
/// @internal
///
- (nonnull NSString*) _name;
+ (nonnull SODataV4_DataType*) getBasic :(SODataV4_int)code :(nonnull NSString*)name;
+ (nonnull SODataV4_DataType*) getList :(SODataV4_int)code :(nonnull SODataV4_DataType*)item;
/// @internal
///
- (void) set_base :(nullable SODataV4_DataType*)value;
/// @internal
///
- (void) set_code :(SODataV4_int)value;
/// @internal
///
- (void) set_item :(nullable SODataV4_DataType*)value;
/// @internal
///
- (void) set_name :(nonnull NSString*)value;
#define SODataV4_DataType_MAX_CODE 96
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataType* _base;
/// @internal
///
@property (nonatomic, readwrite) SODataV4_int _code;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataType* _item;
/// @internal
///
@property (nonatomic, readwrite, strong, nonnull) NSString* _name;
@end
#endif
#endif

#ifndef imported_SODataV4__DataTypeMap_Entry_public
#define imported_SODataV4__DataTypeMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_DataTypeMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_DataType* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataTypeMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_DataType*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_DataType*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* value;
@end
#endif

#ifndef imported_SODataV4__DataValue_public
#define imported_SODataV4__DataValue_public
/// @brief Abstract base class for wrapper classes that wrap basic data values as objects, as well as calendar values, geography values, geometry values, `SODataV4_ComplexValue`, `SODataV4_EntityValue` and `SODataV4_ListBase`.
///
///
/// @see `SODataV4_StringValue`, `SODataV4_BinaryValue`, `SODataV4_BooleanValue`, `SODataV4_CharValue`, `SODataV4_ByteValue`, `SODataV4_ShortValue`, `SODataV4_IntValue`, `SODataV4_LongValue`, `SODataV4_IntegerValue`, `SODataV4_DecimalValue`, `SODataV4_FloatValue`, `SODataV4_DoubleValue`, `SODataV4_UnsignedByte`, `SODataV4_UnsignedShort`, `SODataV4_EnumValue`, `SODataV4_GuidValue`, `SODataV4_LocalDate`, `SODataV4_LocalTime`, `SODataV4_LocalDateTime`, `SODataV4_GlobalDateTime`, `SODataV4_DayTimeDuration`, `SODataV4_YearMonthDuration`, `SODataV4_GeographyValue`, `SODataV4_GeometryValue`.
@interface SODataV4_DataValue : SODataV4_ObjectBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataValue*) new;
/// @internal
///
- (void) _init;
/// @return A clone of `value` if it is mutable, or `value` if it is immutable.
/// @param value Value to be cloned.
+ (nullable SODataV4_DataValue*) cloneMutable :(nullable SODataV4_DataValue*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_DataValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Represents an undefined data value (distinct from `nil`).
///
/// The `SODataV4_DataValue`.`dataType` of an undefined value is `SODataV4_DataType`.`unknown`.
+ (nonnull SODataV4_DataValue*) undefined;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief Represents an undefined data value (distinct from `nil`).
///
/// The `SODataV4_DataValue`.`dataType` of an undefined value is `SODataV4_DataType`.`unknown`.
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataValue* undefined;
@end
#endif

#ifndef imported_SODataV4__DataValueMap_Entry_public
#define imported_SODataV4__DataValueMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_DataValueMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_DataValue* _Nullable value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataValueMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nullable SODataV4_DataValue*)value;
/// @brief Map entry value.
///
///
- (nullable SODataV4_DataValue*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValue* value;
@end
#endif

#ifndef imported_SODataV4__DataVersion_public
#define imported_SODataV4__DataVersion_public
/// @brief Constant codes to represent [OData](http://odata.org) versions.
///
///
@interface SODataV4_DataVersion : SODataV4_ObjectBase
{
}
/// @return Version string, e.g. "4.0".
/// @param version Version number, e.g. 400.
+ (nonnull NSString*) asText :(SODataV4_int)version;
/// @brief Parse a version string to a version number.
///
///
/// @return Version number, e.g. 400.
/// @param version Version number in text form, e.g. "4.0".
+ (SODataV4_int) parse :(nonnull NSString*)version;
#define SODataV4_DataVersion_ODATA_V1 100
#define SODataV4_DataVersion_ODATA_V2 200
#define SODataV4_DataVersion_ODATA_V3 300
#define SODataV4_DataVersion_ODATA_V4 400
#define SODataV4_DataVersion_ODATA_V4_01 401
@end
#endif

#ifdef import_SODataV4__DateNumber_internal
#ifndef imported_SODataV4__DateNumber_internal
#define imported_SODataV4__DateNumber_public
/* internal */
@interface SODataV4_DateNumber : SODataV4_ObjectBase
{
}
+ (SODataV4_int) daysInMonth :(SODataV4_int)year :(SODataV4_int)month;
+ (SODataV4_long) fromFields :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day;
+ (nonnull SODataV4_LocalDate*) toLocalDate :(SODataV4_long)g;
@end
#endif
#endif

#ifdef import_SODataV4__DateTimeFormat_internal
#ifndef imported_SODataV4__DateTimeFormat_internal
#define imported_SODataV4__DateTimeFormat_public
/* internal */
@interface SODataV4_DateTimeFormat : SODataV4_ObjectBase
{
}
+ (void) append2 :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)x;
+ (void) append3 :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)x;
+ (void) append4 :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)y;
+ (void) dateAppend :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)y :(SODataV4_int)m :(SODataV4_int)d;
+ (SODataV4_char) digit :(SODataV4_int)n;
+ (void) nanoAppend :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)n;
+ (SODataV4_int) nanoLength :(SODataV4_int)n;
+ (void) timeAppend :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)h :(SODataV4_int)m :(SODataV4_int)s :(SODataV4_int)n;
+ (void) zoneAppend :(nonnull SODataV4_CharBuffer*)b :(SODataV4_int)z;
+ (SODataV4_int) zoneLength :(SODataV4_int)z;
@end
#endif
#endif

#ifdef import_SODataV4__DateTimeParser_internal
#ifndef imported_SODataV4__DateTimeParser_internal
#define imported_SODataV4__DateTimeParser_public
/* internal */
@interface SODataV4_DateTimeParser : SODataV4_ObjectBase
{
    @private NSString* _Nonnull kind_;
    @private NSString* _Nonnull text_;
    @private SODataV4_int index_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
- (void) assertDone;
- (void) assertNext :(SODataV4_char)c;
- (void) assertWord :(nonnull NSString*)word;
- (void) badValue;
+ (nonnull SODataV4_DateTimeParser*) getInstance :(nonnull NSString*)kind :(nonnull NSString*)text;
- (SODataV4_boolean) hasMore;
- (SODataV4_int) index;
- (nonnull NSString*) kind;
- (SODataV4_boolean) lookingAt :(SODataV4_char)c;
- (SODataV4_int) nextNumber :(SODataV4_int)minCount :(SODataV4_int)maxCount :(SODataV4_int)minValue :(SODataV4_int)maxValue;
- (SODataV4_int) nextNumberN;
- (SODataV4_int) nextNumberP;
- (SODataV4_int) nextNumberX :(SODataV4_int)minCount :(SODataV4_int)maxCount :(SODataV4_int)minValue :(SODataV4_int)maxValue :(SODataV4_boolean)getNanos;
- (nonnull NSString*) nextWord;
- (void) optionalSpace;
- (void) setIndex :(SODataV4_int)value;
- (void) setKind :(nonnull NSString*)value;
- (void) setText :(nonnull NSString*)value;
- (nonnull NSString*) text;
@property (nonatomic, readwrite) SODataV4_int index;
@property (nonatomic, readwrite, strong, nonnull) NSString* kind;
@property (nonatomic, readwrite, strong, nonnull) NSString* text;
@end
#endif
#endif

#ifdef import_SODataV4__DateTimeParser_private
#ifndef imported_SODataV4__DateTimeParser_private
#define imported_SODataV4__DateTimeParser_private
@interface SODataV4_DateTimeParser (private)
+ (nonnull SODataV4_DateTimeParser*) new;
+ (nonnull SODataV4_DateTimeParser*) _new1 :(nonnull NSString*)p1 :(SODataV4_int)p2 :(nonnull NSString*)p3;
@end
#endif
#endif

#ifndef imported_SODataV4__DayOfWeek_public
#define imported_SODataV4__DayOfWeek_public
/// @brief Constants to represent days of the week (Monday = 1 to Sunday = 7, using ISO 8601 conventions).
///
///
/// @see `SODataV4_LocalDate`.`dayOfWeek`, `SODataV4_LocalDateTime`.`dayOfWeek`, `SODataV4_GlobalDateTime`.`dayOfWeek`.
@interface SODataV4_DayOfWeek : SODataV4_ObjectBase
{
}
/// @return The English day name with starting capital letter.
/// @param day Day of week (Monday = 1 to Sunday = 7).
+ (nonnull NSString*) getName :(SODataV4_int)day;
/// @return The English day name (3 character abbreviation) with starting capital letter.
/// @param day Day of week (Monday = 1 to Sunday = 7).
+ (nonnull NSString*) getName3 :(SODataV4_int)day;
#define SODataV4_DayOfWeek_MONDAY 1
#define SODataV4_DayOfWeek_TUESDAY 2
#define SODataV4_DayOfWeek_WEDNESDAY 3
#define SODataV4_DayOfWeek_THURSDAY 4
#define SODataV4_DayOfWeek_FRIDAY 5
#define SODataV4_DayOfWeek_SATURDAY 6
#define SODataV4_DayOfWeek_SUNDAY 7
@end
#endif

#ifndef imported_SODataV4__EntityContainer_public
#define imported_SODataV4__EntityContainer_public
/// @brief Represents an [OData](http://odata.org) entity container.
///
///
@interface SODataV4_EntityContainer : SODataV4_ObjectBase
{
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private SODataV4_EntityContainer* _Nonnull baseContainer_;
    @private SODataV4_boolean isDefault_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_DataMethodMap* _Nonnull dataMethods_;
    @private SODataV4_EntitySetMap* _Nonnull entitySets_;
    @private SODataV4_EntitySetMap* _Nonnull singletons_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityContainer*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_EntityContainer`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_EntityContainer`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief The base container if this container extends another.
///
///
- (nonnull SODataV4_EntityContainer*) baseContainer;
/// @brief The data methods defined by this container.
///
///
- (nonnull SODataV4_DataMethodMap*) dataMethods;
/// @brief The entity sets defined by this container.
///
///
- (nonnull SODataV4_EntitySetMap*) entitySets;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_EntityContainer`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief Is this the default container within its defining schema?
///
///
- (SODataV4_boolean) isDefault;
/// @brief The local name of this container within its owning `SODataV4_DataSchema`, e.g. "MyContainer".
///
///
- (nonnull NSString*) localName;
/// @brief Synonym for `SODataV4_EntityContainer`.`localName`.
///
///
- (nonnull NSString*) name;
/// @brief The name of this set qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyContainer".
///
///
- (nonnull NSString*) qualifiedName;
/// @brief The base container if this container extends another.
///
///
- (void) setBaseContainer :(nonnull SODataV4_EntityContainer*)value;
/// @brief Is this the default container within its defining schema?
///
///
- (void) setIsDefault :(SODataV4_boolean)value;
/// @brief The local name of this container within its owning `SODataV4_DataSchema`, e.g. "MyContainer".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief The name of this set qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyContainer".
///
///
- (void) setQualifiedName :(nonnull NSString*)value;
/// @brief The singletons defined by this container.
///
///
- (nonnull SODataV4_EntitySetMap*) singletons;
/// @brief Obsolete. Use `SODataV4_EntityContainer`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_EntityContainer`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief The base container if this container extends another.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityContainer* baseContainer;
/// @brief The data methods defined by this container.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataMethodMap* dataMethods;
/// @brief The entity sets defined by this container.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* entitySets;
/// @brief Is this the default container within its defining schema?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isDefault;
/// @brief The local name of this container within its owning `SODataV4_DataSchema`, e.g. "MyContainer".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief Synonym for `SODataV4_EntityContainer`.`localName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief The name of this set qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyContainer".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief The singletons defined by this container.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* singletons;
@end
#endif

#ifndef imported_SODataV4__EntityContainerMap_Entry_public
#define imported_SODataV4__EntityContainerMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_EntityContainerMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_EntityContainer* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityContainerMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_EntityContainer*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_EntityContainer*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityContainer* value;
@end
#endif

#ifndef imported_SODataV4__EntityKey_public
#define imported_SODataV4__EntityKey_public
/// @brief Encapsulates an [OData](http://odata.org) entity key.
///
///
@interface SODataV4_EntityKey : SODataV4_ObjectBase
{
    @private SODataV4_DataValueMap* _Nonnull map_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityKey*) new;
/// @internal
///
- (void) _init;
/// @brief A map containing the key/value pairs for key properties.
///
///
- (nonnull SODataV4_DataValueMap*) map;
/// @brief A map containing the key/value pairs for key properties.
///
///
- (void) setMap :(nonnull SODataV4_DataValueMap*)value;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Set the value of a key property.
///
///
/// @return This key.
/// @param name Key property name.
/// @param value Key property value.
- (nonnull SODataV4_EntityKey*) with :(nonnull NSString*)name :(nullable SODataV4_DataValue*)value;
/// @brief Set the value of a key property.
///
///
/// @return This key.
/// @param property Key property.
/// @param value Key property value.
- (nonnull SODataV4_EntityKey*) withProperty :(nonnull SODataV4_Property*)property :(nullable SODataV4_DataValue*)value;
/// @brief A map containing the key/value pairs for key properties.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValueMap* map;
@end
#endif

#ifndef imported_SODataV4__EntitySet_public
#define imported_SODataV4__EntitySet_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) entity set.
///
/// Also used for OData `SODataV4_EntitySet`.`isSingleton` entities.
///
/// @see `DataService.createEntity`, `DataService.updateEntity`, `DataService.deleteEntity`, `DataService.getEntity`, `DataService.getEntityList`.
@interface SODataV4_EntitySet : SODataV4_ObjectBase
{
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private NSString* _Nonnull resourcePath_;
    @private NSString* _Nonnull targetPath_;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_int systemFlags_;
    @private SODataV4_EntityType* _Nonnull entityType_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_EntitySetMap* _Nonnull pathBindings_;
    @private SODataV4_SelectItemList* _Nonnull defaultSelect_;
    @private SODataV4_boolean isSingleton_;
    @private SODataV4_EntitySetMetrics* _Nonnull metrics_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntitySet*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_EntitySet`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_EntitySet`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EntitySet`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @brief List of default selection items for this entity set.
///
///
- (nonnull SODataV4_SelectItemList*) defaultSelect;
/// @brief Entity type for entities in this set.
///
///
- (nonnull SODataV4_EntityType*) entityType;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_EntitySet`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief Lookup an existing navigation property binding by name.
///
///
/// @return The bound entity set.
/// @param name Name of the property.
/// @see `SODataV4_EntitySet`.`pathBindings` and `SODataV4_EntitySetMap`.`get`, for looking up bindings that might not exist.
- (nonnull SODataV4_EntitySet*) getBinding :(nonnull NSString*)name;
/// @brief `true` if this set was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EntitySet`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @brief Does this entity set represent an OData singleton entity?
///
///
- (SODataV4_boolean) isSingleton;
/// @brief The local name of this set within its owning `SODataV4_EntityContainer`, e.g. "MyEntitySet".
///
///
- (nonnull NSString*) localName;
/// @brief Metrics for runtime use of this entity set.
///
///
- (nonnull SODataV4_EntitySetMetrics*) metrics;
/// @brief Synonym for `SODataV4_EntitySet`.`qualifiedName`.
///
///
- (nonnull NSString*) name;
/// @brief Map of bindings from navigation properties to entity sets.
///
///
- (nonnull SODataV4_EntitySetMap*) pathBindings;
/// @brief The name of this set qualified by its owning `SODataV4_EntityContainer` name, e.g. "MyContainer.MyEntitySet".
///
/// The Entity container prefix is omitted for the "default" entity container in the outermost schema.
- (nonnull NSString*) qualifiedName;
/// @brief The name of this set as it should be referenced in resource paths (e.g. localName for OData V4, qualifiedName for OData V2).
///
///
- (nonnull NSString*) resourcePath;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EntitySet`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief Entity type for entities in this set.
///
///
- (void) setEntityType :(nonnull SODataV4_EntityType*)value;
/// @brief `true` if this set was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EntitySet`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @brief Does this entity set represent an OData singleton entity?
///
///
- (void) setIsSingleton :(SODataV4_boolean)value;
/// @brief The local name of this set within its owning `SODataV4_EntityContainer`, e.g. "MyEntitySet".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief The name of this set qualified by its owning `SODataV4_EntityContainer` name, e.g. "MyContainer.MyEntitySet".
///
/// The Entity container prefix is omitted for the "default" entity container in the outermost schema.
- (void) setQualifiedName :(nonnull NSString*)value;
/// @brief The name of this set as it should be referenced in resource paths (e.g. localName for OData V4, qualifiedName for OData V2).
///
///
- (void) setResourcePath :(nonnull NSString*)value;
/// @internal
///
- (void) setSystemFlags :(SODataV4_int)value;
/// @brief The name of this set qualified by its owning `SODataV4_DataSchema` and `SODataV4_EntityContainer` names, e.g. "MySchema.MyContainer/MyEntitySet".
///
///
- (void) setTargetPath :(nonnull NSString*)value;
/// @internal
///
- (SODataV4_int) systemFlags;
/// @brief The name of this set qualified by its owning `SODataV4_DataSchema` and `SODataV4_EntityContainer` names, e.g. "MySchema.MyContainer/MyEntitySet".
///
///
- (nonnull NSString*) targetPath;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief The `undefined` value for EntitySet.
///
///
+ (nonnull SODataV4_EntitySet*) undefined;
/// @return `SODataV4_EntitySet`.`undefined` if `entitySet` is `nil`, otherwise return `entitySet`.
/// @param entitySet Entity set, or `nil`.
+ (nonnull SODataV4_EntitySet*) undefinedIfNull :(nullable SODataV4_EntitySet*)entitySet;
/// @brief Obsolete. Use `SODataV4_EntitySet`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_EntitySet`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EntitySet`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief List of default selection items for this entity set.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_SelectItemList* defaultSelect;
/// @brief Entity type for entities in this set.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityType* entityType;
/// @brief `true` if this set was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EntitySet`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief Does this entity set represent an OData singleton entity?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isSingleton;
/// @brief The local name of this set within its owning `SODataV4_EntityContainer`, e.g. "MyEntitySet".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief Metrics for runtime use of this entity set.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMetrics* metrics;
/// @brief Synonym for `SODataV4_EntitySet`.`qualifiedName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief Map of bindings from navigation properties to entity sets.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntitySetMap* pathBindings;
/// @brief The name of this set qualified by its owning `SODataV4_EntityContainer` name, e.g. "MyContainer.MyEntitySet".
///
/// The Entity container prefix is omitted for the "default" entity container in the outermost schema.
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief The name of this set as it should be referenced in resource paths (e.g. localName for OData V4, qualifiedName for OData V2).
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* resourcePath;
/// @internal
///
@property (nonatomic, readwrite) SODataV4_int systemFlags;
/// @brief The name of this set qualified by its owning `SODataV4_DataSchema` and `SODataV4_EntityContainer` names, e.g. "MySchema.MyContainer/MyEntitySet".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* targetPath;
/// @brief The `undefined` value for EntitySet.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntitySet* undefined;
@end
#endif

#ifdef import_SODataV4__EntitySet_private
#ifndef imported_SODataV4__EntitySet_private
#define imported_SODataV4__EntitySet_private
@interface SODataV4_EntitySet (private)
+ (nonnull SODataV4_EntitySet*) _new1 :(nonnull NSString*)p1 :(nonnull NSString*)p2 :(nonnull SODataV4_EntityType*)p3 :(nonnull NSString*)p4;
@end
#endif
#endif

#ifndef imported_SODataV4__EntitySetMap_Entry_public
#define imported_SODataV4__EntitySetMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_EntitySetMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_EntitySet* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntitySetMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_EntitySet*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_EntitySet*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntitySet* value;
@end
#endif

#ifndef imported_SODataV4__EntitySetMetrics_public
#define imported_SODataV4__EntitySetMetrics_public
/// @internal
///
@interface SODataV4_EntitySetMetrics : SODataV4_ObjectBase
{
    @private SODataV4_DataMetric* _Nonnull offlineExecuteQueryTime_;
    @private SODataV4_DataMetric* _Nonnull offlineQueryResultRows_;
    @private SODataV4_DataMetric* _Nonnull offlineCreateEntityTime_;
    @private SODataV4_DataMetric* _Nonnull offlineUpdateEntityTime_;
    @private SODataV4_DataMetric* _Nonnull offlineDeleteEntityTime_;
    @private SODataV4_DataMetric* _Nonnull onlineExecuteQueryTime_;
    @private SODataV4_DataMetric* _Nonnull onlineSelectEntityTime_;
    @private SODataV4_DataMetric* _Nonnull onlineQueryResultBytes_;
    @private SODataV4_DataMetric* _Nonnull onlineQueryResultRows_;
    @private SODataV4_DataMetric* _Nonnull onlineQueryResultBytes_gzip_;
    @private SODataV4_DataMetric* _Nonnull onlineCreateEntityTime_;
    @private SODataV4_DataMetric* _Nonnull onlineUpdateEntityTime_;
    @private SODataV4_DataMetric* _Nonnull onlineDeleteEntityTime_;
    @private SODataV4_DataMetric* _Nonnull onlineCreateLinkTime_;
    @private SODataV4_DataMetric* _Nonnull onlineUpdateLinkTime_;
    @private SODataV4_DataMetric* _Nonnull onlineDeleteLinkTime_;
    @private SODataV4_DataMetric* _Nonnull onlineHttpResponseTime_;
    @private SODataV4_DataMetric* _Nonnull onlineFollowedNextCount_;
    @private SODataV4_DataMetric* _Nonnull initialDownloadBytes_;
    @private SODataV4_DataMetric* _Nonnull initialDownloadBytes_gzip_;
    @private SODataV4_DataMetric* _Nonnull initialDownloadRows_;
    @private SODataV4_DataMetric* _Nonnull initialDownloadTime_;
    @private SODataV4_DataMetric* _Nonnull deltaDownloadBytes_;
    @private SODataV4_DataMetric* _Nonnull deltaDownloadBytes_gzip_;
    @private SODataV4_DataMetric* _Nonnull deltaDownloadRows_;
    @private SODataV4_DataMetric* _Nonnull deltaDownloadTime_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntitySetMetrics*) new;
/// @internal
///
- (void) _init;
/// @brief Metric for delta download bytes.
///
///
- (nonnull SODataV4_DataMetric*) deltaDownloadBytes;
/// @brief Metric for delta download bytes (gzip size).
///
///
- (nonnull SODataV4_DataMetric*) deltaDownloadBytes_gzip;
/// @brief Metric for delta download rows.
///
///
- (nonnull SODataV4_DataMetric*) deltaDownloadRows;
/// @brief Metric for delta download time.
///
///
- (nonnull SODataV4_DataMetric*) deltaDownloadTime;
/// @brief Metric for initial download bytes.
///
///
- (nonnull SODataV4_DataMetric*) initialDownloadBytes;
/// @brief Metric for initial download bytes (gzip size).
///
///
- (nonnull SODataV4_DataMetric*) initialDownloadBytes_gzip;
/// @brief Metric for initial download rows.
///
///
- (nonnull SODataV4_DataMetric*) initialDownloadRows;
/// @brief Metric for initial download time.
///
///
- (nonnull SODataV4_DataMetric*) initialDownloadTime;
/// @brief Metric for time spent creating entities in the local database (except during download).
///
///
- (nonnull SODataV4_DataMetric*) offlineCreateEntityTime;
/// @brief Metric for time spent deleting entities from the local database (except during download).
///
///
- (nonnull SODataV4_DataMetric*) offlineDeleteEntityTime;
/// @brief Metric for time spent querying entities from the local database (except during download).
///
///
- (nonnull SODataV4_DataMetric*) offlineExecuteQueryTime;
/// @brief Metric for result rows querying entities from the local database (except during download).
///
///
- (nonnull SODataV4_DataMetric*) offlineQueryResultRows;
/// @brief Metric for time spent updating entities in the local database (except during download).
///
///
- (nonnull SODataV4_DataMetric*) offlineUpdateEntityTime;
/// @brief Metric for time spent creating entities in the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineCreateEntityTime;
/// @brief Metric for time spent creating links in the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineCreateLinkTime;
/// @brief Metric for time spent deleting entities from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineDeleteEntityTime;
/// @brief Metric for time spent deleting links in the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineDeleteLinkTime;
/// @brief Metric for time spent executing queries against the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineExecuteQueryTime;
/// @brief Metric for number of query next-links followed from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineFollowedNextCount;
/// @brief Metric for time spent fetching query results from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineHttpResponseTime;
/// @brief Metric for byte count fetching query results from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineQueryResultBytes;
/// @brief Metric for byte count (before gzip decompression) fetching query results from the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineQueryResultBytes_gzip;
/// @brief Metric for result rows executing queries against the backend system.
///
/// For queries returning expanded children, only the parent entities are counted by this metric.
- (nonnull SODataV4_DataMetric*) onlineQueryResultRows;
/// @brief Metric for time spent loading entities (using primary key) against the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineSelectEntityTime;
/// @brief Metric for time spent updating entities in the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineUpdateEntityTime;
/// @brief Metric for time spent updating links in the backend system.
///
///
- (nonnull SODataV4_DataMetric*) onlineUpdateLinkTime;
/// @brief Metric for delta download bytes.
///
///
- (void) setDeltaDownloadBytes :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for delta download bytes (gzip size).
///
///
- (void) setDeltaDownloadBytes_gzip :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for delta download rows.
///
///
- (void) setDeltaDownloadRows :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for delta download time.
///
///
- (void) setDeltaDownloadTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for initial download bytes.
///
///
- (void) setInitialDownloadBytes :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for initial download bytes (gzip size).
///
///
- (void) setInitialDownloadBytes_gzip :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for initial download rows.
///
///
- (void) setInitialDownloadRows :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for initial download time.
///
///
- (void) setInitialDownloadTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent creating entities in the local database (except during download).
///
///
- (void) setOfflineCreateEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent deleting entities from the local database (except during download).
///
///
- (void) setOfflineDeleteEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent querying entities from the local database (except during download).
///
///
- (void) setOfflineExecuteQueryTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for result rows querying entities from the local database (except during download).
///
///
- (void) setOfflineQueryResultRows :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent updating entities in the local database (except during download).
///
///
- (void) setOfflineUpdateEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent creating entities in the backend system.
///
///
- (void) setOnlineCreateEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent creating links in the backend system.
///
///
- (void) setOnlineCreateLinkTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent deleting entities from the backend system.
///
///
- (void) setOnlineDeleteEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent deleting links in the backend system.
///
///
- (void) setOnlineDeleteLinkTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent executing queries against the backend system.
///
///
- (void) setOnlineExecuteQueryTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for number of query next-links followed from the backend system.
///
///
- (void) setOnlineFollowedNextCount :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent fetching query results from the backend system.
///
///
- (void) setOnlineHttpResponseTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for byte count fetching query results from the backend system.
///
///
- (void) setOnlineQueryResultBytes :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for byte count (before gzip decompression) fetching query results from the backend system.
///
///
- (void) setOnlineQueryResultBytes_gzip :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for result rows executing queries against the backend system.
///
/// For queries returning expanded children, only the parent entities are counted by this metric.
- (void) setOnlineQueryResultRows :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent loading entities (using primary key) against the backend system.
///
///
- (void) setOnlineSelectEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent updating entities in the backend system.
///
///
- (void) setOnlineUpdateEntityTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for time spent updating links in the backend system.
///
///
- (void) setOnlineUpdateLinkTime :(nonnull SODataV4_DataMetric*)value;
/// @brief Metric for delta download bytes.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* deltaDownloadBytes;
/// @brief Metric for delta download bytes (gzip size).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* deltaDownloadBytes_gzip;
/// @brief Metric for delta download rows.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* deltaDownloadRows;
/// @brief Metric for delta download time.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* deltaDownloadTime;
/// @brief Metric for initial download bytes.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* initialDownloadBytes;
/// @brief Metric for initial download bytes (gzip size).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* initialDownloadBytes_gzip;
/// @brief Metric for initial download rows.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* initialDownloadRows;
/// @brief Metric for initial download time.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* initialDownloadTime;
/// @brief Metric for time spent creating entities in the local database (except during download).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* offlineCreateEntityTime;
/// @brief Metric for time spent deleting entities from the local database (except during download).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* offlineDeleteEntityTime;
/// @brief Metric for time spent querying entities from the local database (except during download).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* offlineExecuteQueryTime;
/// @brief Metric for result rows querying entities from the local database (except during download).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* offlineQueryResultRows;
/// @brief Metric for time spent updating entities in the local database (except during download).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* offlineUpdateEntityTime;
/// @brief Metric for time spent creating entities in the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineCreateEntityTime;
/// @brief Metric for time spent creating links in the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineCreateLinkTime;
/// @brief Metric for time spent deleting entities from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineDeleteEntityTime;
/// @brief Metric for time spent deleting links in the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineDeleteLinkTime;
/// @brief Metric for time spent executing queries against the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineExecuteQueryTime;
/// @brief Metric for number of query next-links followed from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineFollowedNextCount;
/// @brief Metric for time spent fetching query results from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineHttpResponseTime;
/// @brief Metric for byte count fetching query results from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineQueryResultBytes;
/// @brief Metric for byte count (before gzip decompression) fetching query results from the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineQueryResultBytes_gzip;
/// @brief Metric for result rows executing queries against the backend system.
///
/// For queries returning expanded children, only the parent entities are counted by this metric.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineQueryResultRows;
/// @brief Metric for time spent loading entities (using primary key) against the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineSelectEntityTime;
/// @brief Metric for time spent updating entities in the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineUpdateEntityTime;
/// @brief Metric for time spent updating links in the backend system.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataMetric* onlineUpdateLinkTime;
@end
#endif

#ifndef imported_SODataV4__EntityStream_public
#define imported_SODataV4__EntityStream_public
/// @brief A stream of entity values.
///
///
/// @see `DataService.entityStream`, `SODataV4_DeltaStream`.
@interface SODataV4_EntityStream : SODataV4_ObjectBase
{
    @private SODataV4_DeltaStream* _Nonnull deltaStream_;
    @private SODataV4_EntityValue* _Nullable nextEntity;
}
- (nonnull id) init;
/// @internal
///
- (void) _init :(nonnull SODataV4_DeltaStream*)deltaStream;
/// @brief Close this stream and release all associated resources, without checking first that the end of stream has been reached.
///
///
/// @see `SODataV4_EntityStream`.`close`.
- (void) abort;
/// @brief Close this stream and release all associated resources, checking first that the end of stream has been reached.
///
/// Can safely be called even if the stream was previously closed.
/// If a delta link was encountered before the stream was closed, it will be available via the `SODataV4_EntityStream`.`deltaLink` property only after the stream is closed.
/// If a next link was encountered before the stream was closed, it will be available via the `SODataV4_EntityStream`.`nextLink` property only after the stream is closed.
///
/// @see `SODataV4_EntityStream`.`abort`.
- (void) close;
/// @brief The delta-link (if any) that was encountered when `SODataV4_EntityStream`.`next` was called repeatedly until end of stream and then `SODataV4_EntityStream`.`close` was called, otherwise `nil`.
///
///
- (nullable NSString*) deltaLink;
/// @return True If this stream has not been `SODataV4_EntityStream`.`close` and has a next entity value. Otherwise return `false`.
///
- (SODataV4_boolean) hasNext;
/// @brief Has `SODataV4_EntityStream`.`close` been called?
///
///
- (SODataV4_boolean) isClosed;
/// @return The next entity value in this stream.
/// Only call this if a previous call to `SODataV4_EntityStream`.`hasNext` returned `true`.
- (nonnull SODataV4_EntityValue*) next;
/// @brief The next-link (if any) that was encountered when `SODataV4_EntityStream`.`next` was called repeatedly until end of stream and then `SODataV4_EntityStream`.`close` was called, otherwise `nil`.
///
///
- (nullable NSString*) nextLink;
/// @brief The read-link (if any) that was encountered when `SODataV4_EntityStream`.`next` was called repeatedly until end of stream and then `SODataV4_EntityStream`.`close` was called, otherwise `nil`.
///
///
- (nullable NSString*) readLink;
/// @brief The delta-link (if any) that was encountered when `SODataV4_EntityStream`.`next` was called repeatedly until end of stream and then `SODataV4_EntityStream`.`close` was called, otherwise `nil`.
///
///
@property (nonatomic, readonly, strong, nullable) NSString* deltaLink;
/// @brief Has `SODataV4_EntityStream`.`close` been called?
///
///
@property (nonatomic, readonly) SODataV4_boolean isClosed;
/// @brief The next-link (if any) that was encountered when `SODataV4_EntityStream`.`next` was called repeatedly until end of stream and then `SODataV4_EntityStream`.`close` was called, otherwise `nil`.
///
///
@property (nonatomic, readonly, strong, nullable) NSString* nextLink;
/// @brief The read-link (if any) that was encountered when `SODataV4_EntityStream`.`next` was called repeatedly until end of stream and then `SODataV4_EntityStream`.`close` was called, otherwise `nil`.
///
///
@property (nonatomic, readonly, strong, nullable) NSString* readLink;
@end
#endif

#ifdef import_SODataV4__EntityStream_private
#ifndef imported_SODataV4__EntityStream_private
#define imported_SODataV4__EntityStream_private
@interface SODataV4_EntityStream (private)
- (nonnull SODataV4_DeltaStream*) deltaStream;
- (void) setDeltaStream :(nonnull SODataV4_DeltaStream*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DeltaStream* deltaStream;
@end
#endif
#endif

#ifdef import_SODataV4__EntityStream_internal
#ifndef imported_SODataV4__EntityStream_internal
#define imported_SODataV4__EntityStream_internal
@interface SODataV4_EntityStream (internal)
+ (nonnull SODataV4_EntityStream*) new :(nonnull SODataV4_DeltaStream*)deltaStream;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityTypeMap_Entry_public
#define imported_SODataV4__EntityTypeMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_EntityTypeMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_EntityType* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityTypeMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_EntityType*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_EntityType*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityType* value;
@end
#endif

#ifndef imported_SODataV4__EntityValueMap_Entry_public
#define imported_SODataV4__EntityValueMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_EntityValueMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_EntityValue* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityValueMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_EntityValue*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_EntityValue*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityValue* value;
@end
#endif

#ifndef imported_SODataV4__EnumTypeMap_Entry_public
#define imported_SODataV4__EnumTypeMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_EnumTypeMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_EnumType* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EnumTypeMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_EnumType*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_EnumType*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EnumType* value;
@end
#endif

#ifndef imported_SODataV4__EnumValueMap_Entry_public
#define imported_SODataV4__EnumValueMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_EnumValueMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_EnumValue* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EnumValueMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_EnumValue*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_EnumValue*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EnumValue* value;
@end
#endif

#ifndef imported_SODataV4__ErrorResponse_public
#define imported_SODataV4__ErrorResponse_public
/// @brief Encapsulates an [OData](http://odata.org) error response.
///
///
@interface SODataV4_ErrorResponse : SODataV4_ObjectBase
{
    @private NSString* _Nonnull code_;
    @private NSString* _Nonnull message_;
    @private NSString* _Nullable language_;
    @private NSString* _Nullable target_;
    @private SODataV4_ErrorResponseList* _Nonnull details_;
    @private NSString* _Nullable innerDetails_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ErrorResponse*) new;
/// @internal
///
- (void) _init;
/// @brief A service-defined code for the error.
///
///
- (nonnull NSString*) code;
/// @brief Optional additional details about the error.
///
///
- (nonnull SODataV4_ErrorResponseList*) details;
/// @brief Optional service specific debugging information that might assist a service implementer in determining the cause of an error.
///
/// This would not usually be returned by a production service. The service might need to be configured in a test or debug mode
/// before it will return inner error information.
- (nullable NSString*) innerDetails;
/// @brief Optionally indicates an [RFC 5646](http://tools.ietf.org/html/rfc5646) language code for the error message.
///
///
- (nullable NSString*) language;
/// @brief A human-readable, language-dependent message describing the error.
///
///
- (nonnull NSString*) message;
/// @brief A service-defined code for the error.
///
///
- (void) setCode :(nonnull NSString*)value;
/// @brief Optional additional details about the error.
///
///
- (void) setDetails :(nonnull SODataV4_ErrorResponseList*)value;
/// @brief Optional service specific debugging information that might assist a service implementer in determining the cause of an error.
///
/// This would not usually be returned by a production service. The service might need to be configured in a test or debug mode
/// before it will return inner error information.
- (void) setInnerDetails :(nullable NSString*)value;
/// @brief Optionally indicates an [RFC 5646](http://tools.ietf.org/html/rfc5646) language code for the error message.
///
///
- (void) setLanguage :(nullable NSString*)value;
/// @brief A human-readable, language-dependent message describing the error.
///
///
- (void) setMessage :(nonnull NSString*)value;
/// @brief Optionally indicates the target of the error.
///
///
- (void) setTarget :(nullable NSString*)value;
/// @brief Optionally indicates the target of the error.
///
///
- (nullable NSString*) target;
/// @brief A service-defined code for the error.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* code;
/// @brief Optional additional details about the error.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ErrorResponseList* details;
/// @brief Optional service specific debugging information that might assist a service implementer in determining the cause of an error.
///
/// This would not usually be returned by a production service. The service might need to be configured in a test or debug mode
/// before it will return inner error information.
@property (nonatomic, readwrite, strong, nullable) NSString* innerDetails;
/// @brief Optionally indicates an [RFC 5646](http://tools.ietf.org/html/rfc5646) language code for the error message.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* language;
/// @brief A human-readable, language-dependent message describing the error.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* message;
/// @brief Optionally indicates the target of the error.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* target;
@end
#endif

#ifndef imported_SODataV4__ExpandItem_public
#define imported_SODataV4__ExpandItem_public
/// @brief Encapsulates an [OData](http://odata.org) expand item.
///
/// An expand item indicates a property (or expression) that is used in the $expand system query option.
///
/// @see `SODataV4_DataQuery`.`expandItems`.
@interface SODataV4_ExpandItem : SODataV4_ObjectBase
{
    @private SODataV4_DataPath* _Nonnull path_;
    @private SODataV4_DataQuery* _Nullable query_;
    @private SODataV4_boolean isHidden_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ExpandItem*) new;
/// @internal
///
- (void) _init;
/// @return `SODataV4_ExpandItem`.`query` is it is non-null, otherwise a new `SODataV4_DataQuery`.
///
- (nonnull SODataV4_DataQuery*) getRequiredQuery;
/// @brief Was this expand item added for internal use
///
/// (e.g. needed for server-side query processing, but not requested by client).
- (SODataV4_boolean) isHidden;
/// @return A new expand item for the specified property.
/// @param item Item to be expanded.
+ (nonnull SODataV4_ExpandItem*) of :(nonnull SODataV4_PropertyPath*)item;
/// @brief A path to be expanded in the query results.
///
///
- (nonnull SODataV4_DataPath*) path;
/// @brief A query to configure the expansion (including nested expands).
///
///
- (nullable SODataV4_DataQuery*) query;
/// @brief Was this expand item added for internal use
///
/// (e.g. needed for server-side query processing, but not requested by client).
- (void) setIsHidden :(SODataV4_boolean)value;
/// @brief A path to be expanded in the query results.
///
///
- (void) setPath :(nonnull SODataV4_DataPath*)value;
/// @brief A query to configure the expansion (including nested expands).
///
///
- (void) setQuery :(nullable SODataV4_DataQuery*)value;
/// @brief If this expand item references a simple property path, then return the property. Otherwise return `nil`.
///
///
/// @return The property to be expanded, or `nil`.
- (nullable SODataV4_Property*) toProperty;
/// @brief If this expand item references a simple property path, then return the property. Otherwise throw an exception.
///
///
/// @return The property to be selected.
/// @throw `SODataV4_UndefinedException` if this select item does not reference a simple property path.
- (nonnull SODataV4_Property*) toRequiredProperty;
/// @return A string representation of this expand item.
///
- (nonnull NSString*) toString;
/// @brief Set the query of this expand item.
///
///
/// @return This query.
/// @param query Data query.
- (nonnull SODataV4_ExpandItem*) withQuery :(nonnull SODataV4_DataQuery*)query;
/// @brief Was this expand item added for internal use
///
/// (e.g. needed for server-side query processing, but not requested by client).
@property (nonatomic, readwrite) SODataV4_boolean isHidden;
/// @brief A path to be expanded in the query results.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataPath* path;
/// @brief A query to configure the expansion (including nested expands).
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataQuery* query;
@end
#endif

#ifdef import_SODataV4__ExpandItem_private
#ifndef imported_SODataV4__ExpandItem_private
#define imported_SODataV4__ExpandItem_private
@interface SODataV4_ExpandItem (private)
+ (nonnull SODataV4_ExpandItem*) _new1 :(nonnull SODataV4_DataPath*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__HttpDateTime_public
#define imported_SODataV4__HttpDateTime_public
/// @internal
///
@interface SODataV4_HttpDateTime : SODataV4_ObjectBase
{
    @private SODataV4_int _year;
    @private SODataV4_byte _month;
    @private SODataV4_byte _day;
    @private SODataV4_byte _hour;
    @private SODataV4_byte _minute;
    @private SODataV4_byte _second;
    @private SODataV4_short _offset;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Day field of date (1 to 31).
///
///
- (SODataV4_int) day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
- (SODataV4_int) dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
- (SODataV4_int) dayOfYear;
/// @brief Hour field of time (0 to 23).
///
///
- (SODataV4_int) hour;
/// @brief Minute field of time (0 to 59).
///
///
- (SODataV4_int) minute;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
- (SODataV4_int) month;
/// @brief Creates an instance of HTTP date/time.
///
///
/// @return The HTTP date/time.
/// @param year The year field (0 to 9999).
/// @param month The month field (1 to 12).
/// @param day The day field (1 to 31).
/// @param hour The hour field (0 to 23).
/// @param minute The minute field (0 to 59).
/// @param second The second field (0 to 59).
+ (nonnull SODataV4_HttpDateTime*) of :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second;
/// @return The specified global date/time value converted to an HTTP date/time.
/// @param value Global date/timne value.
+ (nonnull SODataV4_HttpDateTime*) ofGlobal :(nonnull SODataV4_GlobalDateTime*)value;
/// @internal
///
+ (nullable SODataV4_HttpDateTime*) parse :(nonnull NSString*)text;
/// @brief Parses the string representation of HTTP date/time.
///
///
/// @return The HTTP date/time or `nil` if parsing failed.
/// @param text The text to be parsed.
/// @param fix (optional) True if only RFC 7231's IMF-fixdate format should be permitted.
+ (nullable SODataV4_HttpDateTime*) parse :(nonnull NSString*)text :(SODataV4_boolean)fix;
/// @brief Second field of time (0 to 59).
///
///
- (SODataV4_int) second;
/// @return This value converted to a global date and time.
///
- (nonnull SODataV4_GlobalDateTime*) toGlobal;
/// @brief Returns the string representation in RFC 7231's IMF-fixdate format.
///
///
/// @return The string representation.
/// @see [RFC 7231](https://tools.ietf.org/html/rfc7231#page-65).
- (nonnull NSString*) toString;
/// @brief Year field of date.
///
///
- (SODataV4_int) year;
/// @brief Day field of date (1 to 31).
///
///
@property (nonatomic, readonly) SODataV4_int day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
@property (nonatomic, readonly) SODataV4_int dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
@property (nonatomic, readonly) SODataV4_int dayOfYear;
/// @brief Hour field of time (0 to 23).
///
///
@property (nonatomic, readonly) SODataV4_int hour;
/// @brief Minute field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int minute;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
@property (nonatomic, readonly) SODataV4_int month;
/// @brief Second field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int second;
/// @brief Year field of date.
///
///
@property (nonatomic, readonly) SODataV4_int year;
@end
#endif

#ifdef import_SODataV4__HttpDateTime_private
#ifndef imported_SODataV4__HttpDateTime_private
#define imported_SODataV4__HttpDateTime_private
@interface SODataV4_HttpDateTime (private)
+ (nonnull SODataV4_HttpDateTime*) new;
+ (SODataV4_int) parseMonth :(nonnull NSString*)text;
+ (SODataV4_int) parseWeekday :(nonnull NSString*)text;
- (nonnull NSString*) toString02 :(SODataV4_int)value;
- (nonnull NSString*) toString04 :(SODataV4_int)value;
+ (nonnull SODataV4_HttpDateTime*) _new1 :(SODataV4_byte)p1 :(SODataV4_byte)p2 :(SODataV4_byte)p3 :(SODataV4_byte)p4 :(SODataV4_byte)p5 :(SODataV4_int)p6;
@end
#endif
#endif

#ifdef import_SODataV4__LoginCredentials_internal
#ifndef imported_SODataV4__LoginCredentials_internal
#define imported_SODataV4__LoginCredentials_public
/* internal */
/// @brief Contains a username and password to be used for authentication.
///
///
@interface SODataV4_LoginCredentials : SODataV4_ObjectBase
{
    @private NSString* _Nonnull username_;
    @private NSString* _Nonnull password_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_LoginCredentials*) new;
/// @internal
///
- (void) _init;
/// @return Credentials for HTTP or HTTPS basic authentication.
/// @param username Username credential.
/// @param password Password credential.
+ (nonnull SODataV4_LoginCredentials*) getBasic :(nonnull NSString*)username :(nonnull NSString*)password;
/// @brief The password for authentication.
///
///
- (nonnull NSString*) password;
/// @brief The password for authentication.
///
///
- (void) setPassword :(nonnull NSString*)value;
/// @brief The username for authentication.
///
///
- (void) setUsername :(nonnull NSString*)value;
/// @brief The username for authentication.
///
///
- (nonnull NSString*) username;
/// @brief The password for authentication.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* password;
/// @brief The username for authentication.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* username;
@end
#endif
#endif

#ifdef import_SODataV4__LoginCredentials_private
#ifndef imported_SODataV4__LoginCredentials_private
#define imported_SODataV4__LoginCredentials_private
@interface SODataV4_LoginCredentials (private)
+ (nonnull SODataV4_LoginCredentials*) _new1 :(nonnull NSString*)p1 :(nonnull NSString*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__MapBase_public
#define imported_SODataV4__MapBase_public
/// @brief Base class for strongly-typed maps.
///
///
@interface SODataV4_MapBase : SODataV4_ObjectBase
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_MapBase*) new;
/// @internal
///
- (void) _init;
/// @brief Remove all entries from this map.
///
///
- (void) clear;
/// @brief `true` if this map contains no entries.
///
///
- (SODataV4_boolean) isEmpty;
/// @brief The number of entries in this map.
///
///
- (SODataV4_int) size;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief The underlying untyped map. Use with care, avoiding the addition of entries with an incorrect key or value type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @brief `true` if this map contains no entries.
///
///
@property (nonatomic, readonly) SODataV4_boolean isEmpty;
/// @brief The number of entries in this map.
///
///
@property (nonatomic, readonly) SODataV4_int size;
/// @brief The underlying untyped map. Use with care, avoiding the addition of entries with an incorrect key or value type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifndef imported_SODataV4__MonthOfYear_public
#define imported_SODataV4__MonthOfYear_public
/// @brief Constants to represent months of the year.
///
///
/// @see `SODataV4_LocalDate`.`month`, `SODataV4_LocalDateTime`.`month`, `SODataV4_GlobalDateTime`.`month`.
@interface SODataV4_MonthOfYear : SODataV4_ObjectBase
{
}
/// @return The English month name with starting capital letter.
/// @param month Month of year (January = 1 to December = 12).
+ (nonnull NSString*) getName :(SODataV4_int)month;
/// @return The English month name (3 character abbreviation) with starting capital letter.
/// @param month Month of year (January = 1 to December = 12).
+ (nonnull NSString*) getName3 :(SODataV4_int)month;
#define SODataV4_MonthOfYear_JANUARY 1
#define SODataV4_MonthOfYear_FEBRUARY 2
#define SODataV4_MonthOfYear_MARCH 3
#define SODataV4_MonthOfYear_APRIL 4
#define SODataV4_MonthOfYear_MAY 5
#define SODataV4_MonthOfYear_JUNE 6
#define SODataV4_MonthOfYear_JULY 7
#define SODataV4_MonthOfYear_AUGUST 8
#define SODataV4_MonthOfYear_SEPTEMBER 9
#define SODataV4_MonthOfYear_OCTOBER 10
#define SODataV4_MonthOfYear_NOVEMBER 11
#define SODataV4_MonthOfYear_DECEMBER 12
@end
#endif

#ifndef imported_SODataV4__ObjectMap_Entry_public
#define imported_SODataV4__ObjectMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_ObjectMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private NSObject* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ObjectMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull NSObject*)value;
/// @brief Map entry value.
///
///
- (nonnull NSObject*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSObject* value;
@end
#endif

#ifndef imported_SODataV4__Parameter_public
#define imported_SODataV4__Parameter_public
/// @brief Encapsulates an [OData](http://odata.org) parameter.
///
///
/// @see `SODataV4_DataMethod`, `SODataV4_DataMethodCall`.
@interface SODataV4_Parameter : SODataV4_ObjectBase
{
    @private SODataV4_int flags_;
    @private NSString* _Nonnull name_;
    @private SODataV4_DataType* _Nonnull type_;
    @private SODataV4_int mode_;
    @private SODataV4_DataValue* _Nullable value_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_boolean isUnicode_;
    @private SODataV4_int minLength_;
    @private SODataV4_int maxLength_;
    @private SODataV4_int precision_;
    @private SODataV4_int scale_;
    @private SODataV4_int srid_;
    @private SODataV4_boolean isNullable_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Parameter*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_Parameter`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_Parameter`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_Parameter`.`minLength`, `SODataV4_Parameter`.`maxLength`.
- (SODataV4_boolean) fixedLength;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_Parameter`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief `true` if this item is nullable.
///
///
- (SODataV4_boolean) isNullable;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (SODataV4_boolean) isUnicode;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) minLength;
/// @brief Mode of the parameter.
///
///
/// @see [constants](#constants).
- (SODataV4_int) mode;
/// @brief Name of the parameter.
///
///
- (nonnull NSString*) name;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (SODataV4_int) precision;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (SODataV4_int) scale;
/// @brief `true` if this item is nullable.
///
///
- (void) setIsNullable :(SODataV4_boolean)value;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (void) setIsUnicode :(SODataV4_boolean)value;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMaxLength :(SODataV4_int)value;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMinLength :(SODataV4_int)value;
/// @brief Mode of the parameter.
///
///
/// @see [constants](#constants).
- (void) setMode :(SODataV4_int)value;
/// @brief Name of the parameter.
///
///
- (void) setName :(nonnull NSString*)value;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (void) setPrecision :(SODataV4_int)value;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (void) setScale :(SODataV4_int)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (void) setSrid :(SODataV4_int)value;
/// @brief Type of the parameter.
///
///
- (void) setType :(nonnull SODataV4_DataType*)value;
/// @brief Value of the parameter.
///
///
/// @see `SODataV4_DataMethod`.`parameters` (formal), `SODataV4_DataMethodCall`.`parameters` (actual).
- (void) setValue :(nullable SODataV4_DataValue*)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (SODataV4_int) srid;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Type of the parameter.
///
///
- (nonnull SODataV4_DataType*) type;
/// @brief Value of the parameter.
///
///
/// @see `SODataV4_DataMethod`.`parameters` (formal), `SODataV4_DataMethodCall`.`parameters` (actual).
- (nullable SODataV4_DataValue*) value;
#define SODataV4_Parameter_MODE_IN 1
#define SODataV4_Parameter_MODE_OUT 2
#define SODataV4_Parameter_MODE_IN_OUT 3
/// @brief Obsolete. Use `SODataV4_Parameter`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_Parameter`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_Parameter`.`minLength`, `SODataV4_Parameter`.`maxLength`.
@property (nonatomic, readonly) SODataV4_boolean fixedLength;
/// @brief `true` if this item is nullable.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isNullable;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
@property (nonatomic, readwrite) SODataV4_boolean isUnicode;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int minLength;
/// @brief Mode of the parameter.
///
///
/// @see [constants](#constants).
@property (nonatomic, readwrite) SODataV4_int mode;
/// @brief Name of the parameter.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* name;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
@property (nonatomic, readwrite) SODataV4_int precision;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
@property (nonatomic, readwrite) SODataV4_int scale;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
@property (nonatomic, readwrite) SODataV4_int srid;
/// @brief Type of the parameter.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* type;
/// @brief Value of the parameter.
///
///
/// @see `SODataV4_DataMethod`.`parameters` (formal), `SODataV4_DataMethodCall`.`parameters` (actual).
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValue* value;
@end
#endif

#ifdef import_SODataV4__Parameter_internal
#ifndef imported_SODataV4__Parameter_internal
#define imported_SODataV4__Parameter_internal
@interface SODataV4_Parameter (internal)
- (SODataV4_int) flags;
- (void) setFlags :(SODataV4_int)value;
@property (nonatomic, readwrite) SODataV4_int flags;
@end
#endif
#endif

#ifndef imported_SODataV4__PathAnnotations_public
#define imported_SODataV4__PathAnnotations_public
/// @brief Annotations that are associated with a CSDL target path that is a child of a CSDL model element.
///
///
@interface SODataV4_PathAnnotations : SODataV4_ObjectBase
{
    @private SODataV4_DataPath* _Nonnull path_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_PathAnnotations*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_PathAnnotations`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_PathAnnotations`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_PathAnnotations`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief CSDL target path.
///
///
- (nonnull SODataV4_DataPath*) path;
/// @brief CSDL target path.
///
///
- (void) setPath :(nonnull SODataV4_DataPath*)value;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Obsolete. Use `SODataV4_PathAnnotations`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_PathAnnotations`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief CSDL target path.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataPath* path;
@end
#endif

#ifndef imported_SODataV4__PathAnnotationsMap_Entry_public
#define imported_SODataV4__PathAnnotationsMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_PathAnnotationsMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_PathAnnotations* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_PathAnnotationsMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_PathAnnotations*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_PathAnnotations*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PathAnnotations* value;
@end
#endif

#ifndef imported_SODataV4__PropertyMap_Entry_public
#define imported_SODataV4__PropertyMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_PropertyMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_Property* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_PropertyMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_Property*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_Property*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Property* value;
@end
#endif

#ifndef imported_SODataV4__QueryFunction_public
#define imported_SODataV4__QueryFunction_public
/// @brief Represents a [OData](http://odata.org) query function.
///
/// Query functions are typically used within `SODataV4_DataQuery`.`filter`.
/// `SODataV4_QueryFunctionCall` can be constructed using static calls on `SODataV4_QueryFunction` or, more conveniently, by chained calls on `SODataV4_QueryValue`.
///
/// 
/// #### Example using proxy classes (with QueryFunction static calls)
/// 
/// ```` oc
/// - (void) queryFunctionExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[SODataV4_QueryFunction contains:[SODataV4_QueryFunction toLower:Customer.address]:[SODataV4_StringValue of:@"king"]]];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
/// }
/// ````
/// 
/// #### Example using proxy classes (with QueryValue chained calls)
/// 
/// ```` oc
/// - (void) queryValueFunctionExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[[Customer.address toLower] contains:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"king"]))]];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
/// }
/// ````
@interface SODataV4_QueryFunction : SODataV4_ObjectBase
{
    @private SODataV4_int code_;
    @private NSString* _Nonnull name_;
    @private SODataV4_int minArity_;
    @private SODataV4_int maxArity_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryFunction*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nonnull SODataV4_QueryValue*) asType :(nonnull SODataV4_DataType*)type;
/// @return a deferred call of the OData 'cast' canonical function.
/// @param type A data type.
/// @param value (optional) A data value, or `nil` to refer to the "current instance".
+ (nonnull SODataV4_QueryValue*) asType :(nonnull SODataV4_DataType*)type :(nullable SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'ceiling' canonical function.
/// @param value A number value.
+ (nonnull SODataV4_QueryValue*) ceiling :(nonnull SODataV4_DataValue*)value;
/// @brief Function code.
///
///
/// @see `SODataV4_QueryOperatorCode`.
- (SODataV4_int) code;
/// @return a deferred call of the OData 'concat' canonical function.
/// @param left Left string value.
/// @param right Right string value.
+ (nonnull SODataV4_QueryValue*) concat :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'contains' canonical function.
/// @param value A string value.
/// @param searchValue To search for in `value`.
+ (nonnull SODataV4_QueryFilter*) contains :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataValue*)searchValue;
/// @return a deferred call of a custom function.
/// @param name Custom function name.
/// @param arguments Custom function arguments.
+ (nonnull SODataV4_QueryValue*) custom :(nonnull NSString*)name :(nonnull SODataV4_DataValueList*)arguments;
/// @return a deferred call of the OData 'date' canonical function.
/// @param value A value with date components.
+ (nonnull SODataV4_QueryValue*) date :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'day' canonical function.
/// @param value A value with date components.
+ (nonnull SODataV4_QueryValue*) day :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'endswith' canonical function.
/// @param value A string value.
/// @param suffix Suffix to check for in `value`.
+ (nonnull SODataV4_QueryFilter*) endsWith :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataValue*)suffix;
/// @return a deferred call of the OData 'floor' canonical function.
/// @param value A number value.
+ (nonnull SODataV4_QueryValue*) floor :(nonnull SODataV4_DataValue*)value;
/// @brief Lookup a query function by code.
///
///
/// @return Query function.
/// @param code Function code.
/// @see constants.
+ (nonnull SODataV4_QueryFunction*) forCode :(SODataV4_int)code;
/// @brief Lookup a query function by name.
///
///
/// @return Query function.
/// @param name Function name.
/// @throw `SODataV4_DataQueryException` if `name` is not the name of a known query function.
+ (nonnull SODataV4_QueryFunction*) forName :(nonnull NSString*)name;
/// @return a deferred call of the OData 'fractionalseconds' canonical function.
/// @param value A value with time components.
+ (nonnull SODataV4_QueryValue*) fractionalSeconds :(nonnull SODataV4_DataValue*)value;
/// @brief A map of predefined query functions.
///
///
+ (nonnull SODataV4_QueryFunctionMap*) functionMap;
/// @return a deferred call of the OData 'geo.distance' canonical function.
/// @param from A starting point.
/// @param to An ending point.
+ (nonnull SODataV4_QueryValue*) geoDistance :(nonnull SODataV4_DataValue*)from :(nonnull SODataV4_DataValue*)to;
/// @return a deferred call of the OData 'geo.intersects' canonical function.
/// @param point A point.
/// @param polygon A polygon.
+ (nonnull SODataV4_QueryFilter*) geoIntersects :(nonnull SODataV4_DataValue*)point :(nonnull SODataV4_DataValue*)polygon;
/// @return a deferred call of the OData 'geo.length' canonical function.
/// @param value A line string or polygon.
+ (nonnull SODataV4_QueryValue*) geoLength :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'hour' canonical function.
/// @param value A value with time components.
+ (nonnull SODataV4_QueryValue*) hour :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'indexof' canonical function.
/// @param value A string value.
/// @param searchValue To search for in `value`.
+ (nonnull SODataV4_QueryValue*) indexOf :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataValue*)searchValue;
/// @internal
///
+ (nonnull SODataV4_QueryFilter*) isType :(nonnull SODataV4_DataType*)type;
/// @return a deferred call of the OData 'isof' canonical function.
/// @param type A data type.
/// @param value (optional) A data value, or `nil` to refer to the "current instance".
+ (nonnull SODataV4_QueryFilter*) isType :(nonnull SODataV4_DataType*)type :(nullable SODataV4_DataValue*)value;
/// @brief Maximum arity (number of arguments).
///
///
- (SODataV4_int) maxArity;
/// @return a deferred call of the OData 'maxdatetime' canonical function.
///
+ (nonnull SODataV4_QueryValue*) maxDateTime;
/// @brief Minimum arity (number of arguments).
///
///
- (SODataV4_int) minArity;
/// @return a deferred call of the OData 'mindatetime' canonical function.
///
+ (nonnull SODataV4_QueryValue*) minDateTime;
/// @return a deferred call of the OData 'minute' canonical function.
/// @param value A value with time components.
+ (nonnull SODataV4_QueryValue*) minute :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'month' canonical function.
/// @param value A value with date components.
+ (nonnull SODataV4_QueryValue*) month :(nonnull SODataV4_DataValue*)value;
/// @brief Function name.
///
///
- (nonnull NSString*) name;
/// @return a deferred call of the OData 'now' canonical function.
///
+ (nonnull SODataV4_QueryValue*) now;
/// @return a deferred call of the OData 'round' canonical function.
/// @param value A number value.
+ (nonnull SODataV4_QueryValue*) round :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'second' canonical function.
/// @param value A value with time components.
+ (nonnull SODataV4_QueryValue*) second :(nonnull SODataV4_DataValue*)value;
/// @brief Function code.
///
///
/// @see `SODataV4_QueryOperatorCode`.
- (void) setCode :(SODataV4_int)value;
/// @brief Maximum arity (number of arguments).
///
///
- (void) setMaxArity :(SODataV4_int)value;
/// @brief Minimum arity (number of arguments).
///
///
- (void) setMinArity :(SODataV4_int)value;
/// @brief Function name.
///
///
- (void) setName :(nonnull NSString*)value;
/// @return a deferred call of the OData 'startswith' canonical function.
/// @param value A string value.
/// @param prefix Prefix to check for in `value`.
+ (nonnull SODataV4_QueryFilter*) startsWith :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataValue*)prefix;
/// @return a deferred call of the OData 'length' canonical function.
/// @param value A string value.
+ (nonnull SODataV4_QueryValue*) stringLength :(nonnull SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_QueryValue*) substring :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataValue*)start;
/// @return a deferred call of the OData 'substring' canonical function.
/// @param value A string value.
/// @param start A starting index.
/// @param length (optional) A substring length.
+ (nonnull SODataV4_QueryValue*) substring :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataValue*)start :(nullable SODataV4_DataValue*)length;
/// @return a deferred call of the OData 'time' canonical function.
/// @param value A value with time components.
+ (nonnull SODataV4_QueryValue*) time :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'tolower' canonical function.
/// @param value A string value.
+ (nonnull SODataV4_QueryValue*) toLower :(nonnull SODataV4_DataValue*)value;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @return a deferred call of the OData 'toUpper' canonical function.
/// @param value A string value.
+ (nonnull SODataV4_QueryValue*) toUpper :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'totaloffsetminutes' canonical function.
/// @param value A value with time components.
+ (nonnull SODataV4_QueryValue*) totalOffsetMinutes :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'trim' canonical function.
/// @param value A string value.
+ (nonnull SODataV4_QueryValue*) trim :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'year' canonical function.
/// @param value A value with date components.
+ (nonnull SODataV4_QueryValue*) year :(nonnull SODataV4_DataValue*)value;
/// @brief Function code.
///
///
/// @see `SODataV4_QueryOperatorCode`.
@property (nonatomic, readwrite) SODataV4_int code;
/// @brief A map of predefined query functions.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryFunctionMap* functionMap;
/// @brief Maximum arity (number of arguments).
///
///
@property (nonatomic, readwrite) SODataV4_int maxArity;
/// @brief Minimum arity (number of arguments).
///
///
@property (nonatomic, readwrite) SODataV4_int minArity;
/// @brief Function name.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* name;
@end
#endif

#ifdef import_SODataV4__QueryFunction_private
#ifndef imported_SODataV4__QueryFunction_private
#define imported_SODataV4__QueryFunction_private
@interface SODataV4_QueryFunction (private)
+ (nonnull SODataV4_QueryFunctionList*) functionList;
+ (nonnull SODataV4_QueryFunctionList*) initList :(nonnull SODataV4_QueryFunctionList*)list :(nonnull SODataV4_QueryFunctionMap*)map;
+ (nonnull SODataV4_QueryFunctionMap*) initMap :(nonnull SODataV4_QueryFunctionList*)list;
+ (nonnull SODataV4_QueryFunctionList*) myList;
+ (void) set :(nonnull SODataV4_QueryFunctionList*)list :(nonnull SODataV4_QueryFunctionMap*)map :(SODataV4_int)code :(nonnull NSString*)name :(SODataV4_int)minArity :(SODataV4_int)maxArity;
+ (nonnull SODataV4_QueryFunction*) _new1 :(SODataV4_int)p1 :(SODataV4_int)p2 :(SODataV4_int)p3 :(nonnull NSString*)p4;
#define SODataV4_QueryFunction_MAX_CODE 31
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryFunctionList* functionList;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryFunctionList* myList;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryFunctionCode_public
#define imported_SODataV4__QueryFunctionCode_public
/// @brief Constants for `SODataV4_QueryFunction`.`code`.
///
///
@interface SODataV4_QueryFunctionCode : SODataV4_ObjectBase
{
}
#define SODataV4_QueryFunctionCode_CONTAINS 1
#define SODataV4_QueryFunctionCode_ENDS_WITH 2
#define SODataV4_QueryFunctionCode_STARTS_WITH 3
#define SODataV4_QueryFunctionCode_LENGTH 4
#define SODataV4_QueryFunctionCode_INDEX_OF 5
#define SODataV4_QueryFunctionCode_SUBSTRING 6
#define SODataV4_QueryFunctionCode_TO_LOWER 7
#define SODataV4_QueryFunctionCode_TO_UPPER 8
#define SODataV4_QueryFunctionCode_TRIM 9
#define SODataV4_QueryFunctionCode_CONCAT 10
#define SODataV4_QueryFunctionCode_YEAR 11
#define SODataV4_QueryFunctionCode_MONTH 12
#define SODataV4_QueryFunctionCode_DAY 13
#define SODataV4_QueryFunctionCode_HOUR 14
#define SODataV4_QueryFunctionCode_MINUTE 15
#define SODataV4_QueryFunctionCode_SECOND 16
#define SODataV4_QueryFunctionCode_FRACTIONAL_SECONDS 17
#define SODataV4_QueryFunctionCode_DATE 18
#define SODataV4_QueryFunctionCode_TIME 19
#define SODataV4_QueryFunctionCode_TOTAL_OFFSET_MINUTES 20
#define SODataV4_QueryFunctionCode_NOW 21
#define SODataV4_QueryFunctionCode_MIN_DATE_TIME 22
#define SODataV4_QueryFunctionCode_MAX_DATE_TIME 23
#define SODataV4_QueryFunctionCode_ROUND 24
#define SODataV4_QueryFunctionCode_FLOOR 25
#define SODataV4_QueryFunctionCode_CEILING 26
#define SODataV4_QueryFunctionCode_CAST 27
#define SODataV4_QueryFunctionCode_ISOF 28
#define SODataV4_QueryFunctionCode_GEO_DISTANCE 29
#define SODataV4_QueryFunctionCode_GEO_INTERSECTS 30
#define SODataV4_QueryFunctionCode_GEO_LENGTH 31
@end
#endif

#ifndef imported_SODataV4__QueryFunctionMap_Entry_public
#define imported_SODataV4__QueryFunctionMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_QueryFunctionMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_QueryFunction* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryFunctionMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_QueryFunction*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_QueryFunction*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_QueryFunction* value;
@end
#endif

#ifndef imported_SODataV4__QueryInternal_public
#define imported_SODataV4__QueryInternal_public
/// @internal
///
@interface SODataV4_QueryInternal : SODataV4_ObjectBase
{
}
+ (void) initialize;
/// @brief Evaluate a query function call in the provided context.
///
///
/// @return Function result.
/// @param call Query function call expression.
/// @param context Structure (`SODataV4_ComplexValue` or `SODataV4_EntityValue`) providing the evaluation context.
+ (nullable SODataV4_DataValue*) applyFunction :(nonnull SODataV4_QueryFunctionCall*)call :(nullable SODataV4_StructureBase*)context;
/// @brief Evaluate a query operator call in the provided context.
///
///
/// @return Operator result.
/// @param call Query operator call expression.
/// @param context Structure (`SODataV4_ComplexValue` or `SODataV4_EntityValue`) providing the evaluation context.
+ (nullable SODataV4_DataValue*) applyOperator :(nonnull SODataV4_QueryOperatorCall*)call :(nullable SODataV4_StructureBase*)context;
/// @brief Evaluate a query expression `value` in the provided `context`.
///
///
/// @return Evaluated expression.
/// @param value Query expression to be evaluated.
/// @param context Structure (`SODataV4_ComplexValue` or `SODataV4_EntityValue`) providing the evaluation context.
+ (nullable SODataV4_DataValue*) evaluate :(nullable SODataV4_DataValue*)value :(nullable SODataV4_StructureBase*)context;
/// @brief Evaluate a data path in the provided `context`.
///
///
/// @return Evaluated path.
/// @param path Data path.
/// @param context Structure (`SODataV4_ComplexValue` or `SODataV4_EntityValue`) providing the evaluation context.
+ (nullable SODataV4_DataValue*) evaluatePath :(nonnull SODataV4_DataPath*)path :(nullable SODataV4_StructureBase*)context;
/// @brief Evaluate a string-typed query expression `value` in the provided `context`.
///
///
/// @return Evaluated value, as type `string`.
/// @param value Query expression to be evaluated.
/// @param context Structure (`SODataV4_ComplexValue` or `SODataV4_EntityValue`) providing the evaluation context.
+ (nullable SODataV4_StringValue*) evaluateString :(nullable SODataV4_DataValue*)value :(nullable SODataV4_StructureBase*)context;
/// @return `true` if a query filter evaluates to `true` in the provided context.
/// @param filter Query filter.
/// @param context Structure (`SODataV4_ComplexValue` or `SODataV4_EntityValue`) providing the evaluation context.
+ (SODataV4_boolean) matchFilter :(nullable SODataV4_QueryFilter*)filter :(nonnull SODataV4_StructureBase*)context;
@end
#endif

#ifdef import_SODataV4__QueryInternal_private
#ifndef imported_SODataV4__QueryInternal_private
#define imported_SODataV4__QueryInternal_private
@interface SODataV4_QueryInternal (private)
+ (SODataV4_boolean) eitherIs :(SODataV4_int)code :(nullable SODataV4_DataValue*)left :(nullable SODataV4_DataValue*)right;
+ (SODataV4_boolean) eitherIsEnum :(nullable SODataV4_DataValue*)left :(nullable SODataV4_DataValue*)right;
+ (nonnull SODataV4_EnumValue*) getEnumValue :(nullable SODataV4_DataValue*)value;
+ (nonnull SODataV4_BigDecimal*) DECIMAL_POSITIVE_1000000000;
@end
#define SODataV4_QueryInternal_DECIMAL_POSITIVE_1000000000 [SODataV4_QueryInternal DECIMAL_POSITIVE_1000000000]
#endif
#endif

#ifdef import_SODataV4__QueryNumber_internal
#ifndef imported_SODataV4__QueryNumber_internal
#define imported_SODataV4__QueryNumber_public
/* internal */
/// @brief Conversion functions between all `SODataV4_DataValue` number subtypes.
///
///
@interface SODataV4_QueryNumber : SODataV4_ObjectBase
{
}
/// @return `value` converted to type `byte`.
/// @param value Data value, which should be numeric.
+ (SODataV4_byte) getByte :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `decimal`.
/// @param value Data value, which should be numeric.
+ (nonnull SODataV4_BigDecimal*) getDecimal :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `double`.
/// @param value Data value, which should be numeric.
+ (SODataV4_double) getDouble :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `float`.
/// @param value Data value, which should be numeric.
+ (SODataV4_float) getFloat :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `int`.
/// @param value Data value, which should be numeric.
+ (SODataV4_int) getInt :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `integer`.
/// @param value Data value, which should be numeric.
+ (nonnull SODataV4_BigInteger*) getInteger :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `long`.
/// @param value Data value, which should be numeric.
+ (SODataV4_long) getLong :(nullable SODataV4_DataValue*)value;
/// @return `value` converted to type `short`.
/// @param value Data value, which should be numeric.
+ (SODataV4_short) getShort :(nullable SODataV4_DataValue*)value;
@end
#endif
#endif

#ifdef import_SODataV4__QueryNumber_internal
#ifndef imported_SODataV4__QueryNumber_internal
#define imported_SODataV4__QueryNumber_internal
@interface SODataV4_QueryNumber (internal)
+ (nonnull SODataV4_DataValue*) negate :(nullable SODataV4_DataValue*)value;
+ (nonnull SODataV4_DataValue*) notNull :(nullable SODataV4_DataValue*)value;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryOperator_public
#define imported_SODataV4__QueryOperator_public
/// @brief Represents a [OData](http://odata.org) query operator.
///
/// Query operators are typically used within `SODataV4_DataQuery`.`filter`.
/// `SODataV4_QueryOperatorCall` can be constructed using static calls on `SODataV4_QueryOperator` or, more conveniently, by chained calls on `SODataV4_QueryValue`.
///
/// 
/// #### Example using proxy classes (with QueryOperator static calls)
/// 
/// ```` oc
/// - (void) queryOperatorExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[SODataV4_QueryOperator greaterEqual:[SODataV4_QueryOperator multiply:OrderDetail.quantity:OrderDetail.unitPrice]:[SODataV4_DecimalValue of:[SODataV4_DecimalFunction fromInt:1000]]]];
///     OrderDetail__List* details = [service getOrderDetails:query];
///     [self showDetails:details];
/// }
/// ````
/// 
/// #### Example using proxy classes (with QueryValue chained calls)
/// 
/// ```` oc
/// - (void) queryValueOperatorExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[[OrderDetail.quantity multiply:OrderDetail.unitPrice] greaterEqual:((SODataV4_DataValue*)((NSObject*)[SODataV4_DecimalValue of:NorthwindProxyClient.DECIMAL_POSITIVE_1000]))]];
///     OrderDetail__List* details = [service getOrderDetails:query];
///     [self showDetails:details];
/// }
/// ````
@interface SODataV4_QueryOperator : SODataV4_ObjectBase
{
    @private SODataV4_int code_;
    @private NSString* _Nonnull name_;
    @private SODataV4_int arity_;
    @private SODataV4_int priority_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryOperator*) new;
/// @internal
///
- (void) _init;
/// @return a deferred call of the OData 'add' arithmetic operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryValue*) add :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'all' lambda operator.
/// @param value Collection value.
/// @param lambda Lambda variable.
/// @param match Query filter.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) allOperatorExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataPath* p = [SODataV4_DataPath lambda:@"p"];
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[Category.products all:p:[SODataV4_QueryOperator greaterThan:[p path:Product.unitPrice]:[SODataV4_DecimalValue of:NorthwindProxyClient.DECIMAL_POSITIVE_1]]]];
///     Category__List* categories = [service getCategories:query];
///     [SODataV4_Assert isTrue:(categories.length != 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:762:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) allOperatorExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* categoriesEntitySet = [service getEntitySet:@"Categories"];
///     SODataV4_EntityType* categoryEntityType = categoriesEntitySet.entityType;
///     SODataV4_Property* productsProperty = [categoryEntityType getProperty:@"Products"];
///     SODataV4_EntitySet* productsEntitySet = [service getEntitySet:@"Products"];
///     SODataV4_EntityType* productEntityType = productsEntitySet.entityType;
///     SODataV4_Property* unitPriceProperty = [productEntityType getProperty:@"UnitPrice"];
///     SODataV4_DataPath* p = [SODataV4_DataPath lambda:@"p"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:categoriesEntitySet] filter:[productsProperty all:p:[SODataV4_QueryOperator greaterThan:[p path:unitPriceProperty]:[SODataV4_DecimalValue of:NorthwindClient.DECIMAL_POSITIVE_1]]]];
///     SODataV4_EntityValueList* categories = [[service executeQuery:query] getEntityList];
///     [SODataV4_Assert isTrue:(categories.length != 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:915:9"];
/// }
/// ````
+ (nonnull SODataV4_QueryFilter*) all :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataPath*)lambda :(nonnull SODataV4_QueryFilter*)match;
/// @return a deferred call of the OData 'and' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) and :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'any' lambda operator.
/// @param value Collection value.
/// @param lambda Lambda variable.
/// @param match Query filter.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) anyOperatorExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataPath* p = [SODataV4_DataPath lambda:@"p"];
///     SODataV4_DataQuery* query = [[SODataV4_DataQuery new] filter:[Category.products any:p:[SODataV4_QueryOperator greaterThan:[p path:Product.unitPrice]:[SODataV4_DecimalValue of:NorthwindProxyClient.DECIMAL_POSITIVE_20]]]];
///     Category__List* categories = [service getCategories:query];
///     [SODataV4_Assert isTrue:(categories.length != 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindProxyClient.xs:752:9"];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) anyOperatorExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* categoriesEntitySet = [service getEntitySet:@"Categories"];
///     SODataV4_EntityType* categoryEntityType = categoriesEntitySet.entityType;
///     SODataV4_Property* productsProperty = [categoryEntityType getProperty:@"Products"];
///     SODataV4_EntitySet* productsEntitySet = [service getEntitySet:@"Products"];
///     SODataV4_EntityType* productEntityType = productsEntitySet.entityType;
///     SODataV4_Property* unitPriceProperty = [productEntityType getProperty:@"UnitPrice"];
///     SODataV4_DataPath* p = [SODataV4_DataPath lambda:@"p"];
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] from:categoriesEntitySet] filter:[productsProperty any:p:[SODataV4_QueryOperator greaterThan:[p path:unitPriceProperty]:[SODataV4_DecimalValue of:NorthwindClient.DECIMAL_POSITIVE_20]]]];
///     SODataV4_EntityValueList* categories = [[service executeQuery:query] getEntityList];
///     [SODataV4_Assert isTrue:(categories.length != 0):@"/data/home/ppurple/prod-build18010/w/naasmobile-odata-core-framework/NAAS-Mobile-com.sap.odata.core.framework-OD-darwinintel64_ent_indirectshipment-darwinintel64_ent/src/main/xs/examples/example.NorthwindClient.xs:899:9"];
/// }
/// ````
+ (nonnull SODataV4_QueryFilter*) any :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_DataPath*)lambda :(nonnull SODataV4_QueryFilter*)match;
/// @brief Operator arity (number of arguments).
///
///
- (SODataV4_int) arity;
/// @brief Operator code.
///
///
/// @see `SODataV4_QueryOperatorCode`.
- (SODataV4_int) code;
/// @return a deferred call of the OData 'div' arithmetic operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryValue*) divide :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'eq' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) equal :(nullable SODataV4_DataValue*)left :(nullable SODataV4_DataValue*)right;
/// @brief Lookup a query operator by code.
///
///
/// @return Query operator.
/// @param code Operator code.
/// @see constants.
+ (nonnull SODataV4_QueryOperator*) forCode :(SODataV4_int)code;
/// @brief Lookup a query operator by code.
///
///
/// @return Query operator.
/// @param name Operator name.
/// @throw `SODataV4_DataQueryException` if `name` is not the name of a known query operator.
+ (nonnull SODataV4_QueryOperator*) forName :(nonnull NSString*)name;
/// @return a deferred call of the OData 'ge' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) greaterEqual :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'gt' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) greaterThan :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'has' operator.
/// @param value Enum value to be tested to see if `flag` is set.
/// @param flags Flag(s) to test for.
+ (nonnull SODataV4_QueryFilter*) has :(nonnull SODataV4_DataValue*)value :(nonnull SODataV4_EnumValue*)flags;
/// @return a deferred call of the OData 'le' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) lessEqual :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'lt' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) lessThan :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'mod' arithmetic operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryValue*) modulo :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return a deferred call of the OData 'mul' arithmetic operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryValue*) multiply :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @brief Operator name.
///
///
- (nonnull NSString*) name;
/// @return a deferred call of the OData '-' arithmetic operator.
/// @param value Numeric value.
+ (nonnull SODataV4_QueryValue*) negate :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'not' logical operator.
/// @param value Logical value.
+ (nonnull SODataV4_QueryFilter*) not :(nonnull SODataV4_DataValue*)value;
/// @return a deferred call of the OData 'ne' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) notEqual :(nullable SODataV4_DataValue*)left :(nullable SODataV4_DataValue*)right;
/// @brief A map of predefined query operators.
///
///
+ (nonnull SODataV4_QueryOperatorMap*) operatorMap;
/// @return a deferred call of the OData 'or' logical operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryFilter*) or :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @brief Operator priority.
///
///
- (SODataV4_int) priority;
/// @return a deferred call of the OData 'sub' arithmetic operator.
/// @param left Left operand.
/// @param right Right operand.
+ (nonnull SODataV4_QueryValue*) subtract :(nonnull SODataV4_DataValue*)left :(nonnull SODataV4_DataValue*)right;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief Operator arity (number of arguments).
///
///
@property (nonatomic, readonly) SODataV4_int arity;
/// @brief Operator code.
///
///
/// @see `SODataV4_QueryOperatorCode`.
@property (nonatomic, readonly) SODataV4_int code;
/// @brief Operator name.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief A map of predefined query operators.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryOperatorMap* operatorMap;
/// @brief Operator priority.
///
///
@property (nonatomic, readonly) SODataV4_int priority;
@end
#endif

#ifdef import_SODataV4__QueryOperator_private
#ifndef imported_SODataV4__QueryOperator_private
#define imported_SODataV4__QueryOperator_private
@interface SODataV4_QueryOperator (private)
+ (nonnull SODataV4_QueryOperatorList*) initList :(nonnull SODataV4_QueryOperatorList*)list :(nonnull SODataV4_QueryOperatorMap*)map;
+ (nonnull SODataV4_QueryOperatorMap*) initMap :(nonnull SODataV4_QueryOperatorList*)list;
+ (nonnull SODataV4_QueryOperatorList*) myList;
+ (nonnull SODataV4_QueryOperatorList*) operatorList;
+ (void) set :(nonnull SODataV4_QueryOperatorList*)list :(nonnull SODataV4_QueryOperatorMap*)map :(SODataV4_int)code :(nonnull NSString*)name :(SODataV4_int)arity :(SODataV4_int)priority;
+ (nonnull SODataV4_QueryOperator*) _new1 :(SODataV4_int)p1 :(SODataV4_int)p2 :(SODataV4_int)p3 :(nonnull NSString*)p4;
#define SODataV4_QueryOperator_MAX_CODE 18
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryOperatorList* myList;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryOperatorList* operatorList;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryOperatorCode_public
#define imported_SODataV4__QueryOperatorCode_public
/// @brief Constants for `SODataV4_QueryOperator`.`code`.
///
///
@interface SODataV4_QueryOperatorCode : SODataV4_ObjectBase
{
}
#define SODataV4_QueryOperatorCode_EQUAL 1
#define SODataV4_QueryOperatorCode_NOT_EQUAL 2
#define SODataV4_QueryOperatorCode_GREATER_THAN 3
#define SODataV4_QueryOperatorCode_GREATER_EQUAL 4
#define SODataV4_QueryOperatorCode_LESS_THAN 5
#define SODataV4_QueryOperatorCode_LESS_EQUAL 6
#define SODataV4_QueryOperatorCode_AND 7
#define SODataV4_QueryOperatorCode_OR 8
#define SODataV4_QueryOperatorCode_NOT 9
#define SODataV4_QueryOperatorCode_NEGATE 10
#define SODataV4_QueryOperatorCode_ADD 11
#define SODataV4_QueryOperatorCode_SUBTRACT 12
#define SODataV4_QueryOperatorCode_MULTIPLY 13
#define SODataV4_QueryOperatorCode_DIVIDE 14
#define SODataV4_QueryOperatorCode_MODULO 15
#define SODataV4_QueryOperatorCode_ANY 16
#define SODataV4_QueryOperatorCode_ALL 17
#define SODataV4_QueryOperatorCode_HAS 18
@end
#endif

#ifndef imported_SODataV4__QueryOperatorMap_Entry_public
#define imported_SODataV4__QueryOperatorMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_QueryOperatorMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_QueryOperator* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryOperatorMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_QueryOperator*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_QueryOperator*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_QueryOperator* value;
@end
#endif

#ifndef imported_SODataV4__QueryResult_public
#define imported_SODataV4__QueryResult_public
/// @brief Holds a data query and its result value. Allows conversion of the result to optional/required/list values for basic, complex and entity types.
///
///
@interface SODataV4_QueryResult : SODataV4_ObjectBase
{
    @private SODataV4_DataQuery* _Nonnull _query_;
    @private SODataV4_DataValue* _Nullable _result;
    @private SODataV4_int _status;
    @private SODataV4_DataServiceException* _Nullable _error;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new query result.
///
///
/// @param query Data query.
/// @param result Result value.
+ (nonnull SODataV4_QueryResult*) new :(nonnull SODataV4_DataQuery*)query :(nullable SODataV4_DataValue*)result;
/// @brief Construct a new query result.
///
///
/// @param query Data query.
/// @param result Result value.
/// @param status (optional) Result status (using HTTP status codes).
+ (nonnull SODataV4_QueryResult*) new :(nonnull SODataV4_DataQuery*)query :(nullable SODataV4_DataValue*)result :(SODataV4_int)status;
/// @brief Construct a new query result.
///
///
/// @param query Data query.
/// @param result Result value.
/// @param status (optional) Result status (using HTTP status codes).
/// @param error (optional) Error, if the query failed, otherwise `nil`.
+ (nonnull SODataV4_QueryResult*) new :(nonnull SODataV4_DataQuery*)query :(nullable SODataV4_DataValue*)result :(SODataV4_int)status :(nullable SODataV4_DataServiceException*)error;
/// @internal
///
- (void) _init :(nonnull SODataV4_DataQuery*)query :(nullable SODataV4_DataValue*)result :(SODataV4_int)status :(nullable SODataV4_DataServiceException*)error;
/// @internal
///
- (void) check;
/// @brief Check if the `SODataV4_QueryResult`.`result` is valid with respect to the `SODataV4_QueryResult`.`query`.
///
/// A result will be considered invalid if it is missing properties that were expected according to the use of `SODataV4_DataQuery`.`select` or `SODataV4_DataQuery`.`expand` in the `SODataV4_QueryResult`.`query`.
///
/// @param fixOptions (optional) Flags for fixing invalid OData payload
/// @throw `SODataV4_QueryResultException` if the result is definitely not valid.
- (void) check :(SODataV4_int)fixOptions;
/// @brief Error if `status` does not represent a successful response.
///
///
- (nullable SODataV4_DataServiceException*) error;
/// @return The basic list for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nonnull SODataV4_DataValueList*) getBasicList;
/// @return The complex list for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nonnull SODataV4_ComplexValueList*) getComplexList;
/// @return The "count" for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// @see `SODataV4_DataQuery`.`count`, [Requesting the Number of Items in a Collection](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752292).
- (SODataV4_long) getCount;
/// @return The "delta link" for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// @see `SODataV4_EntityValueList`.`deltaLink`.
- (nullable NSString*) getDeltaLink;
/// @return The delta stream for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nonnull SODataV4_DeltaStream*) getDeltaStream;
/// @return The entity list for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) entityListExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] orderBy:Customer.companyName];
///     Customer__List* customers = [service getCustomers:query];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             Customer* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///         }
///     }
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) entityListExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] orderBy:companyNameProperty];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     // for (let customer of customers)
///     {
///         SODataV4_int customer_count = customers.length;
///         SODataV4_int customer_index;
///         for (customer_index = 0; customer_index < customer_count; customer_index++)
///         {
///             SODataV4_EntityValue* customer = [customers get:customer_index];
///             [self showCustomer:customer];
///         }
///     }
/// }
/// ````
- (nonnull SODataV4_EntityValueList*) getEntityList;
/// @return The entity stream for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nonnull SODataV4_EntityStream*) getEntityStream;
/// @return The inline "total count" for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have an inline "total count".
/// @see `SODataV4_DataQuery`.`inlineCount`, [System Query Option $count](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752288).
- (SODataV4_long) getInlineCount;
/// @return The "next link" for this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// @see `SODataV4_EntityValueList`.`nextLink`.
- (nullable NSString*) getNextLink;
/// @return The "next query" for this result. The query will have a non-`nil` URL if this result includes a nextLink.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// @see `SODataV4_EntityValueList`.`nextLink`.
- (nonnull SODataV4_DataQuery*) getNextQuery;
/// @return The optional basic value of this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nullable SODataV4_DataValue*) getOptionalBasic;
/// @return The optional complex value of this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nullable SODataV4_ComplexValue*) getOptionalComplex;
/// @return The optional entity value of this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) optionalEntityExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] orderBy:Customer.companyName] top:1];
///     Customer* customer = [Single_optional_Customer_in_example from:[service getCustomers:query]];
///     if (customer != nil)
///     {
///         [self showCustomer:customer];
///     }
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) optionalEntityExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] orderBy:companyNameProperty] top:1];
///     SODataV4_EntityValue* customer = [[service executeQuery:query] getOptionalEntity];
///     if (customer != nil)
///     {
///         [self showCustomer:customer];
///     }
/// }
/// ````
- (nullable SODataV4_EntityValue*) getOptionalEntity;
/// @return The required basic value of this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nonnull SODataV4_DataValue*) getRequiredBasic;
/// @return The required complex value of this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
- (nonnull SODataV4_ComplexValue*) getRequiredComplex;
/// @return The required entity value of this result.
/// @throw `SODataV4_QueryResultException` if the result does not have the expected type.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) requiredEntityExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] orderBy:Customer.companyName] top:1];
///     Customer* customer = [service getCustomer:query];
///     [self showCustomer:customer];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) requiredEntityExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_DataQuery* query = [[[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] orderBy:companyNameProperty] top:1];
///     SODataV4_EntityValue* customer = [[service executeQuery:query] getRequiredEntity];
///     [self showCustomer:customer];
/// }
/// ````
- (nonnull SODataV4_EntityValue*) getRequiredEntity;
/// @brief Data query.
///
///
- (nonnull SODataV4_DataQuery*) query;
/// @brief Result value.
///
///
- (nullable SODataV4_DataValue*) result;
/// @brief Result status (e.g. HTTP status code 200 = OK).
///
///
- (SODataV4_int) status;
/// @brief Error if `status` does not represent a successful response.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_DataServiceException* error;
/// @brief Data query.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataQuery* query;
/// @brief Result value.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_DataValue* result;
/// @brief Result status (e.g. HTTP status code 200 = OK).
///
///
@property (nonatomic, readonly) SODataV4_int status;
@end
#endif

#ifdef import_SODataV4__QueryResult_private
#ifndef imported_SODataV4__QueryResult_private
#define imported_SODataV4__QueryResult_private
@interface SODataV4_QueryResult (private)
- (nonnull SODataV4_DataQuery*) _query;
/// @internal
///
- (void) checkEntity :(nonnull SODataV4_DataQuery*)query :(nonnull SODataV4_EntityValue*)entity;
- (void) checkEntity :(nonnull SODataV4_DataQuery*)query :(nonnull SODataV4_EntityValue*)entity :(SODataV4_int)fixOptions;
/// @internal
///
- (void) checkHasExpanded :(nonnull SODataV4_Property*)property :(nonnull SODataV4_EntityValue*)entity;
- (void) checkHasExpanded :(nonnull SODataV4_Property*)property :(nonnull SODataV4_EntityValue*)entity :(SODataV4_int)fixOptions;
/// @internal
///
- (void) checkHasSelected :(nonnull SODataV4_Property*)property :(nonnull SODataV4_EntityValue*)entity;
/// @internal
///
- (void) checkHasSelected :(nonnull SODataV4_Property*)property :(nonnull SODataV4_EntityValue*)entity :(SODataV4_boolean)selectDefault;
- (void) checkHasSelected :(nonnull SODataV4_Property*)property :(nonnull SODataV4_EntityValue*)entity :(SODataV4_boolean)selectDefault :(SODataV4_int)fixOptions;
/// @internal
///
- (void) checkResult :(nonnull SODataV4_DataQuery*)query :(nullable SODataV4_DataValue*)result;
- (void) checkResult :(nonnull SODataV4_DataQuery*)query :(nullable SODataV4_DataValue*)result :(SODataV4_int)fixOptions;
+ (nonnull SODataV4_DataQuery*) defaultQuery;
- (SODataV4_boolean) fixMissingNullableValue :(nonnull SODataV4_Property*)property :(nonnull SODataV4_EntityValue*)entity :(SODataV4_int)fixOptions;
- (nullable SODataV4_Property*) getSingleItem;
- (nonnull SODataV4_DataType*) inferItemType;
- (void) set_query :(nonnull SODataV4_DataQuery*)value;
+ (nonnull SODataV4_DataQuery*) _new1 :(nullable SODataV4_EntitySet*)p1 :(SODataV4_nullable_int)p2 :(nullable NSString*)p3;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataQuery* _query;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataQuery* defaultQuery;
@end
#endif
#endif

#ifndef imported_SODataV4__RequestOptions_public
#define imported_SODataV4__RequestOptions_public
/// @brief Options for processing of data requests.
///
/// If request options are used for `SODataV4_RequestOptions`.`repeatable` requests, a new request options object should be used for each distinct request (or the `SODataV4_RequestOptions`.`repeatable` property should be reset before object re-use). The repeated execution of a failed request should re-use the original request options object without `SODataV4_RequestOptions`.`repeatable` being reset beforehand.
@interface SODataV4_RequestOptions : SODataV4_ObjectBase
{
    @private SODataV4_CancelToken* _Nullable _cancelToken;
    @private SODataV4_boolean _preferNoContent;
    @private SODataV4_boolean _repeatable;
    @private NSString* _Nullable _requestID;
    @private SODataV4_GlobalDateTime* _Nullable _repeatabilityCreation;
    @private SODataV4_GlobalDateTime* _Nullable _repeatabilityDeletion;
    @private SODataV4_boolean _sendEmptyUpdate;
    @private SODataV4_UpdateMode* _Nonnull _updateMode;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_RequestOptions*) new;
/// @internal
///
- (void) _init;
/// @brief Set this to a cancellation token before initiating an async request if request cancellation may be needed.
///
///
- (nullable SODataV4_CancelToken*) cancelToken;
/// @brief Immutable value for "no" request options.
///
///
+ (nonnull SODataV4_RequestOptions*) none;
/// @brief Construct a new RequestOptions and apply default `none` value to that if the `options` parameter is `nil`.
///
///
/// @return The `options` parameter, if non-`nil`. Otherwise a RequestOptions with default `none` value.
/// @param options RequestOptions to be checked.
+ (nonnull SODataV4_RequestOptions*) noneIfNull :(nullable SODataV4_RequestOptions*)options;
/// @brief Should create/update requests receive no content in the response? Defaults to `false`.
///
///
- (SODataV4_boolean) preferNoContent;
/// @brief Repeatability creation time for this request.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`.
- (nullable SODataV4_GlobalDateTime*) repeatabilityCreation;
/// @brief Repeatability deletion time for older requests from this client.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`, `ServiceOptions.clientID`.
- (nullable SODataV4_GlobalDateTime*) repeatabilityDeletion;
/// @brief Should create/update requests be marked as "repeatable".
///
/// Setting this property also sets `SODataV4_RequestOptions`.`requestID` to a new globally unique ID, and sets `SODataV4_RequestOptions`.`repeatabilityCreation` and `SODataV4_RequestOptions`.`repeatabilityDeletion` to `nil`.
///
/// @see [Repeatable Request](https://www.oasis-open.org/committees/document.php?document_id=49430).
- (SODataV4_boolean) repeatable;
/// @brief Globally unique request ID for repeatable requests.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`.
- (nullable NSString*) requestID;
/// @brief Should no-change update requests be sent to the server? Defaults to `false`.
///
///
- (SODataV4_boolean) sendEmptyUpdate;
/// @brief Set this to a cancellation token before initiating an async request if request cancellation may be needed.
///
///
- (void) setCancelToken :(nullable SODataV4_CancelToken*)value;
/// @brief Should create/update requests receive no content in the response? Defaults to `false`.
///
///
- (void) setPreferNoContent :(SODataV4_boolean)value;
/// @brief Repeatability creation time for this request.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`.
- (void) setRepeatabilityCreation :(nullable SODataV4_GlobalDateTime*)value;
/// @brief Repeatability deletion time for older requests from this client.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`, `ServiceOptions.clientID`.
- (void) setRepeatabilityDeletion :(nullable SODataV4_GlobalDateTime*)value;
/// @brief Should create/update requests be marked as "repeatable".
///
/// Setting this property also sets `SODataV4_RequestOptions`.`requestID` to a new globally unique ID, and sets `SODataV4_RequestOptions`.`repeatabilityCreation` and `SODataV4_RequestOptions`.`repeatabilityDeletion` to `nil`.
///
/// @see [Repeatable Request](https://www.oasis-open.org/committees/document.php?document_id=49430).
- (void) setRepeatable :(SODataV4_boolean)value;
/// @brief Globally unique request ID for repeatable requests.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`.
- (void) setRequestID :(nullable NSString*)value;
/// @brief Should no-change update requests be sent to the server? Defaults to `false`.
///
///
- (void) setSendEmptyUpdate :(SODataV4_boolean)value;
/// @brief Determines if updates use merge (PATCH) or replace (PUT) semantics. Defaults to merge semantics.
///
///
- (void) setUpdateMode :(nonnull SODataV4_UpdateMode*)value;
/// @brief Determines if updates use merge (PATCH) or replace (PUT) semantics. Defaults to merge semantics.
///
///
- (nonnull SODataV4_UpdateMode*) updateMode;
/// @brief Set this to a cancellation token before initiating an async request if request cancellation may be needed.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_CancelToken* cancelToken;
/// @brief Immutable value for "no" request options.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_RequestOptions* none;
/// @brief Should create/update requests receive no content in the response? Defaults to `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean preferNoContent;
/// @brief Repeatability creation time for this request.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* repeatabilityCreation;
/// @brief Repeatability deletion time for older requests from this client.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`, `ServiceOptions.clientID`.
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* repeatabilityDeletion;
/// @brief Should create/update requests be marked as "repeatable".
///
/// Setting this property also sets `SODataV4_RequestOptions`.`requestID` to a new globally unique ID, and sets `SODataV4_RequestOptions`.`repeatabilityCreation` and `SODataV4_RequestOptions`.`repeatabilityDeletion` to `nil`.
///
/// @see [Repeatable Request](https://www.oasis-open.org/committees/document.php?document_id=49430).
@property (nonatomic, readwrite) SODataV4_boolean repeatable;
/// @brief Globally unique request ID for repeatable requests.
///
///
/// @see `SODataV4_RequestOptions`.`repeatable`.
@property (nonatomic, readwrite, strong, nullable) NSString* requestID;
/// @brief Should no-change update requests be sent to the server? Defaults to `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean sendEmptyUpdate;
/// @brief Determines if updates use merge (PATCH) or replace (PUT) semantics. Defaults to merge semantics.
///
///
@property (nonatomic, readwrite, nonnull) SODataV4_UpdateMode* updateMode;
@end
#endif

#ifndef imported_SODataV4__SelectItem_public
#define imported_SODataV4__SelectItem_public
/// @brief Encapsulates an [OData](http://odata.org) select item.
///
/// A select item indicates a property (or expression) that is used in the $select system query option.
///
/// @see `SODataV4_DataQuery`.`selectItems`.
@interface SODataV4_SelectItem : SODataV4_ObjectBase
{
    @private SODataV4_DataPath* _Nonnull path_;
    @private SODataV4_boolean isHidden_;
    @private SODataV4_boolean isInline_;
    @private SODataV4_boolean isStream_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_SelectItem*) new;
/// @internal
///
- (void) _init;
/// @brief Was this select item added for internal use
///
/// (e.g. needed for server-side query processing, but not requested by client).
- (SODataV4_boolean) isHidden;
/// @return A new select item for the specified property.
/// @param item Item to be selected.
+ (nonnull SODataV4_SelectItem*) of :(nonnull SODataV4_PropertyPath*)item;
/// @brief A path to be expanded in the query results.
///
///
- (nonnull SODataV4_DataPath*) path;
/// @brief Was this select item added for internal use
///
/// (e.g. needed for server-side query processing, but not requested by client).
- (void) setIsHidden :(SODataV4_boolean)value;
/// @brief A path to be expanded in the query results.
///
///
- (void) setPath :(nonnull SODataV4_DataPath*)value;
/// @brief If this select item references a simple property path, then return the property. Otherwise return `nil`.
///
///
/// @return The property to be selected, or `nil`.
- (nullable SODataV4_Property*) toProperty;
/// @brief If this select item references a simple property path, then return the property. Otherwise throw an exception.
///
///
/// @return The property to be selected.
/// @throw `SODataV4_UndefinedException` if this select item does not reference a simple property path.
- (nonnull SODataV4_Property*) toRequiredProperty;
/// @return A string representation of this select item.
///
- (nonnull NSString*) toString;
/// @brief Was this select item added for internal use
///
/// (e.g. needed for server-side query processing, but not requested by client).
@property (nonatomic, readwrite) SODataV4_boolean isHidden;
/// @brief A path to be expanded in the query results.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataPath* path;
@end
#endif

#ifdef import_SODataV4__SelectItem_private
#ifndef imported_SODataV4__SelectItem_private
#define imported_SODataV4__SelectItem_private
@interface SODataV4_SelectItem (private)
+ (nonnull SODataV4_SelectItem*) _new1 :(nonnull SODataV4_DataPath*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__SelectItem_internal
#ifndef imported_SODataV4__SelectItem_internal
#define imported_SODataV4__SelectItem_internal
@interface SODataV4_SelectItem (internal)
/// @brief Include inline content (for media/stream)? Defaults to `false`.
///
///
- (SODataV4_boolean) isInline;
/// @brief Is this item for media/stream content?
///
///
- (SODataV4_boolean) isStream;
/// @brief Include inline content (for media/stream)? Defaults to `false`.
///
///
- (void) setIsInline :(SODataV4_boolean)value;
/// @brief Is this item for media/stream content?
///
///
- (void) setIsStream :(SODataV4_boolean)value;
/// @brief Include inline content (for media/stream)? Defaults to `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isInline;
/// @brief Is this item for media/stream content?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isStream;
@end
#endif
#endif

#ifndef imported_SODataV4__SetBase_public
#define imported_SODataV4__SetBase_public
/// @brief Base class for strongly-typed sets.
///
///
@interface SODataV4_SetBase : SODataV4_ObjectBase
{
    @private SODataV4_UntypedSet* _Nonnull _untyped_;
}
- (nonnull id) init;
/// @brief Construct a new set with a `SODataV4_SetBase`.`size` of zero and specified initial `capacity`.
///
/// A set can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the set's maximum size.
///
/// @param capacity Initial capacity.
+ (nonnull SODataV4_SetBase*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Remove all values from this set.
///
///
- (void) clear;
/// @brief `true` if this set contains no values.
///
///
- (SODataV4_boolean) isEmpty;
/// @brief The number of values in this set.
///
///
- (SODataV4_int) size;
/// @return A string representation of this object.
///
- (nonnull NSString*) toString;
/// @brief The underlying untyped set. Use with care, avoiding the addition of objects with an incorrect value type.
///
///
- (nonnull SODataV4_UntypedSet*) untypedSet;
/// @brief `true` if this set contains no values.
///
///
@property (nonatomic, readonly) SODataV4_boolean isEmpty;
/// @brief The number of values in this set.
///
///
@property (nonatomic, readonly) SODataV4_int size;
/// @brief The underlying untyped set. Use with care, avoiding the addition of objects with an incorrect value type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedSet* untypedSet;
@end
#endif

#ifdef import_SODataV4__SetBase_private
#ifndef imported_SODataV4__SetBase_private
#define imported_SODataV4__SetBase_private
@interface SODataV4_SetBase (private)
- (nonnull SODataV4_UntypedSet*) _untyped;
- (void) set_untyped :(nonnull SODataV4_UntypedSet*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_UntypedSet* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__SimpleTypeMap_Entry_public
#define imported_SODataV4__SimpleTypeMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_SimpleTypeMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private SODataV4_SimpleType* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_SimpleTypeMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull SODataV4_SimpleType*)value;
/// @brief Map entry value.
///
///
- (nonnull SODataV4_SimpleType*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_SimpleType* value;
@end
#endif

#ifndef imported_SODataV4__SortItem_public
#define imported_SODataV4__SortItem_public
/// @brief Encapsulates an [OData](http://odata.org) sort item.
///
/// A sort item indicates a property (or expression) that is used in the $orderby system query option.
///
/// @see `SODataV4_DataQuery`.`sortItems`, `SODataV4_DataQuery`.`orderBy`, `SODataV4_DataQuery`.`thenBy`.
@interface SODataV4_SortItem : SODataV4_ObjectBase
{
    @private SODataV4_QueryValue* _Nonnull value_;
    @private SODataV4_SortOrder* _Nonnull order_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_SortItem*) new;
/// @internal
///
- (void) _init;
/// @return A new sort item for the specified value.
/// @param value Value for result ordering.
+ (nonnull SODataV4_SortItem*) of :(nonnull SODataV4_QueryValue*)value;
/// @brief Sort order, which defaults to SortOrder.ascending.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`.
- (nonnull SODataV4_SortOrder*) order;
/// @brief Obsolete. Use `SODataV4_SortItem`.`value`.
///
///
- (nullable SODataV4_DataPath*) path;
/// @brief Sort order, which defaults to SortOrder.ascending.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`.
- (void) setOrder :(nonnull SODataV4_SortOrder*)value;
/// @brief An expression that, when evaluated, will be used for query result ordering.
///
///
- (void) setValue :(nonnull SODataV4_QueryValue*)value;
/// @brief If this sort item directly references a property, then return the property. Otherwise return `nil`.
///
///
/// @return The property to be selected, or `nil`.
- (nullable SODataV4_Property*) toProperty;
/// @brief If this sort item references a simple property path, then return the property. Otherwise throw an exception.
///
///
/// @return The property to be selected.
/// @throw `SODataV4_UndefinedException` if this sort item does not reference a simple property path.
- (nonnull SODataV4_Property*) toRequiredProperty;
/// @return A string representation of this sort item.
///
- (nonnull NSString*) toString;
/// @brief An expression that, when evaluated, will be used for query result ordering.
///
///
- (nonnull SODataV4_QueryValue*) value;
/// @brief Sort order, which defaults to SortOrder.ascending.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`.
@property (nonatomic, readwrite, nonnull) SODataV4_SortOrder* order;
/// @brief Obsolete. Use `SODataV4_SortItem`.`value`.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_DataPath* path;
/// @brief An expression that, when evaluated, will be used for query result ordering.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_QueryValue* value;
@end
#endif

#ifdef import_SODataV4__SortItem_private
#ifndef imported_SODataV4__SortItem_private
#define imported_SODataV4__SortItem_private
@interface SODataV4_SortItem (private)
+ (nonnull SODataV4_SortItem*) _new1 :(nonnull SODataV4_QueryValue*)p1;
@end
#endif
#endif

#define SODataV4_SortOrder_ascending 1
#define SODataV4_SortOrder_descending 2

#ifndef imported_SODataV4__SortOrder_public
#define imported_SODataV4__SortOrder_public
/// @brief Sort order for data queries.
///
///
/// @see `SODataV4_DataQuery`.`orderBy`, `SODataV4_SortItem`.`order`.
@interface SODataV4_SortOrder : SODataV4_ObjectBase
{
    @private SODataV4_int _value;
}
+ (void) initialize;
+ (nonnull SODataV4_SortOrder*) of :(SODataV4_int) value;
- (SODataV4_int) value;
@property (nonatomic, readonly) SODataV4_int value;
+ (nonnull SODataV4_SortOrder*) ascending;
@property (nonnull, nonatomic, readonly, strong, class) SODataV4_SortOrder* ascending;
+ (nonnull SODataV4_SortOrder*) descending;
@property (nonnull, nonatomic, readonly, strong, class) SODataV4_SortOrder* descending;
@end
#endif

#ifndef imported_SODataV4__StringMap_Entry_public
#define imported_SODataV4__StringMap_Entry_public
/// @brief A key/value pair for map entries.
///
///
@interface SODataV4_StringMap_Entry : SODataV4_ObjectBase
{
    @private NSString* _Nonnull key_;
    @private NSString* _Nonnull value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StringMap_Entry*) new;
/// @internal
///
- (void) _init;
/// @brief Map entry key.
///
///
- (nonnull NSString*) key;
/// @brief Map entry key.
///
///
- (void) setKey :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (void) setValue :(nonnull NSString*)value;
/// @brief Map entry value.
///
///
- (nonnull NSString*) value;
/// @brief Map entry key.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* key;
/// @brief Map entry value.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* value;
@end
#endif

#ifdef import_SODataV4__SystemFlags_internal
#ifndef imported_SODataV4__SystemFlags_internal
#define imported_SODataV4__SystemFlags_public
/* internal */
@interface SODataV4_SystemFlags : SODataV4_ObjectBase
{
}
#define SODataV4_SystemFlags_CACHE_SELECT 1
#define SODataV4_SystemFlags_CACHED_SELECT 2
#define SODataV4_SystemFlags_FOR_ALL_TENANTS 4
#define SODataV4_SystemFlags_IF_DELETED 8
#define SODataV4_SystemFlags_IF_NOT_DELETED 16
#define SODataV4_SystemFlags_IF_MODIFIED_AFTER 32
#define SODataV4_SystemFlags_IF_MODIFIED_BEFORE 64
#define SODataV4_SystemFlags_IGNORE_DELETED_FLAG 128
#define SODataV4_SystemFlags_DEFER_EXPAND 256
#define SODataV4_SystemFlags_LOCAL_SET 1
#define SODataV4_SystemFlags_SYSTEM_SET 2
#define SODataV4_SystemFlags_IS_NEW 1
#define SODataV4_SystemFlags_IS_CREATED 2
#define SODataV4_SystemFlags_IS_UPDATED 4
#define SODataV4_SystemFlags_IS_DELETED 8
#define SODataV4_SystemFlags_IS_LOCAL 16
#define SODataV4_SystemFlags_IS_REFERENCE 32
#define SODataV4_SystemFlags_IS_PATCH 64
#define SODataV4_SystemFlags_IS_PATCHED 128
#define SODataV4_SystemFlags_IN_ERROR_STATE 512
#define SODataV4_SystemFlags_HAS_CHANGED_BINDINGS 1024
#define SODataV4_SystemFlags_IS_BINDING 2048
#define SODataV4_SystemFlags_IN_CREATE_MEDIA 4096
#define SODataV4_SystemFlags_IN_UPLOAD_MEDIA 8192
#define SODataV4_SystemFlags_HAS_PENDING_CHANGES 16384
#define SODataV4_SystemFlags_HAS_LOCAL_RELATIVES_HASVALUE 32768
#define SODataV4_SystemFlags_HAS_LOCAL_RELATIVES 65536
#define SODataV4_SystemFlags_HAS_RELATIVES_WITH_PENDING_CHANGES_HASVALUE 131072
#define SODataV4_SystemFlags_HAS_RELATIVES_WITH_PENDING_CHANGES 262144
#define SODataV4_SystemFlags_HAS_CLIENT_PROVIDED_KEY 524288
#define SODataV4_SystemFlags_IS_RESOLVING 1048576
#define SODataV4_SystemFlags_IS_RESOLVED 2097152
#define SODataV4_SystemFlags_IN_UPLOAD 1024
#define SODataV4_SystemFlags_IN_DOWNLOAD 2048
#define SODataV4_SystemFlags_IN_SYNC_TRAN 4096
#define SODataV4_SystemFlags_FLAG_SAVE_SRID 1
#define SODataV4_SystemFlags_FLAG_SAVE_DATE_TIME_AS_DATE 2
@end
#endif
#endif

#ifdef import_SODataV4__SystemKey_internal
#ifndef imported_SODataV4__SystemKey_internal
#define imported_SODataV4__SystemKey_public
/* internal */
@interface SODataV4_SystemKey : SODataV4_ObjectBase
{
}
+ (void) initialize;
+ (SODataV4_long) build :(SODataV4_int)sk1 :(SODataV4_short)sk2;
+ (SODataV4_int) part1 :(SODataV4_long)sk;
+ (nonnull SODataV4_Property*) part1Property;
+ (SODataV4_short) part2 :(SODataV4_long)sk;
+ (nonnull SODataV4_Property*) part2Property;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_Property* part1Property;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_Property* part2Property;
@end
#endif
#endif

#ifdef import_SODataV4__SystemKey_private
#ifndef imported_SODataV4__SystemKey_private
#define imported_SODataV4__SystemKey_private
@interface SODataV4_SystemKey (private)
+ (nonnull SODataV4_Property*) _new1 :(nonnull NSString*)p1 :(nullable NSString*)p2 :(nonnull SODataV4_DataType*)p3;
@end
#endif
#endif

#ifdef import_SODataV4__TimeNumber_internal
#ifndef imported_SODataV4__TimeNumber_internal
#define imported_SODataV4__TimeNumber_public
/* internal */
@interface SODataV4_TimeNumber : SODataV4_ObjectBase
{
}
+ (SODataV4_long) fromFields :(SODataV4_int)h :(SODataV4_int)m :(SODataV4_int)s :(SODataV4_long)n :(SODataV4_int)z;
+ (SODataV4_int) getMillis :(SODataV4_int)h :(SODataV4_int)m :(SODataV4_int)s :(SODataV4_int)n :(SODataV4_int)z;
+ (SODataV4_int) getSeconds :(SODataV4_int)h :(SODataV4_int)m :(SODataV4_int)s :(SODataV4_int)z;
+ (nonnull SODataV4_LocalTime*) toLocalTime :(SODataV4_long)nanos;
#define SODataV4_TimeNumber_NANOS_PER_DAY SODataV4_LONG(86400000000000)
#define SODataV4_TimeNumber_NANOS_PER_HOUR SODataV4_LONG(3600000000000)
#define SODataV4_TimeNumber_NANOS_PER_MINUTE SODataV4_LONG(60000000000)
#define SODataV4_TimeNumber_NANOS_PER_SECOND SODataV4_LONG(1000000000)
#define SODataV4_TimeNumber_MICROS_PER_DAY SODataV4_LONG(86400000000)
#define SODataV4_TimeNumber_MILLIS_PER_DAY SODataV4_LONG(86400000)
#define SODataV4_TimeNumber_SECONDS_PER_DAY SODataV4_LONG(86400)
#define SODataV4_TimeNumber_SECONDS_PER_HOUR SODataV4_LONG(3600)
#define SODataV4_TimeNumber_SECONDS_PER_MINUTE SODataV4_LONG(60)
#define SODataV4_TimeNumber_MINUTES_PER_DAY SODataV4_LONG(1440)
#define SODataV4_TimeNumber_HOURS_PER_DAY 24
#define SODataV4_TimeNumber_DOUBLE_NANOS_PER_DAY 86400000000000.0
#define SODataV4_TimeNumber_DOUBLE_SECONDS_PER_DAY 86400.0
@end
#endif
#endif

#ifndef imported_SODataV4__TypeFacets_public
#define imported_SODataV4__TypeFacets_public
/// @brief Encapsulates the metadata of custom [OData](http://odata.org) type facets.
///
///
/// @see `SODataV4_DataMethod`, `SODataV4_Parameter`, `SODataV4_Property`, `SODataV4_SimpleType`,
@interface SODataV4_TypeFacets : SODataV4_ObjectBase
{
    @private SODataV4_nullable_boolean isNullable_;
    @private SODataV4_nullable_boolean isUnicode_;
    @private SODataV4_nullable_int minLength_;
    @private SODataV4_nullable_int maxLength_;
    @private SODataV4_nullable_int precision_;
    @private SODataV4_nullable_int scale_;
    @private SODataV4_nullable_int srid_;
    @private SODataV4_DataValue* _Nullable defaultValue_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_TypeFacets*) new;
/// @internal
///
- (void) _init;
/// @brief Default value for the associated definition.
///
///
- (nullable SODataV4_DataValue*) defaultValue;
/// @brief Is the associated value nullable?
///
/// If `isNullable` is `nil`, then it implies the value `true`.
- (SODataV4_nullable_boolean) isNullable;
/// @brief Does the associated value permit Unicode characters?
///
/// If `isUnicode` is `nil`, then it implies the value `true`.
- (SODataV4_nullable_boolean) isUnicode;
/// @brief Maximum length of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_LENGTH.
- (SODataV4_nullable_int) maxLength;
/// @internal
///
+ (nullable SODataV4_TypeFacets*) merge :(nullable SODataV4_TypeFacets*)from :(nullable SODataV4_TypeFacets*)to;
/// @brief Minimum length of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_LENGTH.
- (SODataV4_nullable_int) minLength;
/// @brief Precision of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_PRECISION.
- (SODataV4_nullable_int) precision;
/// @brief Scale of the associated value, or `nil`, then it implies the value `0`.
///
///
/// @see FLOATING_SCALE, VARIABLE_SCALE.
- (SODataV4_nullable_int) scale;
/// @brief Default value for the associated definition.
///
///
- (void) setDefaultValue :(nullable SODataV4_DataValue*)value;
/// @brief Is the associated value nullable?
///
/// If `isNullable` is `nil`, then it implies the value `true`.
- (void) setIsNullable :(SODataV4_nullable_boolean)value;
/// @brief Does the associated value permit Unicode characters?
///
/// If `isUnicode` is `nil`, then it implies the value `true`.
- (void) setIsUnicode :(SODataV4_nullable_boolean)value;
/// @brief Maximum length of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_LENGTH.
- (void) setMaxLength :(SODataV4_nullable_int)value;
/// @brief Minimum length of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_LENGTH.
- (void) setMinLength :(SODataV4_nullable_int)value;
/// @brief Precision of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_PRECISION.
- (void) setPrecision :(SODataV4_nullable_int)value;
/// @brief Scale of the associated value, or `nil`, then it implies the value `0`.
///
///
/// @see FLOATING_SCALE, VARIABLE_SCALE.
- (void) setScale :(SODataV4_nullable_int)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value, or `nil` for unspecified.
///
///
/// @see VARIABLE_SRID.
- (void) setSrid :(SODataV4_nullable_int)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value, or `nil` for unspecified.
///
///
/// @see VARIABLE_SRID.
- (SODataV4_nullable_int) srid;
#define SODataV4_TypeFacets_ANY_LENGTH 0
#define SODataV4_TypeFacets_ANY_PRECISION 0
#define SODataV4_TypeFacets_FLOATING_SCALE SODataV4_INT_MIN
#define SODataV4_TypeFacets_VARIABLE_SCALE 2147483647
#define SODataV4_TypeFacets_VARIABLE_SRID 2147483647
/// @brief Default value for the associated definition.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValue* defaultValue;
/// @brief Is the associated value nullable?
///
/// If `isNullable` is `nil`, then it implies the value `true`.
@property (nonatomic, readwrite) SODataV4_nullable_boolean isNullable;
/// @brief Does the associated value permit Unicode characters?
///
/// If `isUnicode` is `nil`, then it implies the value `true`.
@property (nonatomic, readwrite) SODataV4_nullable_boolean isUnicode;
/// @brief Maximum length of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_nullable_int maxLength;
/// @brief Minimum length of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_nullable_int minLength;
/// @brief Precision of the associated value, or `nil` for unspecified.
///
///
/// @see ANY_PRECISION.
@property (nonatomic, readwrite) SODataV4_nullable_int precision;
/// @brief Scale of the associated value, or `nil`, then it implies the value `0`.
///
///
/// @see FLOATING_SCALE, VARIABLE_SCALE.
@property (nonatomic, readwrite) SODataV4_nullable_int scale;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value, or `nil` for unspecified.
///
///
/// @see VARIABLE_SRID.
@property (nonatomic, readwrite) SODataV4_nullable_int srid;
@end
#endif

#ifdef import_SODataV4__TypeFacets_private
#ifndef imported_SODataV4__TypeFacets_private
#define imported_SODataV4__TypeFacets_private
@interface SODataV4_TypeFacets (private)
+ (SODataV4_nullable_boolean) mergeBoolean :(SODataV4_nullable_boolean)from :(SODataV4_nullable_boolean)to;
+ (SODataV4_nullable_int) mergeInt :(SODataV4_nullable_int)from :(SODataV4_nullable_int)to;
+ (nullable SODataV4_DataValue*) mergeValue :(nullable SODataV4_DataValue*)from :(nullable SODataV4_DataValue*)to;
@end
#endif
#endif

#define SODataV4_UpdateMode_merge 1
#define SODataV4_UpdateMode_replace 2

#ifndef imported_SODataV4__UpdateMode_public
#define imported_SODataV4__UpdateMode_public
/// @brief Update mode for entity updates.
///
///
/// @see `SODataV4_RequestOptions`.`updateMode`.
@interface SODataV4_UpdateMode : SODataV4_ObjectBase
{
    @private SODataV4_int _value;
}
+ (void) initialize;
+ (nonnull SODataV4_UpdateMode*) of :(SODataV4_int) value;
- (SODataV4_int) value;
@property (nonatomic, readonly) SODataV4_int value;
+ (nonnull SODataV4_UpdateMode*) merge;
@property (nonnull, nonatomic, readonly, strong, class) SODataV4_UpdateMode* merge;
+ (nonnull SODataV4_UpdateMode*) replace;
@property (nonnull, nonatomic, readonly, strong, class) SODataV4_UpdateMode* replace;
@end
#endif

#ifdef import_SODataV4__WellKnownText_internal
#ifndef imported_SODataV4__WellKnownText_internal
#define imported_SODataV4__WellKnownText_public
/* internal */
@interface SODataV4_WellKnownText : SODataV4_ObjectBase
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_WellKnownText*) new;
/// @internal
///
- (void) _init;
+ (nonnull NSString*) afterParsingSRID :(nonnull NSString*)text :(nonnull SODataV4_MutableInt*)srid :(SODataV4_boolean)sridRequired;
+ (nonnull NSString*) expectKindParens :(nonnull NSString*)text :(nonnull NSString*)kind :(SODataV4_boolean)kindRequired;
+ (nonnull NSString*) optionalSRID :(SODataV4_int)srid :(SODataV4_boolean)sridRequired;
+ (nonnull SODataV4_StringList*) splitWithComma :(nonnull NSString*)text;
+ (nonnull SODataV4_StringList*) splitWithSpace :(nonnull NSString*)text;
@end
#endif
#endif

#ifdef import_SODataV4__AnnotationList_SortByName_internal
#ifndef imported_SODataV4__AnnotationList_SortByName_internal
#define imported_SODataV4__AnnotationList_SortByName_public
/* internal */
@interface SODataV4_AnnotationList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_AnnotationList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_AnnotationList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__AnnotationMap_public
#define imported_SODataV4__AnnotationMap_public
/// @internal
///
@interface SODataV4_AnnotationMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_AnnotationMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_AnnotationMap*) new;
/// @brief Construct a new map with `SODataV4_AnnotationMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnnotationMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `value` to this map
///
///
/// @param value Annotation to be added. For annotations without qualifiers, the entry key is the annotation term name. For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
- (void) add :(nonnull SODataV4_Annotation*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_AnnotationMap`.
///
///
+ (nonnull SODataV4_AnnotationMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_AnnotationMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_Annotation*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_Annotation*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_Annotation*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_AnnotationMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_Annotation*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_AnnotationMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_AnnotationList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_AnnotationList*) values;
/// @brief An immutable empty `SODataV4_AnnotationMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__AnnotationMap_private
#ifndef imported_SODataV4__AnnotationMap_private
#define imported_SODataV4__AnnotationMap_private
@interface SODataV4_AnnotationMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_AnnotationMap_Entry*) _new1 :(nonnull SODataV4_Annotation*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifdef import_SODataV4__AnnotationMap_internal
#ifndef imported_SODataV4__AnnotationMap_internal
#define imported_SODataV4__AnnotationMap_internal
@interface SODataV4_AnnotationMap (internal)
- (nonnull SODataV4_Annotation*) getRequiredForCaller :(nonnull NSString*)name :(nonnull NSObject*)caller;
@end
#endif
#endif

#ifndef imported_SODataV4__AnnotationTermMap_public
#define imported_SODataV4__AnnotationTermMap_public
/// @internal
///
@interface SODataV4_AnnotationTermMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_AnnotationTermMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_AnnotationTermMap*) new;
/// @brief Construct a new map with `SODataV4_AnnotationTermMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnnotationTermMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_AnnotationTerm*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_AnnotationTermMap`.
///
///
+ (nonnull SODataV4_AnnotationTermMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_AnnotationTermMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_AnnotationTerm*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_AnnotationTerm*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_AnnotationTerm*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_AnnotationTermMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_AnnotationTerm*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_AnnotationTermMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_AnnotationTermList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_AnnotationTermList*) values;
/// @brief An immutable empty `SODataV4_AnnotationTermMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationTermMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__AnnotationTermMap_private
#ifndef imported_SODataV4__AnnotationTermMap_private
#define imported_SODataV4__AnnotationTermMap_private
@interface SODataV4_AnnotationTermMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_AnnotationTermMap_Entry*) _new1 :(nonnull SODataV4_AnnotationTerm*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__AnyMap_public
#define imported_SODataV4__AnyMap_public
/// @internal
///
@interface SODataV4_AnyMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_AnyMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_AnyMap*) new;
/// @brief Construct a new map with `SODataV4_AnyMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnyMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_AnyMap`.
///
///
+ (nonnull SODataV4_AnyMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_AnyMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable NSObject*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nullable NSObject*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nullable NSObject*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_AnyMap*) setThis :(nonnull NSString*)key :(nullable NSObject*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_AnyMap_EntryList*) sortedEntries;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_AnyList*) values;
/// @brief An immutable empty `SODataV4_AnyMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnyMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__AnyMap_private
#ifndef imported_SODataV4__AnyMap_private
#define imported_SODataV4__AnyMap_private
@interface SODataV4_AnyMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_AnyMap_Entry*) _new1 :(nullable NSObject*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__BinaryValue_public
#define imported_SODataV4__BinaryValue_public
/// @brief DataValue subclass that wraps a `SODataV4_BinaryValue`.`value` of type `binary`.
///
///
@interface SODataV4_BinaryValue : SODataV4_DataValue
{
    @private NSData* _Nonnull value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_BinaryValue*)left :(nonnull SODataV4_BinaryValue*)right;
/// @brief The type BasicType.BINARY.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief A wrapped empty binary value.
///
///
+ (nonnull SODataV4_BinaryValue*) empty;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_BinaryValue*)left :(nullable SODataV4_BinaryValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `binary` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_BinaryValue*) of :(nonnull NSData*)value;
/// @brief Wrap a nullable `binary` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_BinaryValue*) ofNullable :(nullable NSData*)value;
/// @brief Convert a wrapped `binary` value to a nullable binary.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `binary` or `nil`.
/// @return A nullable binary.
/// @param value The wrapped value.
+ (nullable NSData*) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_BinaryValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `binary` value to a binary.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `binary`.
/// @return A binary.
/// @param value The wrapped value.
+ (nonnull NSData*) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (nonnull NSData*) value;
/// @brief The type BasicType.BINARY.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief A wrapped empty binary value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_BinaryValue* empty;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) NSData* value;
@end
#endif

#ifdef import_SODataV4__BinaryValue_private
#ifndef imported_SODataV4__BinaryValue_private
#define imported_SODataV4__BinaryValue_private
@interface SODataV4_BinaryValue (private)
+ (nonnull SODataV4_BinaryValue*) new;
+ (nonnull SODataV4_BinaryValue*) _new1 :(nonnull NSData*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__BooleanValue_public
#define imported_SODataV4__BooleanValue_public
/// @brief DataValue subclass that wraps a `SODataV4_BooleanValue`.`value` of type `boolean`.
///
///
@interface SODataV4_BooleanValue : SODataV4_DataValue
{
    @private SODataV4_boolean value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_BooleanValue*)left :(nonnull SODataV4_BooleanValue*)right;
/// @brief The type BasicType.BOOLEAN.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_BooleanValue*)left :(nullable SODataV4_BooleanValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `boolean` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_BooleanValue*) of :(SODataV4_boolean)value;
/// @brief Wrap a nullable `boolean` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_BooleanValue*) ofNullable :(SODataV4_nullable_boolean)value;
/// @brief Convert a wrapped `boolean` value to a nullable boolean.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `boolean` or `nil`.
/// @return A nullable boolean.
/// @param value The wrapped value.
+ (SODataV4_nullable_boolean) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_BooleanValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `boolean` value to a boolean.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `boolean`.
/// @return A boolean.
/// @param value The wrapped value.
+ (SODataV4_boolean) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (SODataV4_boolean) value;
/// @brief The type BasicType.BOOLEAN.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_boolean value;
@end
#endif

#ifdef import_SODataV4__BooleanValue_private
#ifndef imported_SODataV4__BooleanValue_private
#define imported_SODataV4__BooleanValue_private
@interface SODataV4_BooleanValue (private)
+ (nonnull SODataV4_BooleanValue*) new;
+ (nonnull SODataV4_BooleanValue*) _new1 :(SODataV4_boolean)p1;
+ (nonnull SODataV4_BooleanValue*) falseValue;
+ (nonnull SODataV4_BooleanValue*) trueValue;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_BooleanValue* falseValue;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_BooleanValue* trueValue;
@end
#endif
#endif

#ifndef imported_SODataV4__ByteValue_public
#define imported_SODataV4__ByteValue_public
/// @brief DataValue subclass that wraps a `SODataV4_ByteValue`.`value` of type `byte`.
///
///
@interface SODataV4_ByteValue : SODataV4_DataValue
{
    @private SODataV4_byte value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_ByteValue*)left :(nonnull SODataV4_ByteValue*)right;
/// @brief The type BasicType.BYTE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_ByteValue*)left :(nullable SODataV4_ByteValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `byte` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_ByteValue*) of :(SODataV4_byte)value;
/// @brief Wrap a nullable `byte` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_ByteValue*) ofNullable :(SODataV4_nullable_byte)value;
/// @brief Convert a wrapped `byte` value to a nullable byte.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `byte` or `nil`.
/// @return A nullable byte.
/// @param value The wrapped value.
+ (SODataV4_nullable_byte) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_ByteValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `byte` value to a byte.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `byte`.
/// @return A byte.
/// @param value The wrapped value.
+ (SODataV4_byte) unwrap :(nullable NSObject*)value;
/// @brief Check if argument would be a valid `SODataV4_ByteValue`.
///
///
/// @throw `SODataV4_CastException` if `value` is out of the valid range of `SODataV4_ByteValue`.
/// @return The argument without modification.
/// @param value The value to be validated.
+ (SODataV4_byte) validate :(SODataV4_byte)value;
/// @brief The wrapped value.
///
///
- (SODataV4_byte) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_ByteValue*) zero;
/// @brief The type BasicType.BYTE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_byte value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ByteValue* zero;
@end
#endif

#ifdef import_SODataV4__ByteValue_private
#ifndef imported_SODataV4__ByteValue_private
#define imported_SODataV4__ByteValue_private
@interface SODataV4_ByteValue (private)
+ (nonnull SODataV4_ByteValue*) new;
+ (nonnull SODataV4_ByteValue*) _new1 :(SODataV4_byte)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__CharValue_public
#define imported_SODataV4__CharValue_public
/// @brief DataValue subclass that wraps a `SODataV4_CharValue`.`value` of type `char`.
///
///
@interface SODataV4_CharValue : SODataV4_DataValue
{
    @private SODataV4_char value_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nullable SODataV4_CharValue*)left :(nullable SODataV4_CharValue*)right;
/// @brief The type BasicType.CHAR.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_CharValue*)left :(nullable SODataV4_CharValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `char` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_CharValue*) of :(SODataV4_char)value;
/// @brief Wrap a nullable `char` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_CharValue*) ofNullable :(SODataV4_nullable_char)value;
/// @brief Convert a wrapped `char` value to a nullable char.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `char` or `nil`.
/// @return A nullable char.
/// @param value The wrapped value.
+ (SODataV4_nullable_char) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_CharValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `char` value to a char.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `char`.
/// @return A char.
/// @param value The wrapped value.
+ (SODataV4_char) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (SODataV4_char) value;
/// @brief The type BasicType.CHAR.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_char value;
@end
#endif

#ifdef import_SODataV4__CharValue_private
#ifndef imported_SODataV4__CharValue_private
#define imported_SODataV4__CharValue_private
@interface SODataV4_CharValue (private)
+ (nonnull SODataV4_CharValue*) new;
+ (nonnull SODataV4_CharValue*) _new1 :(SODataV4_char)p1;
@end
#endif
#endif

#ifdef import_SODataV4__ComplexComparer_internal
#ifndef imported_SODataV4__ComplexComparer_internal
#define imported_SODataV4__ComplexComparer_public
/* internal */
@interface SODataV4_ComplexComparer : SODataV4_Comparer
{
    @private SODataV4_DataQuery* _Nonnull query_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ComplexComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_DataQuery*) query;
- (void) setQuery :(nonnull SODataV4_DataQuery*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataQuery* query;
@end
#endif
#endif

#ifdef import_SODataV4__ComplexTypeList_SortByName_internal
#ifndef imported_SODataV4__ComplexTypeList_SortByName_internal
#define imported_SODataV4__ComplexTypeList_SortByName_public
/* internal */
@interface SODataV4_ComplexTypeList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ComplexTypeList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_ComplexTypeList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexTypeList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__ComplexTypeMap_public
#define imported_SODataV4__ComplexTypeMap_public
/// @internal
///
@interface SODataV4_ComplexTypeMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_ComplexTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_ComplexTypeMap*) new;
/// @brief Construct a new map with `SODataV4_ComplexTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexTypeMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_ComplexType*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_ComplexTypeMap`.
///
///
+ (nonnull SODataV4_ComplexTypeMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_ComplexTypeMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_ComplexType*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_ComplexType*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_ComplexType*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_ComplexTypeMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_ComplexType*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_ComplexTypeMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_ComplexTypeList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_ComplexTypeList*) values;
/// @brief An immutable empty `SODataV4_ComplexTypeMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexTypeMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__ComplexTypeMap_private
#ifndef imported_SODataV4__ComplexTypeMap_private
#define imported_SODataV4__ComplexTypeMap_private
@interface SODataV4_ComplexTypeMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_ComplexTypeMap_Entry*) _new1 :(nonnull SODataV4_ComplexType*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__ComplexValueMap_public
#define imported_SODataV4__ComplexValueMap_public
/// @internal
///
@interface SODataV4_ComplexValueMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_ComplexValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_ComplexValueMap*) new;
/// @brief Construct a new map with `SODataV4_ComplexValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexValueMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_ComplexValueMap`.
///
///
+ (nonnull SODataV4_ComplexValueMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_ComplexValueMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_ComplexValue*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_ComplexValue*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_ComplexValue*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_ComplexValueMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_ComplexValue*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_ComplexValueList*) values;
/// @brief An immutable empty `SODataV4_ComplexValueMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexValueMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__ComplexValueMap_private
#ifndef imported_SODataV4__ComplexValueMap_private
#define imported_SODataV4__ComplexValueMap_private
@interface SODataV4_ComplexValueMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_ComplexValueMap_Entry*) _new1 :(nonnull SODataV4_ComplexValue*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__DataComparer_public
#define imported_SODataV4__DataComparer_public
/// @internal
///
@interface SODataV4_DataComparer : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two values for sorting.
///
///
/// @return A zero value if `left` is equal to `right` in sorted order, a negative value (e.g. -1) if `left` is less than `right` in sorted order, or a positive value (e.g. 1) if `left` is greater than `right` in sorted order.
/// @param left First value for comparison.
/// @param right Second value for comparison.
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
/// @brief Data comparer singleton.
///
///
+ (nonnull SODataV4_Comparer*) singleton;
/// @brief Data comparer singleton.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_Comparer* singleton;
@end
#endif

#ifdef import_SODataV4__DataComparer_private
#ifndef imported_SODataV4__DataComparer_private
#define imported_SODataV4__DataComparer_private
@interface SODataV4_DataComparer (private)
+ (nonnull SODataV4_DataComparer*) new;
@end
#endif
#endif

#ifndef imported_SODataV4__DataEquality_public
#define imported_SODataV4__DataEquality_public
/// @internal
///
@interface SODataV4_DataEquality : SODataV4_Equality
{
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two values for equality.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left First value for comparison.
/// @param right Second value for comparison.
- (SODataV4_boolean) equal :(nullable NSObject*)left :(nullable NSObject*)right;
/// @brief Data equality singleton.
///
///
+ (nonnull SODataV4_Equality*) singleton;
/// @brief Data equality singleton.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_Equality* singleton;
@end
#endif

#ifdef import_SODataV4__DataEquality_private
#ifndef imported_SODataV4__DataEquality_private
#define imported_SODataV4__DataEquality_private
@interface SODataV4_DataEquality (private)
+ (nonnull SODataV4_DataEquality*) new;
@end
#endif
#endif

#ifdef import_SODataV4__DataMethodList_SortByName_internal
#ifndef imported_SODataV4__DataMethodList_SortByName_internal
#define imported_SODataV4__DataMethodList_SortByName_public
/* internal */
@interface SODataV4_DataMethodList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMethodList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_DataMethodList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMethodList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__DataMethodMap_public
#define imported_SODataV4__DataMethodMap_public
/// @internal
///
@interface SODataV4_DataMethodMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_DataMethodMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_DataMethodMap*) new;
/// @brief Construct a new map with `SODataV4_DataMethodMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataMethodMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_DataMethod*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_DataMethodMap`.
///
///
+ (nonnull SODataV4_DataMethodMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_DataMethodMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_DataMethod*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_DataMethod*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_DataMethod*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_DataMethodMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_DataMethod*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_DataMethodMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_DataMethodList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_DataMethodList*) values;
/// @brief An immutable empty `SODataV4_DataMethodMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMethodMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__DataMethodMap_private
#ifndef imported_SODataV4__DataMethodMap_private
#define imported_SODataV4__DataMethodMap_private
@interface SODataV4_DataMethodMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_DataMethodMap_Entry*) _new1 :(nonnull SODataV4_DataMethod*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifdef import_SODataV4__DataMetricList_SortByMetric_internal
#ifndef imported_SODataV4__DataMetricList_SortByMetric_internal
#define imported_SODataV4__DataMetricList_SortByMetric_public
/* internal */
@interface SODataV4_DataMetricList_SortByMetric : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataMetricList_SortByMetric*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_DataMetricList_SortByMetric*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMetricList_SortByMetric* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__DataMetricMap_public
#define imported_SODataV4__DataMetricMap_public
/// @internal
///
@interface SODataV4_DataMetricMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_DataMetricMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_DataMetricMap*) new;
/// @brief Construct a new map with `SODataV4_DataMetricMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataMetricMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_DataMetricMap`.
///
///
+ (nonnull SODataV4_DataMetricMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_DataMetricMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_DataMetric*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_DataMetric*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_DataMetric*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_DataMetricMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_DataMetric*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_DataMetricList*) values;
/// @brief An immutable empty `SODataV4_DataMetricMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMetricMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__DataMetricMap_private
#ifndef imported_SODataV4__DataMetricMap_private
#define imported_SODataV4__DataMetricMap_private
@interface SODataV4_DataMetricMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_DataMetricMap_Entry*) _new1 :(nonnull SODataV4_DataMetric*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__DataSchemaMap_public
#define imported_SODataV4__DataSchemaMap_public
/// @internal
///
@interface SODataV4_DataSchemaMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_DataSchemaMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_DataSchemaMap*) new;
/// @brief Construct a new map with `SODataV4_DataSchemaMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataSchemaMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.namespace` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_DataSchema*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_DataSchemaMap`.
///
///
+ (nonnull SODataV4_DataSchemaMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_DataSchemaMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_DataSchema*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_DataSchema*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_DataSchema*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_DataSchemaMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_DataSchema*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_DataSchemaMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_DataSchemaList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_DataSchemaList*) values;
/// @brief An immutable empty `SODataV4_DataSchemaMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataSchemaMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__DataSchemaMap_private
#ifndef imported_SODataV4__DataSchemaMap_private
#define imported_SODataV4__DataSchemaMap_private
@interface SODataV4_DataSchemaMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_DataSchemaMap_Entry*) _new1 :(nonnull SODataV4_DataSchema*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifdef import_SODataV4__DataTypeList_SortByName_internal
#ifndef imported_SODataV4__DataTypeList_SortByName_internal
#define imported_SODataV4__DataTypeList_SortByName_public
/* internal */
@interface SODataV4_DataTypeList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataTypeList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_DataTypeList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataTypeList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__DataTypeMap_public
#define imported_SODataV4__DataTypeMap_public
/// @internal
///
@interface SODataV4_DataTypeMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_DataTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_DataTypeMap*) new;
/// @brief Construct a new map with `SODataV4_DataTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataTypeMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_DataTypeMap`.
///
///
+ (nonnull SODataV4_DataTypeMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_DataTypeMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_DataType*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_DataType*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_DataType*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_DataTypeMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_DataType*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_DataTypeList*) values;
/// @brief An immutable empty `SODataV4_DataTypeMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataTypeMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__DataTypeMap_private
#ifndef imported_SODataV4__DataTypeMap_private
#define imported_SODataV4__DataTypeMap_private
@interface SODataV4_DataTypeMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_DataTypeMap_Entry*) _new1 :(nonnull SODataV4_DataType*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__DataValueMap_public
#define imported_SODataV4__DataValueMap_public
/// @brief A map from key type `string` to value type `SODataV4_DataValue`?.
///
///
@interface SODataV4_DataValueMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_DataValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_DataValueMap*) new;
/// @brief Construct a new map with `SODataV4_DataValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataValueMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_DataValueMap`.
///
///
+ (nonnull SODataV4_DataValueMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_DataValueMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_DataValue*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nullable SODataV4_DataValue*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nullable SODataV4_DataValue*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_DataValueMap*) setThis :(nonnull NSString*)key :(nullable SODataV4_DataValue*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_DataValueList*) values;
/// @brief An immutable empty `SODataV4_DataValueMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataValueMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__DataValueMap_private
#ifndef imported_SODataV4__DataValueMap_private
#define imported_SODataV4__DataValueMap_private
@interface SODataV4_DataValueMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_DataValueMap_Entry*) _new1 :(nullable SODataV4_DataValue*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__DayTimeDuration_public
#define imported_SODataV4__DayTimeDuration_public
/// @brief Represents the XML Schema [dayTimeDuration](http://www.w3.org/TR/xmlschema11-2/#dayTimeDuration) type.
///
///
@interface SODataV4_DayTimeDuration : SODataV4_DataValue
{
    @private SODataV4_byte _sign;
    @private SODataV4_int _days;
    @private SODataV4_int _hours;
    @private SODataV4_int _minutes;
    @private SODataV4_int _seconds;
    @private SODataV4_int _nanos;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_DayTimeDuration*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_DayTimeDuration*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return -1 if `left < right`, 0 if `left == right`, or 1 if `left > right`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_DayTimeDuration*)left :(nonnull SODataV4_DayTimeDuration*)right;
/// @brief Compare this dayTimeDuration with another dayTimeDuration.
///
///
/// @return -1 if this dayTimeDuration is less than the value dayTimeDuration, 0 if they are equal, 1 if this dayTimeDuration is greater than the value dayTimeDuration.
/// @param value The other dayTimeDuration.
- (SODataV4_int) compareTo :(nonnull SODataV4_DayTimeDuration*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Days field of duration (non-negative).
///
///
- (SODataV4_int) days;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_DayTimeDuration*)left :(nullable SODataV4_DayTimeDuration*)right;
/// @brief Compare this dayTimeDuration value with another dayTimeDuration value.
///
///
/// @return True, if this dayTimeDuration value is equal to the value dayTimeDuration value. Otherwise `false`.
/// @param value The other dayTimeDuration value.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Compare this dayTimeDuration value with another dayTimeDuration value.
///
///
/// @return `true` if this dayTimeDuration value is greater than or equal to the value dayTimeDuration value. Oherwise `false`.
/// @param value The other dayTimeDuration value.
- (SODataV4_boolean) greaterEqual :(nonnull SODataV4_DayTimeDuration*)value;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return `true` if `left` is greater than or equal to `right`, otherwise `false`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_boolean) greaterEqual :(nonnull SODataV4_DayTimeDuration*)left :(nonnull SODataV4_DayTimeDuration*)right;
/// @brief Compare this dayTimeDuration value with another dayTimeDuration value.
///
///
/// @return `true` if this dayTimeDuration value is greater than the value dayTimeDuration value. Oherwise `false`.
/// @param value The other dayTimeDuration value.
- (SODataV4_boolean) greaterThan :(nonnull SODataV4_DayTimeDuration*)value;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return `true` if `left` is greater than `right`, otherwise `false`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_boolean) greaterThan :(nonnull SODataV4_DayTimeDuration*)left :(nonnull SODataV4_DayTimeDuration*)right;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Hours field of duration (non-negative).
///
///
- (SODataV4_int) hours;
/// @brief Compare this dayTimeDuration value with another dayTimeDuration value.
///
///
/// @return `true` if this dayTimeDuration value is less than or equal to the value dayTimeDuration value. Oherwise `false`.
/// @param value The other dayTimeDuration value.
- (SODataV4_boolean) lessEqual :(nonnull SODataV4_DayTimeDuration*)value;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return `true` if `left` is less than or equal to `right`, otherwise `false`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_boolean) lessEqual :(nonnull SODataV4_DayTimeDuration*)left :(nonnull SODataV4_DayTimeDuration*)right;
/// @brief Compare this dayTimeDuration value with another dayTimeDuration value.
///
///
/// @return `true` if this dayTimeDuration value is less than the value dayTimeDuration value. Oherwise `false`.
/// @param value The other dayTimeDuration value.
- (SODataV4_boolean) lessThan :(nonnull SODataV4_DayTimeDuration*)value;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return `true` if `left` is less than `right`, otherwise `false`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_boolean) lessThan :(nonnull SODataV4_DayTimeDuration*)left :(nonnull SODataV4_DayTimeDuration*)right;
/// @brief Minutes field of duration (non-negative).
///
///
- (SODataV4_int) minutes;
/// @brief Nanoseconds field of duration (non-negative).
///
///
- (SODataV4_int) nanos;
/// @return An equivalent value with all fields normalized.
/// The result value will have nanos < 1000000000, seconds < 60, minutes < 60, hours < 24.
/// The result value will be `SODataV4_DayTimeDuration`.`equal` to this value.
- (nonnull SODataV4_DayTimeDuration*) normalize;
/// @brief Compare this dayTimeDuration value with another dayTimeDuration value.
///
///
/// @return `true` if this dayTimeDuration value is not equal to the value dayTimeDuration value. Oherwise `false`.
/// @param value The other dayTimeDuration value.
- (SODataV4_boolean) notEqual :(nonnull SODataV4_DayTimeDuration*)value;
/// @brief Compare two dayTimeDuration values.
///
///
/// @return `true` if `left` is not equal to `right`, otherwise `false`.
/// @param left The first dayTimeDuration for comparison.
/// @param right The second dayTimeDuration for comparison.
+ (SODataV4_boolean) notEqual :(nullable SODataV4_DayTimeDuration*)left :(nullable SODataV4_DayTimeDuration*)right;
/// @internal
///
+ (nonnull SODataV4_DayTimeDuration*) of :(SODataV4_int)sign :(SODataV4_int)days :(SODataV4_int)hours :(SODataV4_int)minutes :(SODataV4_int)seconds;
/// @return A new day/time duration.
/// @param sign The sign field (+1, 0 or -1).
/// @param days The days field (non-negative).
/// @param hours The hours field (non-negative).
/// @param minutes The minutes field (non-negative).
/// @param seconds The seconds field (non-negative).
/// @param nanos (optional) The nanos field (non-negative, `<= 999999999`).
+ (nonnull SODataV4_DayTimeDuration*) of :(SODataV4_int)sign :(SODataV4_int)days :(SODataV4_int)hours :(SODataV4_int)minutes :(SODataV4_int)seconds :(SODataV4_int)nanos;
/// @return A new day/time duration.
/// @param seconds Duration expressed as decimal seconds with optional fraction.
+ (nonnull SODataV4_DayTimeDuration*) ofDecimal :(nonnull SODataV4_BigDecimal*)seconds;
/// @return Value parsed from [XML Schema format](http://www.w3.org/TR/xmlschema11-2/#dayTimeDuration), or `nil` if `text` has invalid duration format.
/// @param text Value in XML Schema format.
+ (nullable SODataV4_DayTimeDuration*) parse :(nonnull NSString*)text;
/// @brief Seconds field of duration (non-negative).
///
///
- (SODataV4_int) seconds;
/// @brief Sign of the duration (+1, 0 or -1).
///
///
- (SODataV4_int) sign;
/// @return Duration expressed as decimal seconds with optional fraction.
///
- (nonnull SODataV4_BigDecimal*) toDecimal;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_DayTimeDuration`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Days field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int days;
/// @brief Hours field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int hours;
/// @brief Minutes field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int minutes;
/// @brief Nanoseconds field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int nanos;
/// @brief Seconds field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int seconds;
/// @brief Sign of the duration (+1, 0 or -1).
///
///
@property (nonatomic, readonly) SODataV4_int sign;
@end
#endif

#ifdef import_SODataV4__DayTimeDuration_private
#ifndef imported_SODataV4__DayTimeDuration_private
#define imported_SODataV4__DayTimeDuration_private
@interface SODataV4_DayTimeDuration (private)
+ (nonnull SODataV4_DayTimeDuration*) new;
+ (nonnull SODataV4_DayTimeDuration*) _new1 :(SODataV4_int)p1 :(SODataV4_int)p2 :(SODataV4_int)p3 :(SODataV4_byte)p4 :(SODataV4_int)p5 :(SODataV4_int)p6;
@end
#endif
#endif

#ifndef imported_SODataV4__DecimalValue_public
#define imported_SODataV4__DecimalValue_public
/// @brief DataValue subclass that wraps a `SODataV4_DecimalValue`.`value` of type `decimal`.
///
///
@interface SODataV4_DecimalValue : SODataV4_DataValue
{
    @private SODataV4_BigDecimal* _Nonnull value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_DecimalValue*)left :(nonnull SODataV4_DecimalValue*)right;
/// @brief The type BasicType.DECIMAL.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_DecimalValue*)left :(nullable SODataV4_DecimalValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `decimal` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_DecimalValue*) of :(nonnull SODataV4_BigDecimal*)value;
/// @brief Wrap a nullable `decimal` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_DecimalValue*) ofNullable :(nullable SODataV4_BigDecimal*)value;
/// @brief Convert a wrapped `decimal` value to a nullable decimal.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `decimal` or `nil`.
/// @return A nullable decimal.
/// @param value The wrapped value.
+ (nullable SODataV4_BigDecimal*) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_DecimalValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `decimal` value to a decimal.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `decimal`.
/// @return A decimal.
/// @param value The wrapped value.
+ (nonnull SODataV4_BigDecimal*) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (nonnull SODataV4_BigDecimal*) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_DecimalValue*) zero;
/// @brief The type BasicType.DECIMAL.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_BigDecimal* value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DecimalValue* zero;
@end
#endif

#ifdef import_SODataV4__DecimalValue_private
#ifndef imported_SODataV4__DecimalValue_private
#define imported_SODataV4__DecimalValue_private
@interface SODataV4_DecimalValue (private)
+ (nonnull SODataV4_DecimalValue*) new;
+ (nonnull SODataV4_DecimalValue*) _new1 :(nonnull SODataV4_BigDecimal*)p1;
+ (nonnull SODataV4_BigDecimal*) DECIMAL_ZERO;
@end
#define SODataV4_DecimalValue_DECIMAL_ZERO [SODataV4_DecimalValue DECIMAL_ZERO]
#endif
#endif

#ifndef imported_SODataV4__DeltaStream_public
#define imported_SODataV4__DeltaStream_public
/// @brief A stream of delta items, each of which is either an `SODataV4_EntityValue` or a `SODataV4_ChangedLink`.
///
/// While processing a stream, a delta link may be encountered, but it will not be immediately available to the caller. The `SODataV4_DeltaStream`.`deltaLink` can be obtained only after the stream is closed.
/// ### Example
/// ```` xs
/// let deltaStream = ...;
/// while (deltaStream.next())
/// {
///     if (deltaStream.hasEntity())
///     {
///         let entity = deltaStream.getEntity();
///         // Process entity value.
///     }
///     else
///     {
///         let link = deltaStream.getLink();
///         // Process changed link.
///     }
/// }
/// deltaStream.close();
/// var deltaLink = deltaStream.deltaLink;
/// // Save delta link for later use.
/// ````
@interface SODataV4_DeltaStream : SODataV4_DataValue
{
    @private SODataV4_RunAction* _Nullable closeAction_;
    @private SODataV4_boolean isClosed_;
    @private NSObject* _Nullable deltaItem_;
    @private NSString* _Nullable deltaLink_;
    @private NSString* _Nullable nextLink_;
    @private NSString* _Nullable readLink_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DeltaStream*) new;
/// @internal
///
- (void) _init;
/// @brief Close this stream and release all associated resources, without checking first that the end of stream has been reached.
///
///
/// @see `SODataV4_DeltaStream`.`close`.
- (void) abort;
/// @brief Close this stream and release all associated resources, checking first that the end of stream has been reached.
///
/// Can safely be called even if the stream was previously closed.
/// If a delta link was encountered before the stream was closed, it will be available via the `SODataV4_DeltaStream`.`deltaLink` property only after the stream is closed.
/// If a next link was encountered before the stream was closed, it will be available via the `SODataV4_DeltaStream`.`nextLink` property only after the stream is closed.
///
/// @see `SODataV4_DeltaStream`.`abort`.
- (void) close;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.DELTA_STREAM.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The current delta item (an `SODataV4_EntityValue` or `SODataV4_ChangedLink`), or `nil`.
///
///
- (nullable NSObject*) deltaItem;
/// @brief The delta-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
- (nullable NSString*) deltaLink;
/// @return the current delta item (an `SODataV4_EntityValue` or `SODataV4_ChangedLink`), or `nil` if there is no current delta item.
/// @see `SODataV4_DeltaStream`.`hasCurrent`.
- (nullable NSObject*) getCurrent;
/// @return the current entity value.
/// @throw `SODataV4_UsageException` if there no current delta item or if the current delta item is a changed link.
/// @see `SODataV4_DeltaStream`.`getCurrent`.
- (nonnull SODataV4_EntityValue*) getEntity;
/// @return the current changed link.
/// @throw `SODataV4_UsageException` if there is no current delta item or if the current delta item is an entity value.
/// @see `SODataV4_DeltaStream`.`getCurrent`.
- (nonnull SODataV4_ChangedLink*) getLink;
/// @return `true` if the if the stream has a current delta item (the most recent call to `SODataV4_DeltaStream`.`next` returned `true` and `SODataV4_DeltaStream`.`close` has not been called)).
/// @see `SODataV4_DeltaStream`.`getCurrent`.
- (SODataV4_boolean) hasCurrent;
/// @brief Check if the stream has a current delta item which is an entity value.
///
///
/// @return `true` if `SODataV4_DeltaStream`.`hasCurrent` would return `true` if called, and the current delta item is an entity value.
/// @see `SODataV4_DeltaStream`.`getEntity`.
- (SODataV4_boolean) hasEntity;
/// @brief Check if the stream has a current delta item which is a changed link.
///
///
/// @return `true` if `SODataV4_DeltaStream`.`hasCurrent` would return `true` if called, and the current delta item is a changed link.
/// @see `SODataV4_DeltaStream`.`getLink`.
- (SODataV4_boolean) hasLink;
/// @brief Has `SODataV4_DeltaStream`.`close` been called?
///
///
- (SODataV4_boolean) isClosed;
/// @brief If this stream has not been `SODataV4_DeltaStream`.`close` and has a next delta item, then advance to the next delta item and return `true`. Otherwise return `false`.
///
///
/// @return `true` if there is a next delta item available.
/// @see `SODataV4_DeltaStream`.`hasCurrent`, `SODataV4_DeltaStream`.`hasEntity`, `SODataV4_DeltaStream`.`hasLink`, `SODataV4_DeltaStream`.`getCurrent`, `SODataV4_DeltaStream`.`getEntity`, `SODataV4_DeltaStream`.`getLink`.
- (SODataV4_boolean) next;
/// @brief The next-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
- (nullable NSString*) nextLink;
/// @brief The read-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
- (nullable NSString*) readLink;
/// @brief The current delta item (an `SODataV4_EntityValue` or `SODataV4_ChangedLink`), or `nil`.
///
///
- (void) setDeltaItem :(nullable NSObject*)value;
/// @brief The delta-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
- (void) setDeltaLink :(nullable NSString*)value;
/// @brief Has `SODataV4_DeltaStream`.`close` been called?
///
///
- (void) setIsClosed :(SODataV4_boolean)value;
/// @brief The next-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
- (void) setNextLink :(nullable NSString*)value;
/// @brief The read-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
- (void) setReadLink :(nullable NSString*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_DeltaStream`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.DELTA_STREAM.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The current delta item (an `SODataV4_EntityValue` or `SODataV4_ChangedLink`), or `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSObject* deltaItem;
/// @brief The delta-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* deltaLink;
/// @brief Has `SODataV4_DeltaStream`.`close` been called?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isClosed;
/// @brief The next-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* nextLink;
/// @brief The read-link (if any) that was encountered when `SODataV4_DeltaStream`.`next` was called repeatedly until it returned `false` and then `SODataV4_DeltaStream`.`close` was called, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* readLink;
@end
#endif

#ifdef import_SODataV4__DeltaStream_internal
#ifndef imported_SODataV4__DeltaStream_internal
#define imported_SODataV4__DeltaStream_internal
@interface SODataV4_DeltaStream (internal)
- (nullable SODataV4_RunAction*) closeAction;
- (void) setCloseAction :(nullable SODataV4_RunAction*)value;
@property (nonatomic, readwrite, strong, nullable) SODataV4_RunAction* closeAction;
@end
#endif
#endif

#ifndef imported_SODataV4__DoubleValue_public
#define imported_SODataV4__DoubleValue_public
/// @brief DataValue subclass that wraps a `SODataV4_DoubleValue`.`value` of type `double`.
///
///
@interface SODataV4_DoubleValue : SODataV4_DataValue
{
    @private SODataV4_double value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_DoubleValue*)left :(nonnull SODataV4_DoubleValue*)right;
/// @brief The type BasicType.DOUBLE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_DoubleValue*)left :(nullable SODataV4_DoubleValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `double` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_DoubleValue*) of :(SODataV4_double)value;
/// @brief Wrap a nullable `double` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_DoubleValue*) ofNullable :(SODataV4_nullable_double)value;
/// @brief Convert a wrapped `double` value to a nullable double.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `double` or `nil`.
/// @return A nullable double.
/// @param value The wrapped value.
+ (SODataV4_nullable_double) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_DoubleValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @return "NaN", "INF", "-INF", or `this.toString()` for regular numbers.
///
- (nonnull NSString*) toString3;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `double` value to a double.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `double`.
/// @return A double.
/// @param value The wrapped value.
+ (SODataV4_double) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (SODataV4_double) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_DoubleValue*) zero;
/// @brief The type BasicType.DOUBLE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_double value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DoubleValue* zero;
@end
#endif

#ifdef import_SODataV4__DoubleValue_private
#ifndef imported_SODataV4__DoubleValue_private
#define imported_SODataV4__DoubleValue_private
@interface SODataV4_DoubleValue (private)
+ (nonnull SODataV4_DoubleValue*) new;
+ (nonnull SODataV4_DoubleValue*) _new1 :(SODataV4_double)p1;
@end
#endif
#endif

#ifdef import_SODataV4__EntityComparer_internal
#ifndef imported_SODataV4__EntityComparer_internal
#define imported_SODataV4__EntityComparer_public
/* internal */
@interface SODataV4_EntityComparer : SODataV4_Comparer
{
    @private SODataV4_DataQuery* _Nonnull query_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
- (nonnull SODataV4_DataQuery*) query;
- (void) setQuery :(nonnull SODataV4_DataQuery*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataQuery* query;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityContainerMap_public
#define imported_SODataV4__EntityContainerMap_public
/// @internal
///
@interface SODataV4_EntityContainerMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_EntityContainerMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_EntityContainerMap*) new;
/// @brief Construct a new map with `SODataV4_EntityContainerMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityContainerMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_EntityContainer*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_EntityContainerMap`.
///
///
+ (nonnull SODataV4_EntityContainerMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_EntityContainerMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_EntityContainer*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_EntityContainer*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_EntityContainer*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_EntityContainerMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_EntityContainer*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_EntityContainerMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_EntityContainerList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_EntityContainerList*) values;
/// @brief An immutable empty `SODataV4_EntityContainerMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityContainerMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__EntityContainerMap_private
#ifndef imported_SODataV4__EntityContainerMap_private
#define imported_SODataV4__EntityContainerMap_private
@interface SODataV4_EntityContainerMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_EntityContainerMap_Entry*) _new1 :(nonnull SODataV4_EntityContainer*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifdef import_SODataV4__EntitySetList_SortByName_internal
#ifndef imported_SODataV4__EntitySetList_SortByName_internal
#define imported_SODataV4__EntitySetList_SortByName_public
/* internal */
@interface SODataV4_EntitySetList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntitySetList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_EntitySetList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntitySetList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__EntitySetMap_public
#define imported_SODataV4__EntitySetMap_public
/// @internal
///
@interface SODataV4_EntitySetMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_EntitySetMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_EntitySetMap*) new;
/// @brief Construct a new map with `SODataV4_EntitySetMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntitySetMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_EntitySet*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_EntitySetMap`.
///
///
+ (nonnull SODataV4_EntitySetMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_EntitySetMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_EntitySet*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_EntitySet*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_EntitySet*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_EntitySetMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_EntitySet*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_EntitySetMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_EntitySetList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_EntitySetList*) values;
/// @brief An immutable empty `SODataV4_EntitySetMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntitySetMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__EntitySetMap_private
#ifndef imported_SODataV4__EntitySetMap_private
#define imported_SODataV4__EntitySetMap_private
@interface SODataV4_EntitySetMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_EntitySetMap_Entry*) _new1 :(nonnull SODataV4_EntitySet*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifdef import_SODataV4__EntityTypeList_SortByName_internal
#ifndef imported_SODataV4__EntityTypeList_SortByName_internal
#define imported_SODataV4__EntityTypeList_SortByName_public
/* internal */
@interface SODataV4_EntityTypeList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityTypeList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_EntityTypeList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityTypeList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityTypeMap_public
#define imported_SODataV4__EntityTypeMap_public
/// @internal
///
@interface SODataV4_EntityTypeMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_EntityTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_EntityTypeMap*) new;
/// @brief Construct a new map with `SODataV4_EntityTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityTypeMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_EntityType*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_EntityTypeMap`.
///
///
+ (nonnull SODataV4_EntityTypeMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_EntityTypeMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_EntityType*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_EntityType*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_EntityType*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_EntityTypeMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_EntityType*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_EntityTypeMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_EntityTypeList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_EntityTypeList*) values;
/// @brief An immutable empty `SODataV4_EntityTypeMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityTypeMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__EntityTypeMap_private
#ifndef imported_SODataV4__EntityTypeMap_private
#define imported_SODataV4__EntityTypeMap_private
@interface SODataV4_EntityTypeMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_EntityTypeMap_Entry*) _new1 :(nonnull SODataV4_EntityType*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityValueMap_public
#define imported_SODataV4__EntityValueMap_public
/// @internal
///
@interface SODataV4_EntityValueMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_EntityValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_EntityValueMap*) new;
/// @brief Construct a new map with `SODataV4_EntityValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityValueMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_EntityValueMap`.
///
///
+ (nonnull SODataV4_EntityValueMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_EntityValueMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_EntityValue*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_EntityValue*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_EntityValue*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_EntityValueMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_EntityValue*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_EntityValueList*) values;
/// @brief An immutable empty `SODataV4_EntityValueMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityValueMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__EntityValueMap_private
#ifndef imported_SODataV4__EntityValueMap_private
#define imported_SODataV4__EntityValueMap_private
@interface SODataV4_EntityValueMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_EntityValueMap_Entry*) _new1 :(nonnull SODataV4_EntityValue*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__EnumType_public
#define imported_SODataV4__EnumType_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) enum type.
///
///
@interface SODataV4_EnumType : SODataV4_DataType
{
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_boolean isInferred_;
    @private SODataV4_boolean isFlags_;
    @private SODataV4_EnumValueList* _Nonnull memberList_;
    @private SODataV4_EnumValueMap* _Nonnull memberMap_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EnumType*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_EnumType`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_EnumType`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EnumType`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @brief DataType.ENUM_VALUE.
///
///
- (SODataV4_int) code;
/// @brief Synonym for `SODataV4_EnumType`.`baseType`.
///
///
- (nonnull SODataV4_DataType*) derivedFrom;
/// @brief Lookup a member by name.
///
///
/// @return The member value, or `nil` if not found.
/// @param name Name of the member, or numeric value.
- (nullable SODataV4_EnumValue*) findMember :(nonnull NSString*)name;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_EnumType`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief Lookup a member by name.
///
///
/// @return The member value.
/// @throw `SODataV4_UndefinedException` if no member is found with this name.
/// @param name Name of the member, or numeric value.
- (nonnull SODataV4_EnumValue*) getMember :(nonnull NSString*)name;
/// @brief `true` if this type is a derived simple, complex, entity or enum type.
///
///
- (SODataV4_boolean) isDerived;
/// @brief True if this type was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief Does this enum type represent a set of bit flags?
///
///
- (SODataV4_boolean) isFlags;
/// @brief `true` if this simple type was inferred due to a missing term definition in the CSDL.
///
///
- (SODataV4_boolean) isInferred;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EnumType`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
- (nonnull NSString*) localName;
/// @brief List of members for this type.
///
///
- (nonnull SODataV4_EnumValueList*) memberList;
/// @brief Map of members for this type.
///
///
- (nonnull SODataV4_EnumValueMap*) memberMap;
/// @brief Synonym for `SODataV4_EnumType`.`qualifiedName`.
///
///
- (nonnull NSString*) name;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
- (nonnull NSString*) qualifiedName;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EnumType`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief Synonym for `SODataV4_EnumType`.`baseType`.
///
///
- (void) setDerivedFrom :(nonnull SODataV4_DataType*)value;
/// @brief True if this type was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief Does this enum type represent a set of bit flags?
///
///
- (void) setIsFlags :(SODataV4_boolean)value;
/// @brief `true` if this simple type was inferred due to a missing term definition in the CSDL.
///
///
- (void) setIsInferred :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EnumType`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief List of members for this type.
///
///
- (void) setMemberList :(nonnull SODataV4_EnumValueList*)value;
/// @brief Map of members for this type.
///
///
- (void) setMemberMap :(nonnull SODataV4_EnumValueMap*)value;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
- (void) setQualifiedName :(nonnull NSString*)value;
/// @return The name of this data type.
///
- (nonnull NSString*) toString;
/// @brief Represents an undefined enum type.
///
///
+ (nonnull SODataV4_EnumType*) undefined;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nonnull SODataV4_EnumValue*) withByte :(SODataV4_byte)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nonnull SODataV4_EnumValue*) withInt :(SODataV4_int)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nonnull SODataV4_EnumValue*) withLong :(SODataV4_long)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nullable SODataV4_EnumValue*) withNullableByte :(SODataV4_nullable_byte)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nullable SODataV4_EnumValue*) withNullableInt :(SODataV4_nullable_int)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nullable SODataV4_EnumValue*) withNullableLong :(SODataV4_nullable_long)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nullable SODataV4_EnumValue*) withNullableShort :(SODataV4_nullable_short)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nonnull SODataV4_EnumValue*) withShort :(SODataV4_short)value;
/// @return A value of this enum type with the specified value.
/// @param value Numeric enum value.
- (nullable SODataV4_EnumValue*) withUnsignedByte :(nullable SODataV4_UnsignedByte*)value;
/// @brief Obsolete. Use `SODataV4_EnumType`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_EnumType`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EnumType`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief DataType.ENUM_VALUE.
///
///
@property (nonatomic, readonly) SODataV4_int code;
/// @brief Synonym for `SODataV4_EnumType`.`baseType`.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* derivedFrom;
/// @brief `true` if this type is a derived simple, complex, entity or enum type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isDerived;
/// @brief True if this type was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief Does this enum type represent a set of bit flags?
///
///
@property (nonatomic, readwrite) SODataV4_boolean isFlags;
/// @brief `true` if this simple type was inferred due to a missing term definition in the CSDL.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isInferred;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EnumType`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief List of members for this type.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EnumValueList* memberList;
/// @brief Map of members for this type.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EnumValueMap* memberMap;
/// @brief Synonym for `SODataV4_EnumType`.`qualifiedName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief Represents an undefined enum type.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumType* undefined;
@end
#endif

#ifdef import_SODataV4__EnumType_private
#ifndef imported_SODataV4__EnumType_private
#define imported_SODataV4__EnumType_private
@interface SODataV4_EnumType (private)
+ (nonnull SODataV4_EnumType*) _new1 :(nonnull NSString*)p1 :(nonnull SODataV4_EnumValueMap*)p2 :(nonnull SODataV4_EnumValueList*)p3 :(SODataV4_boolean)p4 :(nonnull NSString*)p5 :(nonnull SODataV4_DataType*)p6;
- (nullable SODataV4_EnumValue*) withNumberOrNull :(SODataV4_long)value;
- (nonnull SODataV4_EnumValue*) withNumberOrThrow :(SODataV4_long)value;
@end
#endif
#endif

#ifdef import_SODataV4__EnumTypeList_SortByName_internal
#ifndef imported_SODataV4__EnumTypeList_SortByName_internal
#define imported_SODataV4__EnumTypeList_SortByName_public
/* internal */
@interface SODataV4_EnumTypeList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EnumTypeList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_EnumTypeList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumTypeList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__EnumTypeMap_public
#define imported_SODataV4__EnumTypeMap_public
/// @internal
///
@interface SODataV4_EnumTypeMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_EnumTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_EnumTypeMap*) new;
/// @brief Construct a new map with `SODataV4_EnumTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EnumTypeMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_EnumType*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_EnumTypeMap`.
///
///
+ (nonnull SODataV4_EnumTypeMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_EnumTypeMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_EnumType*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_EnumType*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_EnumType*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_EnumTypeMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_EnumType*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_EnumTypeMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_EnumTypeList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_EnumTypeList*) values;
/// @brief An immutable empty `SODataV4_EnumTypeMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumTypeMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__EnumTypeMap_private
#ifndef imported_SODataV4__EnumTypeMap_private
#define imported_SODataV4__EnumTypeMap_private
@interface SODataV4_EnumTypeMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_EnumTypeMap_Entry*) _new1 :(nonnull SODataV4_EnumType*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__EnumValue_public
#define imported_SODataV4__EnumValue_public
/// @brief Encapsulates an [OData](http://odata.org) enum value.
///
///
@interface SODataV4_EnumValue : SODataV4_DataValue
{
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private SODataV4_EnumType* _Nonnull _type_;
    @private SODataV4_long _number;
    @private NSString* _Nonnull _string;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
}
- (nonnull id) init;
/// @internal
///
+ (nonnull SODataV4_EnumValue*) new :(SODataV4_long)num :(nonnull NSString*)str :(nonnull SODataV4_EnumType*)type;
/// @internal
///
- (void) _init :(SODataV4_long)num :(nonnull NSString*)str :(nonnull SODataV4_EnumType*)type;
/// @brief Obsolete. Use `SODataV4_EnumValue`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_EnumValue`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @return The numeric value of this enum value as a byte.
///
- (SODataV4_byte) byteValue;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EnumValue`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @internal
///
+ (nullable SODataV4_EnumValue*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_EnumValue*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `x.value < y.value`, 0 if `x.value == y.value`, or 1 if `x.value > y.value`.
/// @param x First object for comparison.
/// @param y Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_EnumValue*)x :(nonnull SODataV4_EnumValue*)y;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.ENUM_VALUE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The enum type metadata for this value (`SODataV4_EnumValue`.`dataType` cast to `EnumType`).
///
///
- (nonnull SODataV4_EnumType*) enumType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `x.value == y.value` or if both arguments are `nil`, otherwise `false`.
/// @param x First object for comparison.
/// @param y Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_EnumValue*)x :(nullable SODataV4_EnumValue*)y;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_EnumValue`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @return The numeric value of this enum value as an int.
///
- (SODataV4_int) intValue;
/// @brief True if this member was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EnumValue`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @return The numeric value of this enum value as a long.
///
- (SODataV4_long) longValue;
/// @brief Name of this enumeration member.
///
///
- (nonnull NSString*) name;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EnumValue`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief True if this member was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EnumValue`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @return The numeric value of this enum value as a short.
///
- (SODataV4_short) shortValue;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_EnumValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief The numeric value of this enum value as a ByteValue, ShortValue, IntValue, LongValue, UnsignedByte or UnsignedShort (depending on the enum type's underlying type).
///
///
- (nonnull SODataV4_DataValue*) value;
/// @brief Obsolete. Use `SODataV4_EnumValue`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_EnumValue`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_EnumValue`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.ENUM_VALUE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The enum type metadata for this value (`SODataV4_EnumValue`.`dataType` cast to `EnumType`).
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EnumType* enumType;
/// @brief True if this member was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_EnumValue`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief Name of this enumeration member.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief The numeric value of this enum value as a ByteValue, ShortValue, IntValue, LongValue, UnsignedByte or UnsignedShort (depending on the enum type's underlying type).
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataValue* value;
@end
#endif

#ifdef import_SODataV4__EnumValue_private
#ifndef imported_SODataV4__EnumValue_private
#define imported_SODataV4__EnumValue_private
@interface SODataV4_EnumValue (private)
- (nonnull SODataV4_EnumType*) _type;
- (void) set_type :(nonnull SODataV4_EnumType*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EnumType* _type;
@end
#endif
#endif

#ifdef import_SODataV4__EnumValueList_SortByValue_internal
#ifndef imported_SODataV4__EnumValueList_SortByValue_internal
#define imported_SODataV4__EnumValueList_SortByValue_public
/* internal */
@interface SODataV4_EnumValueList_SortByValue : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EnumValueList_SortByValue*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_EnumValueList_SortByValue*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumValueList_SortByValue* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__EnumValueMap_public
#define imported_SODataV4__EnumValueMap_public
/// @internal
///
@interface SODataV4_EnumValueMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_EnumValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_EnumValueMap*) new;
/// @brief Construct a new map with `SODataV4_EnumValueMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EnumValueMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.name` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_EnumValue*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_EnumValueMap`.
///
///
+ (nonnull SODataV4_EnumValueMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_EnumValueMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_EnumValue*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_EnumValue*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_EnumValue*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_EnumValueMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_EnumValue*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_EnumValueMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_EnumValueList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_EnumValueList*) values;
/// @brief An immutable empty `SODataV4_EnumValueMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumValueMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__EnumValueMap_private
#ifndef imported_SODataV4__EnumValueMap_private
#define imported_SODataV4__EnumValueMap_private
@interface SODataV4_EnumValueMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_EnumValueMap_Entry*) _new1 :(nonnull SODataV4_EnumValue*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__FloatValue_public
#define imported_SODataV4__FloatValue_public
/// @brief DataValue subclass that wraps a `SODataV4_FloatValue`.`value` of type `float`.
///
///
@interface SODataV4_FloatValue : SODataV4_DataValue
{
    @private SODataV4_float value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_FloatValue*)left :(nonnull SODataV4_FloatValue*)right;
/// @brief The type BasicType.FLOAT.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_FloatValue*)left :(nullable SODataV4_FloatValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `float` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_FloatValue*) of :(SODataV4_float)value;
/// @brief Wrap a nullable `float` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_FloatValue*) ofNullable :(SODataV4_nullable_float)value;
/// @brief Convert a wrapped `float` value to a nullable float.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `float` or `nil`.
/// @return A nullable float.
/// @param value The wrapped value.
+ (SODataV4_nullable_float) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_FloatValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @return "NaN", "INF", "-INF", or `this.toString()` for regular numbers.
///
- (nonnull NSString*) toString3;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `float` value to a float.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `float`.
/// @return A float.
/// @param value The wrapped value.
+ (SODataV4_float) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (SODataV4_float) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_FloatValue*) zero;
/// @brief The type BasicType.FLOAT.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_float value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_FloatValue* zero;
@end
#endif

#ifdef import_SODataV4__FloatValue_private
#ifndef imported_SODataV4__FloatValue_private
#define imported_SODataV4__FloatValue_private
@interface SODataV4_FloatValue (private)
+ (nonnull SODataV4_FloatValue*) new;
+ (nonnull SODataV4_FloatValue*) _new1 :(SODataV4_float)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__GeospatialValue_public
#define imported_SODataV4__GeospatialValue_public
/// @brief Abstract base class for geospatial (geography/geometry) data values.
///
///
/// @see `SODataV4_GeographyValue`, `SODataV4_GeometryValue`.
@interface SODataV4_GeospatialValue : SODataV4_DataValue
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_GeospatialValue*) new;
/// @internal
///
- (void) _init;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID.
///
///
- (void) setSrsCode :(SODataV4_int)value;
/// @brief Spatial Reference System Name (optional).
///
///
- (void) setSrsName :(nullable NSString*)value;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID.
///
///
- (SODataV4_int) srsCode;
/// @brief Spatial Reference System Name (optional).
///
///
- (nullable NSString*) srsName;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID.
///
///
@property (nonatomic, readwrite) SODataV4_int srsCode;
/// @brief Spatial Reference System Name (optional).
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* srsName;
@end
#endif

#ifndef imported_SODataV4__GlobalDateTime_public
#define imported_SODataV4__GlobalDateTime_public
/// @brief Represents the XML Schema [dateTime](http://www.w3.org/TR/xmlschema11-2/#dateTime) type with zone offset.
///
///
@interface SODataV4_GlobalDateTime : SODataV4_DataValue
{
    @private SODataV4_int _nano;
    @private SODataV4_int _year;
    @private SODataV4_byte _month;
    @private SODataV4_byte _day;
    @private SODataV4_byte _hour;
    @private SODataV4_byte _minute;
    @private SODataV4_byte _second;
    @private SODataV4_short _offset;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GlobalDateTime*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GlobalDateTime*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two dateTime values.
///
///
/// @return -1 if `left < right`, 0 if `left == right`, or 1 if `left > right`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_GlobalDateTime*)left :(nonnull SODataV4_GlobalDateTime*)right;
/// @brief Compare this dateTime with another dateTime.
///
///
/// @return -1 if this dateTime is less than the value dateTime, 0 if they are equal, 1 if this dateTime is greater than the value dateTime.
/// @param value The other dateTime.
- (SODataV4_int) compareTo :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Local date component of dateTime.
///
///
- (nonnull SODataV4_LocalDate*) date;
/// @brief Day field of date (1 to 31).
///
///
- (SODataV4_int) day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
- (SODataV4_int) dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
- (SODataV4_int) dayOfYear;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_GlobalDateTime*)left :(nullable SODataV4_GlobalDateTime*)right;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return True, if this dateTime value is equal to the value dateTime value. Otherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is greater than or equal to the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) greaterEqual :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is greater than or equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) greaterEqual :(nonnull SODataV4_GlobalDateTime*)left :(nonnull SODataV4_GlobalDateTime*)right;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is greater than the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) greaterThan :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is greater than `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) greaterThan :(nonnull SODataV4_GlobalDateTime*)left :(nonnull SODataV4_GlobalDateTime*)right;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Hour field of time (0 to 23).
///
///
- (SODataV4_int) hour;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is less than or equal to the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) lessEqual :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is less than or equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) lessEqual :(nonnull SODataV4_GlobalDateTime*)left :(nonnull SODataV4_GlobalDateTime*)right;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is less than the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) lessThan :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is less than `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) lessThan :(nonnull SODataV4_GlobalDateTime*)left :(nonnull SODataV4_GlobalDateTime*)right;
/// @return The difference in milliseconds between two dateTime values `a` and `b`, calculated as `b - a`.
/// @param a The first dateTime value.
/// @param b The second dateTime value.
+ (SODataV4_long) millisBetween :(nonnull SODataV4_GlobalDateTime*)a :(nonnull SODataV4_GlobalDateTime*)b;
/// @return The difference `this - value`, measured in days.
/// @param value The other dateTime.
- (SODataV4_double) minus :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Minute field of time (0 to 59).
///
///
- (SODataV4_int) minute;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
- (SODataV4_int) month;
/// @brief Nanosecond field of time (0 to 999999999).
///
///
- (SODataV4_int) nano;
/// @brief Normalize this dateTime value to UTC.
///
/// For example "2000-01-01T14:00:00+12:00" would normalize to "2000-01-01T02:00:00Z"
///
/// @return An equivalent value with all fields normalized (adjusted) to UTC, such that `SODataV4_GlobalDateTime`.`offset` is zero.
- (nonnull SODataV4_GlobalDateTime*) normalize;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is not equal to the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) notEqual :(nonnull SODataV4_GlobalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is not equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) notEqual :(nullable SODataV4_GlobalDateTime*)left :(nullable SODataV4_GlobalDateTime*)right;
/// @return The current global dateTime.
///
+ (nonnull SODataV4_GlobalDateTime*) now;
/// @internal
///
+ (nonnull SODataV4_GlobalDateTime*) of :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second;
/// @return A new dateTime value.
/// @param year The year field.
/// @param month The month field (1 to 12).
/// @param day The day field (1 to 31).
/// @param hour The hour field (0 to 23).
/// @param minute The minute field (0 to 59).
/// @param second The second field (0 to 59).
/// @param nano (optional) The nano field (0 to 999999999).
+ (nonnull SODataV4_GlobalDateTime*) of :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second :(SODataV4_int)nano;
/// @brief Time zone offset in minutes (-840 to 840).
///
///
- (SODataV4_int) offset;
/// @return Value parsed from [XML Schema format](http://www.w3.org/TR/xmlschema11-2/#dateTime), or `nil` if `text` has invalid dateTime format.
/// @param text Value in XML Schema format.
+ (nullable SODataV4_GlobalDateTime*) parse :(nonnull NSString*)text;
/// @return A new dateTime which is the specified number of days ahead of this dateTime.
/// @param days Number of days to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusDays :(SODataV4_int)days;
/// @return A new dateTime which is the specified number of hours ahead of this dateTime.
/// @param hours Number of hours to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusHours :(SODataV4_long)hours;
/// @return A new dateTime which is the specified number of microseconds ahead of this dateTime.
/// @param micros Number of microseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusMicros :(SODataV4_long)micros;
/// @return A new dateTime which is the specified number of milliseconds ahead of this dateTime.
/// @param millis Number of milliseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusMillis :(SODataV4_long)millis;
/// @return A new dateTime which is the specified number of minutes ahead of this dateTime.
/// @param minutes Number of minutes to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusMinutes :(SODataV4_long)minutes;
/// @return A new dateTime/time which is the specified number of months ahead of this dateTime.
/// @param months Number of months to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusMonths :(SODataV4_int)months;
/// @return A new dateTime which is the specified number of nanoseconds ahead of this dateTime.
/// @param nanos Number of nanoseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusNanos :(SODataV4_long)nanos;
/// @return A new dateTime which is the specified number of seconds ahead of this dateTime.
/// @param seconds Number of seconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusSeconds :(SODataV4_long)seconds;
/// @return A new dateTime which is the specified number of weeks ahead of this dateTime.
/// @param weeks Number of weeks to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusWeeks :(SODataV4_int)weeks;
/// @return A new dateTime which is the specified number of years ahead of this dateTime.
/// @param years Number of years to add. Can be negative, zero or positive.
- (nonnull SODataV4_GlobalDateTime*) plusYears :(SODataV4_int)years;
/// @brief Second field of time (0 to 59).
///
///
- (SODataV4_int) second;
/// @brief Local time component of dateTime.
///
///
- (nonnull SODataV4_LocalTime*) time;
/// @return This local date and time portion of this value, without zone offset.
/// @see `SODataV4_GlobalDateTime`.`normalize`.
- (nonnull SODataV4_LocalDateTime*) toLocal;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_GlobalDateTime`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Year field of date.
///
///
- (SODataV4_int) year;
/// @return A dateTime value with all fields the same as the current dateTime value except for the zone offset.
/// @param offset Zone offset in minutes (-840 to 840).
- (nonnull SODataV4_GlobalDateTime*) zone :(SODataV4_int)offset;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Local date component of dateTime.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_LocalDate* date;
/// @brief Day field of date (1 to 31).
///
///
@property (nonatomic, readonly) SODataV4_int day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
@property (nonatomic, readonly) SODataV4_int dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
@property (nonatomic, readonly) SODataV4_int dayOfYear;
/// @brief Hour field of time (0 to 23).
///
///
@property (nonatomic, readonly) SODataV4_int hour;
/// @brief Minute field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int minute;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
@property (nonatomic, readonly) SODataV4_int month;
/// @brief Nanosecond field of time (0 to 999999999).
///
///
@property (nonatomic, readonly) SODataV4_int nano;
/// @brief Time zone offset in minutes (-840 to 840).
///
///
@property (nonatomic, readonly) SODataV4_int offset;
/// @brief Second field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int second;
/// @brief Local time component of dateTime.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_LocalTime* time;
/// @brief Year field of date.
///
///
@property (nonatomic, readonly) SODataV4_int year;
@end
#endif

#ifdef import_SODataV4__GlobalDateTime_private
#ifndef imported_SODataV4__GlobalDateTime_private
#define imported_SODataV4__GlobalDateTime_private
@interface SODataV4_GlobalDateTime (private)
+ (nonnull SODataV4_GlobalDateTime*) new;
+ (nonnull SODataV4_GlobalDateTime*) _new1 :(SODataV4_byte)p1 :(SODataV4_byte)p2 :(SODataV4_short)p3 :(SODataV4_byte)p4 :(SODataV4_byte)p5 :(SODataV4_byte)p6 :(SODataV4_int)p7 :(SODataV4_int)p8;
@end
#endif
#endif

#ifndef imported_SODataV4__GuidValue_public
#define imported_SODataV4__GuidValue_public
/// @brief Encapsulates an [OData](http://odata.org) GUID value.
///
///
@interface SODataV4_GuidValue : SODataV4_DataValue
{
    @private SODataV4_GUID* _Nonnull value_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GuidValue*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GuidValue*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `x.value < y.value`, 0 if `x.value == y.value`, or 1 if `x.value > y.value`.
/// @param x First object for comparison.
/// @param y Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_GuidValue*)x :(nonnull SODataV4_GuidValue*)y;
/// @brief The type BasicType.GUID_VALUE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `x.value == y.value` or if both arguments are `nil`, otherwise `false`.
/// @param x First object for comparison.
/// @param y Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_GuidValue*)x :(nullable SODataV4_GuidValue*)y;
/// @brief Wrap a `SODataV4_GUID` value as a GuidValue.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_GuidValue*) of :(nonnull SODataV4_GUID*)value;
/// @brief Wrap a `SODataV4_GUID` value as a GuidValue.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_GuidValue*) ofNullable :(nullable SODataV4_GUID*)value;
/// @brief Parse a string (32/36-character GUID format) to a GuidValue.
///
///
/// @return The wrapped value.
/// @param value Value to be parsed.
+ (nullable SODataV4_GuidValue*) parse :(nonnull NSString*)value;
/// @return A new random ([Version 4](http://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29)) GuidValue.
///
+ (nonnull SODataV4_GuidValue*) random;
/// @brief Convert the wrapped value to binary format (16 bytes).
///
///
/// @return 16-byte GUID format of `SODataV4_GuidValue`.`value`.
- (nonnull NSData*) toBinary;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_GuidValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Convert the wrapped value to the 32-character GUID format, e.g. "21ec20203aea1069a2dd08002b30309d".
///
///
/// @return 32-character GUID format of `SODataV4_GuidValue`.`value`.
- (nonnull NSString*) toString32;
/// @brief Convert the wrapped value to the 36-character GUID format, e.g. "21ec2020-3aea-1069-a2dd-08002b30309d".
///
///
/// @return 36-character GUID format of `SODataV4_GuidValue`.`value`.
- (nonnull NSString*) toString36;
/// @brief The wrapped value.
///
///
- (nonnull SODataV4_GUID*) value;
/// @brief The type BasicType.GUID_VALUE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_GUID* value;
@end
#endif

#ifdef import_SODataV4__GuidValue_private
#ifndef imported_SODataV4__GuidValue_private
#define imported_SODataV4__GuidValue_private
@interface SODataV4_GuidValue (private)
+ (nonnull SODataV4_GuidValue*) new;
+ (nonnull SODataV4_GuidValue*) _new1 :(nonnull SODataV4_GUID*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__ImmutableRequestOptions_internal
#ifndef imported_SODataV4__ImmutableRequestOptions_internal
#define imported_SODataV4__ImmutableRequestOptions_public
/* internal */
@interface SODataV4_ImmutableRequestOptions : SODataV4_RequestOptions
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ImmutableRequestOptions*) new;
/// @internal
///
- (void) _init;
/// @brief Set this to a cancellation token before initiating an async request if request cancellation may be needed.
///
///
- (nullable SODataV4_CancelToken*) cancelToken;
/// @brief Should create/update requests receive no content in the response? Defaults to `false`.
///
///
- (SODataV4_boolean) preferNoContent;
/// @brief Repeatability creation time for this request.
///
///
- (nullable SODataV4_GlobalDateTime*) repeatabilityCreation;
/// @brief Repeatability deletion time for older requests from this client.
///
///
/// @see ServiceOptions.clientID.
- (nullable SODataV4_GlobalDateTime*) repeatabilityDeletion;
/// @brief Should create/update requests be marked as "repeatable".
///
/// Setting this property also sets `SODataV4_ImmutableRequestOptions`.`requestID` to a new globally unique ID, and sets `SODataV4_ImmutableRequestOptions`.`repeatabilityCreation` and `SODataV4_ImmutableRequestOptions`.`repeatabilityDeletion` to `nil`.
///
/// @see [Repeatable Request](https://www.oasis-open.org/committees/document.php?document_id=49430).
- (SODataV4_boolean) repeatable;
/// @brief Globally unique request ID for repeatable requests.
///
///
/// @see `SODataV4_ImmutableRequestOptions`.`repeatable`.
- (nullable NSString*) requestID;
/// @brief Should no-change update requests be sent to the server? Defaults to `false`.
///
///
- (SODataV4_boolean) sendEmptyUpdate;
/// @brief Set this to a cancellation token before initiating an async request if request cancellation may be needed.
///
///
- (void) setCancelToken :(nullable SODataV4_CancelToken*)value;
/// @brief Should create/update requests receive no content in the response? Defaults to `false`.
///
///
- (void) setPreferNoContent :(SODataV4_boolean)value;
/// @brief Repeatability creation time for this request.
///
///
- (void) setRepeatabilityCreation :(nullable SODataV4_GlobalDateTime*)value;
/// @brief Repeatability deletion time for older requests from this client.
///
///
/// @see ServiceOptions.clientID.
- (void) setRepeatabilityDeletion :(nullable SODataV4_GlobalDateTime*)value;
/// @brief Should create/update requests be marked as "repeatable".
///
/// Setting this property also sets `SODataV4_ImmutableRequestOptions`.`requestID` to a new globally unique ID, and sets `SODataV4_ImmutableRequestOptions`.`repeatabilityCreation` and `SODataV4_ImmutableRequestOptions`.`repeatabilityDeletion` to `nil`.
///
/// @see [Repeatable Request](https://www.oasis-open.org/committees/document.php?document_id=49430).
- (void) setRepeatable :(SODataV4_boolean)value;
/// @brief Globally unique request ID for repeatable requests.
///
///
/// @see `SODataV4_ImmutableRequestOptions`.`repeatable`.
- (void) setRequestID :(nullable NSString*)value;
/// @brief Should no-change update requests be sent to the server? Defaults to `false`.
///
///
- (void) setSendEmptyUpdate :(SODataV4_boolean)value;
/// @brief Determines if updates use merge (PATCH) or replace (PUT) semantics. Defaults to merge semantics.
///
///
- (void) setUpdateMode :(nonnull SODataV4_UpdateMode*)value;
/// @brief Determines if updates use merge (PATCH) or replace (PUT) semantics. Defaults to merge semantics.
///
///
- (nonnull SODataV4_UpdateMode*) updateMode;
/// @brief Set this to a cancellation token before initiating an async request if request cancellation may be needed.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_CancelToken* cancelToken;
/// @brief Should create/update requests receive no content in the response? Defaults to `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean preferNoContent;
/// @brief Repeatability creation time for this request.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* repeatabilityCreation;
/// @brief Repeatability deletion time for older requests from this client.
///
///
/// @see ServiceOptions.clientID.
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* repeatabilityDeletion;
/// @brief Should create/update requests be marked as "repeatable".
///
/// Setting this property also sets `SODataV4_ImmutableRequestOptions`.`requestID` to a new globally unique ID, and sets `SODataV4_ImmutableRequestOptions`.`repeatabilityCreation` and `SODataV4_ImmutableRequestOptions`.`repeatabilityDeletion` to `nil`.
///
/// @see [Repeatable Request](https://www.oasis-open.org/committees/document.php?document_id=49430).
@property (nonatomic, readwrite) SODataV4_boolean repeatable;
/// @brief Globally unique request ID for repeatable requests.
///
///
/// @see `SODataV4_ImmutableRequestOptions`.`repeatable`.
@property (nonatomic, readwrite, strong, nullable) NSString* requestID;
/// @brief Should no-change update requests be sent to the server? Defaults to `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean sendEmptyUpdate;
/// @brief Determines if updates use merge (PATCH) or replace (PUT) semantics. Defaults to merge semantics.
///
///
@property (nonatomic, readwrite, nonnull) SODataV4_UpdateMode* updateMode;
@end
#endif
#endif

#ifndef imported_SODataV4__IntValue_public
#define imported_SODataV4__IntValue_public
/// @brief DataValue subclass that wraps a `SODataV4_IntValue`.`value` of type `int`.
///
///
@interface SODataV4_IntValue : SODataV4_DataValue
{
    @private SODataV4_int value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_IntValue*)left :(nonnull SODataV4_IntValue*)right;
/// @brief The type BasicType.INT.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_IntValue*)left :(nullable SODataV4_IntValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `int` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_IntValue*) of :(SODataV4_int)value;
/// @brief Wrap a nullable `int` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_IntValue*) ofNullable :(SODataV4_nullable_int)value;
/// @brief Convert a wrapped `int` value to a nullable int.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `int` or `nil`.
/// @return A nullable int.
/// @param value The wrapped value.
+ (SODataV4_nullable_int) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_IntValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `int` value to an int.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `int`.
/// @return A int.
/// @param value The wrapped value.
+ (SODataV4_int) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (SODataV4_int) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_IntValue*) zero;
/// @brief The type BasicType.INT.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_int value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_IntValue* zero;
@end
#endif

#ifdef import_SODataV4__IntValue_private
#ifndef imported_SODataV4__IntValue_private
#define imported_SODataV4__IntValue_private
@interface SODataV4_IntValue (private)
+ (nonnull SODataV4_IntValue*) new;
+ (nonnull SODataV4_IntValue*) _new1 :(SODataV4_int)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__IntegerValue_public
#define imported_SODataV4__IntegerValue_public
/// @brief DataValue subclass that wraps a `SODataV4_IntegerValue`.`value` of type `integer`.
///
///
@interface SODataV4_IntegerValue : SODataV4_DataValue
{
    @private SODataV4_BigInteger* _Nonnull value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_IntegerValue*)left :(nonnull SODataV4_IntegerValue*)right;
/// @brief The type BasicType.INTEGER.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_IntegerValue*)left :(nullable SODataV4_IntegerValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `integer` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_IntegerValue*) of :(nonnull SODataV4_BigInteger*)value;
/// @brief Wrap a nullable `integer` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_IntegerValue*) ofNullable :(nullable SODataV4_BigInteger*)value;
/// @brief Convert a wrapped `integer` value to a nullable integer.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `integer` or `nil`.
/// @return A nullable integer.
/// @param value The wrapped value.
+ (nullable SODataV4_BigInteger*) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_IntegerValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `integer` value to an integer.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `integer`.
/// @return A integer.
/// @param value The wrapped value.
+ (nonnull SODataV4_BigInteger*) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (nonnull SODataV4_BigInteger*) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_IntegerValue*) zero;
/// @brief The type BasicType.INTEGER.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_BigInteger* value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_IntegerValue* zero;
@end
#endif

#ifdef import_SODataV4__IntegerValue_private
#ifndef imported_SODataV4__IntegerValue_private
#define imported_SODataV4__IntegerValue_private
@interface SODataV4_IntegerValue (private)
+ (nonnull SODataV4_IntegerValue*) new;
+ (nonnull SODataV4_IntegerValue*) _new1 :(nonnull SODataV4_BigInteger*)p1;
+ (nonnull SODataV4_BigInteger*) INTEGER_ZERO;
@end
#define SODataV4_IntegerValue_INTEGER_ZERO [SODataV4_IntegerValue INTEGER_ZERO]
#endif
#endif

#ifndef imported_SODataV4__ListBase_public
#define imported_SODataV4__ListBase_public
/// @brief Base class for strongly-typed lists.
///
///
@interface SODataV4_ListBase : SODataV4_DataValue
{
    @private SODataV4_UntypedList* _Nonnull _untyped_;
}
- (nonnull id) init;
/// @brief Construct a new list with a `SODataV4_ListBase`.`length` of zero and specified initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Initial capacity.
+ (nonnull SODataV4_ListBase*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Remove all items from this list.
///
///
- (void) clear;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @brief The data type for this list.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief An equality function for the item type of this list.
///
///
- (nonnull SODataV4_Equality*) equality;
/// @brief `true` if this list contains no items.
///
///
- (SODataV4_boolean) isEmpty;
/// @brief The number of items in this list.
///
///
- (SODataV4_int) length;
/// @brief Remove an item from the specified index in this list.
///
///
/// @param index Index of the item to be removed.
- (void) removeAt :(SODataV4_int)index;
/// @brief Remove the first item (if any) from this list.
///
///
- (void) removeFirst;
/// @brief Remove the last item (if any) from this list.
///
///
- (void) removeLast;
/// @brief Remove a range of items from this list.
///
///
/// @param start Starting index (inclusive) for items to be removed.
/// @param end Ending index (exclusive) for items to be removed.
- (void) removeRange :(SODataV4_int)start :(SODataV4_int)end;
/// @brief Reverse the order of the items in this list.
///
///
- (void) reverse;
/// @internal
///
- (void) shareWith :(nonnull SODataV4_ListBase*)other :(SODataV4_boolean)replace;
/// @brief Sort the items in this list, using the `SODataV4_ListBase`.`comparer` property for ordering.
///
///
- (void) sort;
/// @brief Sort the items in this list.
///
///
/// @param comparer Comparer for ordering.
- (void) sortWith :(nonnull SODataV4_Comparer*)comparer;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @return a string representation of this list.
///
- (nonnull NSString*) toString;
/// @brief The underlying untyped list. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedList*) untypedList;
/// @brief Base function for validating the item's value before adding it to the list. Validate is needed in
///
/// some ListBase types, for exampe in the case of ByteList, where a value out of the ByteValue type's
/// valid range can be added, because ByteList accepts Int instead of Byte. With a proper overwrite
/// of this function in the given BaseList class ensures, that only a valid value Int (-128 - +127 in
/// this case) can be added to the list.
///
/// @return The `value` without modification.
/// @param value The value to be validated.
- (nullable NSObject*) validate :(nullable NSObject*)value;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief The data type for this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief An equality function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Equality* equality;
/// @brief `true` if this list contains no items.
///
///
@property (nonatomic, readonly) SODataV4_boolean isEmpty;
/// @brief The number of items in this list.
///
///
@property (nonatomic, readonly) SODataV4_int length;
/// @brief The underlying untyped list. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedList* untypedList;
@end
#endif

#ifdef import_SODataV4__ListBase_private
#ifndef imported_SODataV4__ListBase_private
#define imported_SODataV4__ListBase_private
@interface SODataV4_ListBase (private)
- (nonnull SODataV4_UntypedList*) _untyped;
- (void) set_untyped :(nonnull SODataV4_UntypedList*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_UntypedList* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__LocalDate_public
#define imported_SODataV4__LocalDate_public
/// @brief Represents the XML Schema [date](http://www.w3.org/TR/xmlschema11-2/#date) type without zone offset.
///
///
@interface SODataV4_LocalDate : SODataV4_DataValue
{
    @private SODataV4_int _year;
    @private SODataV4_byte _month;
    @private SODataV4_byte _day;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_LocalDate*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_LocalDate*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two date values.
///
///
/// @return -1 if `left < right`, 0 if `left == right`, or 1 if `left > right`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_LocalDate*)left :(nonnull SODataV4_LocalDate*)right;
/// @brief Compare this date with another date.
///
///
/// @return -1 if this date is less than the value date, 0 if they are equal, 1 if this date is greater than the value date.
/// @param value The other date.
- (SODataV4_int) compareTo :(nonnull SODataV4_LocalDate*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Day field of date (1 to 31).
///
///
- (SODataV4_int) day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
- (SODataV4_int) dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
- (SODataV4_int) dayOfYear;
/// @brief Compare two date values.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_LocalDate*)left :(nullable SODataV4_LocalDate*)right;
/// @brief Compare this date value with another date value.
///
///
/// @return True, if this date value is equal to the value date value. Otherwise `false`.
/// @param value The other date value.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Compare this date value with another date value.
///
///
/// @return `true` if this date value is greater than or equal to the value date value. Oherwise `false`.
/// @param value The other date value.
- (SODataV4_boolean) greaterEqual :(nonnull SODataV4_LocalDate*)value;
/// @brief Compare two date values.
///
///
/// @return `true` if `left` is greater than or equal to `right`, otherwise `false`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_boolean) greaterEqual :(nonnull SODataV4_LocalDate*)left :(nonnull SODataV4_LocalDate*)right;
/// @brief Compare this date value with another date value.
///
///
/// @return `true` if this date value is greater than the value date value. Oherwise `false`.
/// @param value The other date value.
- (SODataV4_boolean) greaterThan :(nonnull SODataV4_LocalDate*)value;
/// @brief Compare two date values.
///
///
/// @return `true` if `left` is greater than `right`, otherwise `false`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_boolean) greaterThan :(nonnull SODataV4_LocalDate*)left :(nonnull SODataV4_LocalDate*)right;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Compare this date value with another date value.
///
///
/// @return `true` if this date value is less than or equal to the value date value. Oherwise `false`.
/// @param value The other date value.
- (SODataV4_boolean) lessEqual :(nonnull SODataV4_LocalDate*)value;
/// @brief Compare two date values.
///
///
/// @return `true` if `left` is less than or equal to `right`, otherwise `false`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_boolean) lessEqual :(nonnull SODataV4_LocalDate*)left :(nonnull SODataV4_LocalDate*)right;
/// @brief Compare this date value with another date value.
///
///
/// @return `true` if this date value is less than the value date value. Oherwise `false`.
/// @param value The other date value.
- (SODataV4_boolean) lessThan :(nonnull SODataV4_LocalDate*)value;
/// @brief Compare two date values.
///
///
/// @return `true` if `left` is less than `right`, otherwise `false`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_boolean) lessThan :(nonnull SODataV4_LocalDate*)left :(nonnull SODataV4_LocalDate*)right;
/// @return The difference `this - value`, measured in days.
/// @param value The other date.
- (SODataV4_double) minus :(nonnull SODataV4_LocalDate*)value;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
- (SODataV4_int) month;
/// @brief Compare this date value with another date value.
///
///
/// @return `true` if this date value is not equal to the value date value. Oherwise `false`.
/// @param value The other date value.
- (SODataV4_boolean) notEqual :(nonnull SODataV4_LocalDate*)value;
/// @brief Compare two date values.
///
///
/// @return `true` if `left` is not equal to `right`, otherwise `false`.
/// @param left The first date for comparison.
/// @param right The second date for comparison.
+ (SODataV4_boolean) notEqual :(nullable SODataV4_LocalDate*)left :(nullable SODataV4_LocalDate*)right;
/// @return The current local date.
///
+ (nonnull SODataV4_LocalDate*) now;
/// @return A new date value.
/// @param year The year field.
/// @param month The month field (1 to 12).
/// @param day The day field (1 to 31).
+ (nonnull SODataV4_LocalDate*) of :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day;
/// @return Value parsed from [XML Schema format](http://www.w3.org/TR/xmlschema11-2/#date), or `nil` if `text` has invalid date format.
/// @param text Value in XML Schema format.
+ (nullable SODataV4_LocalDate*) parse :(nonnull NSString*)text;
/// @return A new date which is the specified number of days ahead of this date.
/// @param days Number of days to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDate*) plusDays :(SODataV4_int)days;
/// @return A new date which is which is the specified number of months ahead of this date.
/// @param months Number of months to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDate*) plusMonths :(SODataV4_int)months;
/// @return A new date which is which is the specified number of weeks ahead of this date.
/// @param weeks Number of weeks to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDate*) plusWeeks :(SODataV4_int)weeks;
/// @return A new date which is which is the specified number of years ahead of this date.
/// @param years Number of years to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDate*) plusYears :(SODataV4_int)years;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_LocalDate`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Year field of date.
///
///
- (SODataV4_int) year;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Day field of date (1 to 31).
///
///
@property (nonatomic, readonly) SODataV4_int day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
@property (nonatomic, readonly) SODataV4_int dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
@property (nonatomic, readonly) SODataV4_int dayOfYear;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
@property (nonatomic, readonly) SODataV4_int month;
/// @brief Year field of date.
///
///
@property (nonatomic, readonly) SODataV4_int year;
@end
#endif

#ifdef import_SODataV4__LocalDate_private
#ifndef imported_SODataV4__LocalDate_private
#define imported_SODataV4__LocalDate_private
@interface SODataV4_LocalDate (private)
+ (nonnull SODataV4_LocalDate*) new;
+ (nonnull SODataV4_LocalDate*) _new1 :(SODataV4_byte)p1 :(SODataV4_byte)p2 :(SODataV4_int)p3;
@end
#endif
#endif

#ifndef imported_SODataV4__LocalDateTime_public
#define imported_SODataV4__LocalDateTime_public
/// @brief Represents the XML Schema [dateTime](http://www.w3.org/TR/xmlschema11-2/#dateTime) type without zone offset.
///
///
@interface SODataV4_LocalDateTime : SODataV4_DataValue
{
    @private SODataV4_int _nano;
    @private SODataV4_int _year;
    @private SODataV4_byte _month;
    @private SODataV4_byte _day;
    @private SODataV4_byte _hour;
    @private SODataV4_byte _minute;
    @private SODataV4_byte _second;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_LocalDateTime*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_LocalDateTime*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two dateTime values.
///
///
/// @return -1 if `left < right`, 0 if `left == right`, or 1 if `left > right`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_LocalDateTime*)left :(nonnull SODataV4_LocalDateTime*)right;
/// @brief Compare this dateTime with another dateTime.
///
///
/// @return -1 if this dateTime is less than the value dateTime, 0 if they are equal, 1 if this dateTime is greater than the value dateTime.
/// @param value The other dateTime.
- (SODataV4_int) compareTo :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Local date component of dateTime.
///
///
- (nonnull SODataV4_LocalDate*) date;
/// @brief Day field of date (1 to 31).
///
///
- (SODataV4_int) day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
- (SODataV4_int) dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
- (SODataV4_int) dayOfYear;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_LocalDateTime*)left :(nullable SODataV4_LocalDateTime*)right;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return True, if this dateTime value is equal to the value dateTime value. Otherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is greater than or equal to the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) greaterEqual :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is greater than or equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) greaterEqual :(nonnull SODataV4_LocalDateTime*)left :(nonnull SODataV4_LocalDateTime*)right;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is greater than the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) greaterThan :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is greater than `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) greaterThan :(nonnull SODataV4_LocalDateTime*)left :(nonnull SODataV4_LocalDateTime*)right;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Hour field of time (0 to 23).
///
///
- (SODataV4_int) hour;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is less than or equal to the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) lessEqual :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is less than or equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) lessEqual :(nonnull SODataV4_LocalDateTime*)left :(nonnull SODataV4_LocalDateTime*)right;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is less than the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) lessThan :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is less than `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) lessThan :(nonnull SODataV4_LocalDateTime*)left :(nonnull SODataV4_LocalDateTime*)right;
/// @return The difference in milliseconds between two dateTime values `a` and `b`, calculated as `b - a`.
/// @param a The first dateTime value.
/// @param b The second dateTime value.
+ (SODataV4_long) millisBetween :(nonnull SODataV4_LocalDateTime*)a :(nonnull SODataV4_LocalDateTime*)b;
/// @return The difference `this - value`, measured in days.
/// @param value The other dateTime.
- (SODataV4_double) minus :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Minute field of time (0 to 59).
///
///
- (SODataV4_int) minute;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
- (SODataV4_int) month;
/// @brief Nanosecond field of time (0 to 999999999).
///
///
- (SODataV4_int) nano;
/// @brief Compare this dateTime value with another dateTime value.
///
///
/// @return `true` if this dateTime value is not equal to the value dateTime value. Oherwise `false`.
/// @param value The other dateTime value.
- (SODataV4_boolean) notEqual :(nonnull SODataV4_LocalDateTime*)value;
/// @brief Compare two dateTime values.
///
///
/// @return `true` if `left` is not equal to `right`, otherwise `false`.
/// @param left The first dateTime for comparison.
/// @param right The second dateTime for comparison.
+ (SODataV4_boolean) notEqual :(nullable SODataV4_LocalDateTime*)left :(nullable SODataV4_LocalDateTime*)right;
/// @return The current local dateTime.
///
+ (nonnull SODataV4_LocalDateTime*) now;
/// @internal
///
+ (nonnull SODataV4_LocalDateTime*) of :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second;
/// @return A new dateTime value.
/// @param year The year field.
/// @param month The month field (1 to 12).
/// @param day The day field (1 to 31).
/// @param hour The hour field (0 to 23).
/// @param minute The minute field (0 to 59).
/// @param second The second field (0 to 59).
/// @param nano (optional) The nano field (0 to 999999999).
+ (nonnull SODataV4_LocalDateTime*) of :(SODataV4_int)year :(SODataV4_int)month :(SODataV4_int)day :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second :(SODataV4_int)nano;
/// @return Value parsed from [XML Schema format](http://www.w3.org/TR/xmlschema11-2/#dateTime), or `nil` if `text` has invalid dateTime format.
/// @param text Value in XML Schema format.
+ (nullable SODataV4_LocalDateTime*) parse :(nonnull NSString*)text;
/// @return A new dateTime which is the specified number of days ahead of this dateTime.
/// @param days Number of days to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusDays :(SODataV4_int)days;
/// @return A new dateTime which is the specified number of hours ahead of this dateTime.
/// @param hours Number of hours to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusHours :(SODataV4_long)hours;
/// @return A new dateTime which is the specified number of microseconds ahead of this dateTime.
/// @param micros Number of microseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusMicros :(SODataV4_long)micros;
/// @return A new dateTime which is the specified number of milliseconds ahead of this dateTime.
/// @param millis Number of milliseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusMillis :(SODataV4_long)millis;
/// @return A new dateTime which is the specified number of minutes ahead of this dateTime.
/// @param minutes Number of minutes to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusMinutes :(SODataV4_long)minutes;
/// @return A new dateTime which is the specified number of months ahead of this dateTime.
/// @param months Number of months to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusMonths :(SODataV4_int)months;
/// @return A new dateTime which is the specified number of nanoseconds ahead of this dateTime.
/// @param nanos Number of nanoseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusNanos :(SODataV4_long)nanos;
/// @return A new dateTime which is the specified number of seconds ahead of this dateTime.
/// @param seconds Number of seconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusSeconds :(SODataV4_long)seconds;
/// @return A new dateTime which is the specified number of weeks ahead of this dat/timee.
/// @param weeks Number of weeks to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusWeeks :(SODataV4_int)weeks;
/// @return A new dateTime which is the specified number of years ahead of this dateTime.
/// @param years Number of years to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalDateTime*) plusYears :(SODataV4_int)years;
/// @brief Second field of time (0 to 59).
///
///
- (SODataV4_int) second;
/// @brief Local time component of dateTime.
///
///
- (nonnull SODataV4_LocalTime*) time;
/// @internal
///
- (nonnull SODataV4_GlobalDateTime*) toGlobal;
/// @return This value converted to a global date and time, with specified offset.
/// @param offset (optional) Zone offset in minutes.
/// @see `SODataV4_GlobalDateTime`.`normalize`.
- (nonnull SODataV4_GlobalDateTime*) toGlobal :(SODataV4_int)offset;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_LocalDateTime`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Year field of date.
///
///
- (SODataV4_int) year;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Local date component of dateTime.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_LocalDate* date;
/// @brief Day field of date (1 to 31).
///
///
@property (nonatomic, readonly) SODataV4_int day;
/// @brief Day of week (1 to 7).
///
///
/// @see `SODataV4_DayOfWeek`.
@property (nonatomic, readonly) SODataV4_int dayOfWeek;
/// @brief Day of year (1 to 366).
///
///
@property (nonatomic, readonly) SODataV4_int dayOfYear;
/// @brief Hour field of time (0 to 23).
///
///
@property (nonatomic, readonly) SODataV4_int hour;
/// @brief Minute field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int minute;
/// @brief Month field of date (1 to 12).
///
///
/// @see `SODataV4_MonthOfYear`.
@property (nonatomic, readonly) SODataV4_int month;
/// @brief Nanosecond field of time (0 to 999999999).
///
///
@property (nonatomic, readonly) SODataV4_int nano;
/// @brief Second field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int second;
/// @brief Local time component of dateTime.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_LocalTime* time;
/// @brief Year field of date.
///
///
@property (nonatomic, readonly) SODataV4_int year;
@end
#endif

#ifdef import_SODataV4__LocalDateTime_private
#ifndef imported_SODataV4__LocalDateTime_private
#define imported_SODataV4__LocalDateTime_private
@interface SODataV4_LocalDateTime (private)
+ (nonnull SODataV4_LocalDateTime*) new;
+ (nonnull SODataV4_LocalDateTime*) _new1 :(SODataV4_byte)p1 :(SODataV4_byte)p2 :(SODataV4_byte)p3 :(SODataV4_byte)p4 :(SODataV4_byte)p5 :(SODataV4_int)p6 :(SODataV4_int)p7;
@end
#endif
#endif

#ifndef imported_SODataV4__LocalTime_public
#define imported_SODataV4__LocalTime_public
/// @brief Represents the XML Schema [time](http://www.w3.org/TR/xmlschema11-2/#time) type without zone offset.
///
///
@interface SODataV4_LocalTime : SODataV4_DataValue
{
    @private SODataV4_byte _hour;
    @private SODataV4_byte _minute;
    @private SODataV4_byte _second;
    @private SODataV4_int _nano;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_LocalTime*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_LocalTime*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two time values.
///
///
/// @return -1 if `left < right`, 0 if `left == right`, or 1 if `left > right`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_LocalTime*)left :(nonnull SODataV4_LocalTime*)right;
/// @brief Compare this time with another time.
///
///
/// @return -1 if this time is less than the value time, 0 if they are equal, 1 if this time is greater than the value time.
/// @param value The other time.
- (SODataV4_int) compareTo :(nonnull SODataV4_LocalTime*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two time values.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_LocalTime*)left :(nullable SODataV4_LocalTime*)right;
/// @brief Compare this time value with another time value.
///
///
/// @return True, if this time value is equal to the value time value. Otherwise `false`.
/// @param value The other time value.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Compare this time value with another time value.
///
///
/// @return `true` if this time value is greater than or equal to the value time value. Oherwise `false`.
/// @param value The other time value.
- (SODataV4_boolean) greaterEqual :(nonnull SODataV4_LocalTime*)value;
/// @brief Compare two time values.
///
///
/// @return `true` if `left` is greater than or equal to `right`, otherwise `false`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_boolean) greaterEqual :(nonnull SODataV4_LocalTime*)left :(nonnull SODataV4_LocalTime*)right;
/// @brief Compare this time value with another time value.
///
///
/// @return `true` if this time value is greater than the value time value. Oherwise `false`.
/// @param value The other time value.
- (SODataV4_boolean) greaterThan :(nonnull SODataV4_LocalTime*)value;
/// @brief Compare two time values.
///
///
/// @return `true` if `left` is greater than `right`, otherwise `false`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_boolean) greaterThan :(nonnull SODataV4_LocalTime*)left :(nonnull SODataV4_LocalTime*)right;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Hour field of time (0 to 23).
///
///
- (SODataV4_int) hour;
/// @brief Compare this time value with another time value.
///
///
/// @return `true` if this time value is less than or equal to the value time value. Oherwise `false`.
/// @param value The other time value.
- (SODataV4_boolean) lessEqual :(nonnull SODataV4_LocalTime*)value;
/// @brief Compare two time values.
///
///
/// @return `true` if `left` is less than or equal to `right`, otherwise `false`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_boolean) lessEqual :(nonnull SODataV4_LocalTime*)left :(nonnull SODataV4_LocalTime*)right;
/// @brief Compare this time value with another time value.
///
///
/// @return `true` if this time value is less than the value time value. Oherwise `false`.
/// @param value The other time value.
- (SODataV4_boolean) lessThan :(nonnull SODataV4_LocalTime*)value;
/// @brief Compare two time values.
///
///
/// @return `true` if `left` is less than `right`, otherwise `false`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_boolean) lessThan :(nonnull SODataV4_LocalTime*)left :(nonnull SODataV4_LocalTime*)right;
/// @return The difference `this - value`, measured in days.
/// @param value The other time.
- (SODataV4_double) minus :(nonnull SODataV4_LocalTime*)value;
/// @brief Minute field of time (0 to 59).
///
///
- (SODataV4_int) minute;
/// @brief Nanosecond field of time (0 to 999999999).
///
///
- (SODataV4_int) nano;
/// @brief Compare this time value with another time value.
///
///
/// @return `true` if this time value is not equal to the value time value. Oherwise `false`.
/// @param value The other time value.
- (SODataV4_boolean) notEqual :(nonnull SODataV4_LocalTime*)value;
/// @brief Compare two time values.
///
///
/// @return `true` if `left` is not equal to `right`, otherwise `false`.
/// @param left The first time for comparison.
/// @param right The second time for comparison.
+ (SODataV4_boolean) notEqual :(nullable SODataV4_LocalTime*)left :(nullable SODataV4_LocalTime*)right;
/// @return The current local time.
///
+ (nonnull SODataV4_LocalTime*) now;
/// @internal
///
+ (nonnull SODataV4_LocalTime*) of :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second;
/// @return A new time value.
/// @param hour The hour field (0 to 24). If the `hour` is 24 then all the other parameters must be 0. This represents a day duration (PT24H).
/// @param minute The minute field (0 to 59).
/// @param second The second field (0 to 59).
/// @param nano (optional) The nano field (0 to 999999999).
+ (nonnull SODataV4_LocalTime*) of :(SODataV4_int)hour :(SODataV4_int)minute :(SODataV4_int)second :(SODataV4_int)nano;
/// @return Value parsed from [XML Schema format](http://www.w3.org/TR/xmlschema11-2/#time), or `nil` if `text` has invalid time format.
/// @param text Value in XML Schema format.
+ (nullable SODataV4_LocalTime*) parse :(nonnull NSString*)text;
/// @return A new time which is the specified number of hours ahead of this time.
/// @param hours Number of hours to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalTime*) plusHours :(SODataV4_long)hours;
/// @return A new time which is the specified number of microseconds ahead of this time.
/// @param micros Number of microseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalTime*) plusMicros :(SODataV4_long)micros;
/// @return A new time which is the specified number of milliseconds ahead of this time.
/// @param millis Number of milliseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalTime*) plusMillis :(SODataV4_long)millis;
/// @return A new time which is the specified number of minutes ahead of this time.
/// @param minutes Number of minutes to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalTime*) plusMinutes :(SODataV4_long)minutes;
/// @return A new time which is the specified number of nanoseconds ahead of this time.
/// @param nanos Number of nanoseconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalTime*) plusNanos :(SODataV4_long)nanos;
/// @return A new time which is the specified number of seconds ahead of this time.
/// @param seconds Number of seconds to add. Can be negative, zero or positive.
- (nonnull SODataV4_LocalTime*) plusSeconds :(SODataV4_long)seconds;
/// @brief Second field of time (0 to 59).
///
///
- (SODataV4_int) second;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_LocalTime`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Hour field of time (0 to 23).
///
///
@property (nonatomic, readonly) SODataV4_int hour;
/// @brief Minute field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int minute;
/// @brief Nanosecond field of time (0 to 999999999).
///
///
@property (nonatomic, readonly) SODataV4_int nano;
/// @brief Second field of time (0 to 59).
///
///
@property (nonatomic, readonly) SODataV4_int second;
@end
#endif

#ifdef import_SODataV4__LocalTime_private
#ifndef imported_SODataV4__LocalTime_private
#define imported_SODataV4__LocalTime_private
@interface SODataV4_LocalTime (private)
+ (nonnull SODataV4_LocalTime*) new;
+ (nonnull SODataV4_LocalTime*) _new1 :(SODataV4_byte)p1 :(SODataV4_byte)p2 :(SODataV4_byte)p3 :(SODataV4_int)p4;
@end
#endif
#endif

#ifndef imported_SODataV4__LongValue_public
#define imported_SODataV4__LongValue_public
/// @brief DataValue subclass that wraps a `SODataV4_LongValue`.`value` of type `long`.
///
///
@interface SODataV4_LongValue : SODataV4_DataValue
{
    @private SODataV4_long value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_LongValue*)left :(nonnull SODataV4_LongValue*)right;
/// @brief The type BasicType.LONG.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_LongValue*)left :(nullable SODataV4_LongValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `long` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_LongValue*) of :(SODataV4_long)value;
/// @brief Wrap a nullable `long` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_LongValue*) ofNullable :(SODataV4_nullable_long)value;
/// @brief Convert a wrapped `long` value to a nullable long.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `long` or `nil`.
/// @return A nullable long.
/// @param value The wrapped value.
+ (SODataV4_nullable_long) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_LongValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `long` value to a long.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `long`.
/// @return A long.
/// @param value The wrapped value.
+ (SODataV4_long) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (SODataV4_long) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_LongValue*) zero;
/// @brief The type BasicType.LONG.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_long value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LongValue* zero;
@end
#endif

#ifdef import_SODataV4__LongValue_private
#ifndef imported_SODataV4__LongValue_private
#define imported_SODataV4__LongValue_private
@interface SODataV4_LongValue (private)
+ (nonnull SODataV4_LongValue*) new;
+ (nonnull SODataV4_LongValue*) _new1 :(SODataV4_long)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__ObjectMap_public
#define imported_SODataV4__ObjectMap_public
/// @internal
///
@interface SODataV4_ObjectMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_ObjectMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_ObjectMap*) new;
/// @brief Construct a new map with `SODataV4_ObjectMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ObjectMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_ObjectMap`.
///
///
+ (nonnull SODataV4_ObjectMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_ObjectMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable NSObject*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull NSObject*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull NSObject*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_ObjectMap*) setThis :(nonnull NSString*)key :(nonnull NSObject*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_ObjectMap_EntryList*) sortedEntries;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_ObjectList*) values;
/// @brief An immutable empty `SODataV4_ObjectMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ObjectMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__ObjectMap_private
#ifndef imported_SODataV4__ObjectMap_private
#define imported_SODataV4__ObjectMap_private
@interface SODataV4_ObjectMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_ObjectMap_Entry*) _new1 :(nonnull NSObject*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__PathAnnotationsMap_public
#define imported_SODataV4__PathAnnotationsMap_public
/// @internal
///
@interface SODataV4_PathAnnotationsMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_PathAnnotationsMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_PathAnnotationsMap*) new;
/// @brief Construct a new map with `SODataV4_PathAnnotationsMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PathAnnotationsMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_PathAnnotationsMap`.
///
///
+ (nonnull SODataV4_PathAnnotationsMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_PathAnnotationsMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_PathAnnotations*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_PathAnnotations*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_PathAnnotations*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_PathAnnotationsMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_PathAnnotations*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_PathAnnotationsList*) values;
/// @brief An immutable empty `SODataV4_PathAnnotationsMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PathAnnotationsMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__PathAnnotationsMap_private
#ifndef imported_SODataV4__PathAnnotationsMap_private
#define imported_SODataV4__PathAnnotationsMap_private
@interface SODataV4_PathAnnotationsMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_PathAnnotationsMap_Entry*) _new1 :(nonnull SODataV4_PathAnnotations*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifdef import_SODataV4__PropertyList_MyComparer_internal
#ifndef imported_SODataV4__PropertyList_MyComparer_internal
#define imported_SODataV4__PropertyList_MyComparer_public
/* internal */
@interface SODataV4_PropertyList_MyComparer : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_PropertyList_MyComparer*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_PropertyList_MyComparer*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PropertyList_MyComparer* singleton;
@end
#endif
#endif

#ifdef import_SODataV4__PropertyList_MyEquality_internal
#ifndef imported_SODataV4__PropertyList_MyEquality_internal
#define imported_SODataV4__PropertyList_MyEquality_public
/* internal */
@interface SODataV4_PropertyList_MyEquality : SODataV4_Equality
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_PropertyList_MyEquality*) new;
/// @internal
///
- (void) _init;
- (SODataV4_boolean) equal :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_PropertyList_MyEquality*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PropertyList_MyEquality* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__PropertyMap_public
#define imported_SODataV4__PropertyMap_public
/// @internal
///
@interface SODataV4_PropertyMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_PropertyMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_PropertyMap*) new;
/// @brief Construct a new map with `SODataV4_PropertyMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PropertyMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.name` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_Property*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_PropertyMap`.
///
///
+ (nonnull SODataV4_PropertyMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_PropertyMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_Property*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_Property*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_Property*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_PropertyMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_Property*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_PropertyMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_PropertyList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_PropertyList*) values;
/// @brief An immutable empty `SODataV4_PropertyMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PropertyMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__PropertyMap_private
#ifndef imported_SODataV4__PropertyMap_private
#define imported_SODataV4__PropertyMap_private
@interface SODataV4_PropertyMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_PropertyMap_Entry*) _new1 :(nonnull SODataV4_Property*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryAlias_public
#define imported_SODataV4__QueryAlias_public
/// @brief An alias reference for a data value.
///
///
@interface SODataV4_QueryAlias : SODataV4_DataValue
{
    @private NSString* _Nonnull alias_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryAlias*) new;
/// @internal
///
- (void) _init;
/// @brief The alias name.
///
///
- (nonnull NSString*) alias;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_ALIAS.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The alias name.
///
///
- (void) setAlias :(nonnull NSString*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_QueryAlias`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief The alias name.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* alias;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_ALIAS.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__QueryAlias_private
#ifndef imported_SODataV4__QueryAlias_private
#define imported_SODataV4__QueryAlias_private
@interface SODataV4_QueryAlias (private)
+ (nonnull SODataV4_DataType*) TYPE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* TYPE;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryFilter_public
#define imported_SODataV4__QueryFilter_public
/// @brief Encapsulates the boolean value of an [OData](http://odata.org) logical operator.
///
/// Used to wrap the results of logical `SODataV4_QueryOperator` in a type-safe manner.
///
/// @see `SODataV4_DataQuery`.`queryFilter`, `SODataV4_DataQuery`.`filter`.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) queryWithFilterExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* query = [[[SODataV4_DataQuery new] select:@[Customer.customerID,Customer.companyName,Customer.contactName]] filter:[[Customer.country equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"Germany"]))] and:[Customer.contactName greaterEqual:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"N"]))]]];
///     Customer__List* customers = [service getCustomers:query];
///     [self showCustomers:customers];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) queryWithFilterExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* customerIDProperty = [customerEntityType getProperty:@"CustomerID"];
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_Property* countryProperty = [customerEntityType getProperty:@"Country"];
///     SODataV4_DataQuery* query = [[[[SODataV4_DataQuery new] select:@[customerIDProperty,companyNameProperty,contactNameProperty]] from:customersEntitySet] filter:[[countryProperty equal:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"Germany"]))] and:[contactNameProperty greaterEqual:((SODataV4_DataValue*)((NSObject*)[SODataV4_StringValue of:@"N"]))]]];
///     SODataV4_EntityValueList* customers = [[service executeQuery:query] getEntityList];
///     [self showCustomers:customers];
/// }
/// ````
@interface SODataV4_QueryFilter : SODataV4_DataValue
{
    @private SODataV4_DataValue* _Nonnull value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryFilter*) new;
/// @internal
///
- (void) _init;
/// @return An application of the OData 'and' logical operator to `self` and `filter`.
/// This is a convenience wrapper for `SODataV4_QueryOperator`.`and` which allows method chaining.
/// @param filter To be and'ed with `self`.
- (nonnull SODataV4_QueryFilter*) and :(nonnull SODataV4_DataValue*)filter;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_FILTER.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Construct a query filter by wrapping a boolean value, so it can be used by `SODataV4_DataQuery`.`queryFilter` or `SODataV4_DataQuery`.`where`.
///
///
/// @return A new query filter.
/// @param value A boolean value.
+ (nonnull SODataV4_QueryFilter*) from :(nonnull SODataV4_DataValue*)value;
/// @return An application of the OData 'not' logical operator to `self`.
/// This is a convenience wrapper for `SODataV4_QueryOperator`.`not` which allows method chaining.
- (nonnull SODataV4_QueryFilter*) not;
/// @return An application of the OData 'or' logical operator to `self` and `filter`.
/// This is a convenience wrapper for `SODataV4_QueryOperator`.`or` which allows method chaining.
/// @param filter To be or'ed with `self`.
- (nonnull SODataV4_QueryFilter*) or :(nonnull SODataV4_DataValue*)filter;
/// @brief The wrapped value which is expected to resolve to a boolean value during query execution.
///
///
- (void) setValue :(nonnull SODataV4_DataValue*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_QueryFilter`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief The wrapped value which is expected to resolve to a boolean value during query execution.
///
///
- (nonnull SODataV4_DataValue*) value;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_FILTER.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The wrapped value which is expected to resolve to a boolean value during query execution.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValue* value;
@end
#endif

#ifdef import_SODataV4__QueryFilter_private
#ifndef imported_SODataV4__QueryFilter_private
#define imported_SODataV4__QueryFilter_private
@interface SODataV4_QueryFilter (private)
+ (nonnull SODataV4_DataType*) TYPE;
+ (nonnull SODataV4_QueryFilter*) _new1 :(nonnull SODataV4_DataValue*)p1;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* TYPE;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryFunctionCall_public
#define imported_SODataV4__QueryFunctionCall_public
/// @brief Encapsulates the application of an [OData](http://odata.org) query function to a list of arguments.
///
///
@interface SODataV4_QueryFunctionCall : SODataV4_DataValue
{
    @private SODataV4_QueryFunction* _Nonnull queryFunction_;
    @private SODataV4_DataValueList* _Nonnull callArguments_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new query function call with the specified function and arguments.
///
///
/// @param queryFunction Query function.
/// @param callArguments Function arguments.
+ (nonnull SODataV4_QueryFunctionCall*) new :(nonnull SODataV4_QueryFunction*)queryFunction :(nonnull SODataV4_DataValueList*)callArguments;
/// @internal
///
- (void) _init :(nonnull SODataV4_QueryFunction*)queryFunction :(nonnull SODataV4_DataValueList*)callArguments;
/// @brief The function arguments.
///
///
- (nonnull SODataV4_DataValueList*) callArguments;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_FUNCTION_CALL.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The function to be applied.
///
///
- (nonnull SODataV4_QueryFunction*) queryFunction;
/// @brief The function arguments.
///
///
- (void) setCallArguments :(nonnull SODataV4_DataValueList*)value;
/// @brief The function to be applied.
///
///
- (void) setQueryFunction :(nonnull SODataV4_QueryFunction*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_QueryFunctionCall`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief The function arguments.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValueList* callArguments;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_FUNCTION_CALL.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The function to be applied.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_QueryFunction* queryFunction;
@end
#endif

#ifdef import_SODataV4__QueryFunctionCall_private
#ifndef imported_SODataV4__QueryFunctionCall_private
#define imported_SODataV4__QueryFunctionCall_private
@interface SODataV4_QueryFunctionCall (private)
+ (nonnull SODataV4_DataType*) TYPE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* TYPE;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryFunctionMap_public
#define imported_SODataV4__QueryFunctionMap_public
/// @internal
///
@interface SODataV4_QueryFunctionMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_QueryFunctionMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_QueryFunctionMap*) new;
/// @brief Construct a new map with `SODataV4_QueryFunctionMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_QueryFunctionMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_QueryFunctionMap`.
///
///
+ (nonnull SODataV4_QueryFunctionMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_QueryFunctionMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_QueryFunction*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_QueryFunction*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_QueryFunction*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_QueryFunctionMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_QueryFunction*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_QueryFunctionList*) values;
/// @brief An immutable empty `SODataV4_QueryFunctionMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryFunctionMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__QueryFunctionMap_private
#ifndef imported_SODataV4__QueryFunctionMap_private
#define imported_SODataV4__QueryFunctionMap_private
@interface SODataV4_QueryFunctionMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_QueryFunctionMap_Entry*) _new1 :(nonnull SODataV4_QueryFunction*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryOperatorCall_public
#define imported_SODataV4__QueryOperatorCall_public
/// @brief Encapsulates the application of an [OData](http://odata.org) query operator to a list of arguments.
///
///
@interface SODataV4_QueryOperatorCall : SODataV4_DataValue
{
    @private SODataV4_QueryOperator* _Nonnull queryOperator_;
    @private SODataV4_DataValueList* _Nonnull callArguments_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new query operator call with the specified operator and arguments.
///
///
/// @param queryOperator Query operator.
/// @param callArguments Operator arguments.
+ (nonnull SODataV4_QueryOperatorCall*) new :(nonnull SODataV4_QueryOperator*)queryOperator :(nonnull SODataV4_DataValueList*)callArguments;
/// @internal
///
- (void) _init :(nonnull SODataV4_QueryOperator*)queryOperator :(nonnull SODataV4_DataValueList*)callArguments;
/// @brief The operator arguments.
///
///
- (nonnull SODataV4_DataValueList*) callArguments;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_OPERATOR_CALL.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The operator to be applied.
///
///
- (nonnull SODataV4_QueryOperator*) queryOperator;
/// @brief The operator arguments.
///
///
- (void) setCallArguments :(nonnull SODataV4_DataValueList*)value;
/// @brief The operator to be applied.
///
///
- (void) setQueryOperator :(nonnull SODataV4_QueryOperator*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_QueryOperatorCall`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief The operator arguments.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValueList* callArguments;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.QUERY_OPERATOR_CALL.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The operator to be applied.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_QueryOperator* queryOperator;
@end
#endif

#ifdef import_SODataV4__QueryOperatorCall_private
#ifndef imported_SODataV4__QueryOperatorCall_private
#define imported_SODataV4__QueryOperatorCall_private
@interface SODataV4_QueryOperatorCall (private)
+ (nonnull SODataV4_DataType*) TYPE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataType* TYPE;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryOperatorMap_public
#define imported_SODataV4__QueryOperatorMap_public
/// @internal
///
@interface SODataV4_QueryOperatorMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_QueryOperatorMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_QueryOperatorMap*) new;
/// @brief Construct a new map with `SODataV4_QueryOperatorMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_QueryOperatorMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_QueryOperatorMap`.
///
///
+ (nonnull SODataV4_QueryOperatorMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_QueryOperatorMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_QueryOperator*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_QueryOperator*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_QueryOperator*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_QueryOperatorMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_QueryOperator*)value;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_QueryOperatorList*) values;
/// @brief An immutable empty `SODataV4_QueryOperatorMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryOperatorMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__QueryOperatorMap_private
#ifndef imported_SODataV4__QueryOperatorMap_private
#define imported_SODataV4__QueryOperatorMap_private
@interface SODataV4_QueryOperatorMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_QueryOperatorMap_Entry*) _new1 :(nonnull SODataV4_QueryOperator*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryType_public
#define imported_SODataV4__QueryType_public
/// @internal
///
@interface SODataV4_QueryType : SODataV4_DataValue
{
    @private SODataV4_DataType* _Nonnull _type_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryType*) new;
/// @internal
///
- (void) _init;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Construct a new data type reference.
///
///
/// @return A new data type reference.
/// @param type Data type.
+ (nonnull SODataV4_QueryType*) of :(nonnull SODataV4_DataType*)type;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_QueryType`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__QueryType_private
#ifndef imported_SODataV4__QueryType_private
#define imported_SODataV4__QueryType_private
@interface SODataV4_QueryType (private)
- (nonnull SODataV4_DataType*) _type;
+ (nonnull SODataV4_QueryType*) _new1 :(nonnull SODataV4_DataType*)p1;
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* _type;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryValue_public
#define imported_SODataV4__QueryValue_public
/// @brief Base class for paths and properties as well as wrapped constant values and query function/operation calls.
///
/// Intended to allow convenient cascaded application of query functions/operators in fluent query construction.
///
/// @see `SODataV4_DataQuery`, `SODataV4_DataPath`, `SODataV4_Property`, `SODataV4_QueryFunction`, `SODataV4_QueryOperator`.
@interface SODataV4_QueryValue : SODataV4_DataValue
{
    @private SODataV4_DataValue* _Nonnull _value_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryValue*) new;
/// @internal
///
- (void) _init;
/// @return `QueryOperator.add(this, value)`.
/// @param value Value to be added to the current value.
- (nonnull SODataV4_QueryValue*) add :(nonnull SODataV4_DataValue*)value;
/// @return `QueryOperator.all(this, lambda, match)`.
/// @param lambda Lambda variable, constructed by `SODataV4_DataPath`.`lambda`.
/// @param match Query filter.
- (nonnull SODataV4_QueryFilter*) all :(nonnull SODataV4_DataPath*)lambda :(nonnull SODataV4_QueryFilter*)match;
/// @return `QueryOperator.any(this, lambda, match)`.
/// @param lambda Lambda variable, constructed by `SODataV4_DataPath`.`lambda`.
/// @param match Query filter.
- (nonnull SODataV4_QueryFilter*) any :(nonnull SODataV4_DataPath*)lambda :(nonnull SODataV4_QueryFilter*)match;
/// @return `QueryFunction.asType(type, this)`.
/// @param type A data type.
- (nonnull SODataV4_QueryValue*) asType :(nonnull SODataV4_DataType*)type;
/// @return Aggregate transformation item with this query value and 'average' aggregate method.
/// @param alias Alias of the transformation item.
- (nonnull SODataV4_AggregateValue*) average :(nonnull NSString*)alias;
/// @return `QueryFunction.ceiling(this)`.
///
- (nonnull SODataV4_QueryValue*) ceiling;
/// @return `QueryFunction.concat(this, text)`.
/// @param text To be concatenated to the current value.
- (nonnull SODataV4_QueryValue*) concat :(nonnull SODataV4_DataValue*)text;
/// @return `QueryFunction.contains(this, text)`.
/// @param text To search for in the current value.
- (nonnull SODataV4_QueryFilter*) contains :(nonnull SODataV4_DataValue*)text;
/// @return Aggregate transformation item with this query value and 'countdistinct' aggregate method.
/// @param alias Alias of the transformation item.
- (nonnull SODataV4_AggregateValue*) countDistinct :(nonnull NSString*)alias;
/// @brief Data type of the property.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @return `QueryFunction.date(this)`.
///
- (nonnull SODataV4_QueryValue*) date;
/// @return `QueryFunction.day(this)`.
///
- (nonnull SODataV4_QueryValue*) day;
/// @return `QueryOperator.add(this, value)`.
/// @param value Divisor to be applied to the current value.
- (nonnull SODataV4_QueryValue*) divide :(nonnull SODataV4_DataValue*)value;
/// @return `QueryFunction.endsWith(this, text)`.
/// @param suffix Suffix to check for in the current value.
- (nonnull SODataV4_QueryFilter*) endsWith :(nonnull SODataV4_DataValue*)suffix;
/// @return `QueryOperator.equal(this, value)`.
/// @param value Value to be compared with the current value.
- (nonnull SODataV4_QueryFilter*) equal :(nullable SODataV4_DataValue*)value;
/// @return `QueryFunction.floor(this)`.
///
- (nonnull SODataV4_QueryValue*) floor;
/// @return `QueryFunction.fractionalSeconds(this)`.
///
- (nonnull SODataV4_QueryValue*) fractionalSeconds;
/// @return `QueryFunction.getDistance(this, value)`
/// @param value Target point for distance calculation.
- (nonnull SODataV4_QueryValue*) geoDistance :(nonnull SODataV4_DataValue*)value;
/// @return `QueryFunction.getIntersects(this, value)`
/// @param value Target polygon for intersection calculation.
- (nonnull SODataV4_QueryFilter*) geoIntersectse :(nonnull SODataV4_DataValue*)value;
/// @return `QueryFunction.geoLength(this)`
///
- (nonnull SODataV4_QueryValue*) geoLength;
/// @return `QueryOperator.greaterEqual(this, value)`.
/// @param value Value to be compared with the current value.
- (nonnull SODataV4_QueryFilter*) greaterEqual :(nonnull SODataV4_DataValue*)value;
/// @return `QueryOperator.greaterThan(this, value)`.
/// @param value Value to be compared with the current value.
- (nonnull SODataV4_QueryFilter*) greaterThan :(nonnull SODataV4_DataValue*)value;
/// @return `QueryOperator.has(this, flag)`.
/// The current object must be a path or property with enum type.
/// @param flag Flag value to be tested for.
- (nonnull SODataV4_QueryFilter*) has :(SODataV4_int)flag;
/// @return `QueryFunction.hour(this)`.
///
- (nonnull SODataV4_QueryValue*) hour;
/// @return `QueryFunction.indexOf(this, text)`.
/// @param text To search for in the current value.
- (nonnull SODataV4_QueryValue*) indexOf :(nonnull SODataV4_DataValue*)text;
/// @return `QueryOperator.equal(this, null)`.
///
- (nonnull SODataV4_QueryFilter*) isNull;
/// @return `QueryFunction.isType(type, this)`.
/// @param type A data type.
- (nonnull SODataV4_QueryFilter*) isType :(nonnull SODataV4_DataType*)type;
/// @return `QueryFunction.length(this)`.
///
- (nonnull SODataV4_QueryValue*) length;
/// @return `QueryOperator.lessEqual(this, value)`.
/// @param value Value to be compared with the current value.
- (nonnull SODataV4_QueryFilter*) lessEqual :(nonnull SODataV4_DataValue*)value;
/// @return `QueryOperator.lessThan(this, value)`.
/// @param value Value to be compared with the current value.
- (nonnull SODataV4_QueryFilter*) lessThan :(nonnull SODataV4_DataValue*)value;
/// @return Aggregate transformation item with this query value and 'maximum' aggregate method.
/// @param alias Alias of the transformation item.
- (nonnull SODataV4_AggregateValue*) maximum :(nonnull NSString*)alias;
/// @return Aggregate transformation item with this query value and 'minimum' aggregate method.
/// @param alias Alias of the transformation item.
- (nonnull SODataV4_AggregateValue*) minimum :(nonnull NSString*)alias;
/// @return `QueryFunction.minute(this)`.
///
- (nonnull SODataV4_QueryValue*) minute;
/// @return `QueryOperator.add(this, value)`.
/// @param value Modulus to be applied to the current value.
- (nonnull SODataV4_QueryValue*) modulo :(nonnull SODataV4_DataValue*)value;
/// @return `QueryFunction.month(this)`.
///
- (nonnull SODataV4_QueryValue*) month;
/// @return `QueryOperator.add(this, value)`.
/// @param value Value to be multiplied by the current value.
- (nonnull SODataV4_QueryValue*) multiply :(nonnull SODataV4_DataValue*)value;
/// @return `QueryOperator.negate(this)`.
///
- (nonnull SODataV4_QueryValue*) negate;
/// @return `QueryOperator.notEqual(this, value)`.
/// @param value Value to be compared with the current value.
- (nonnull SODataV4_QueryFilter*) notEqual :(nullable SODataV4_DataValue*)value;
/// @return `QueryOperator.notEqual(this, null)`.
///
- (nonnull SODataV4_QueryFilter*) notNull;
/// @return `QueryFunction.round(this)`.
///
- (nonnull SODataV4_QueryValue*) round;
/// @return `QueryFunction.second(this)`.
///
- (nonnull SODataV4_QueryValue*) second;
/// @return `QueryFunction.startsWith(this, text)`.
/// @param prefix Prefix to check for in the current value.
- (nonnull SODataV4_QueryFilter*) startsWith :(nonnull SODataV4_DataValue*)prefix;
/// @internal
///
- (nonnull SODataV4_QueryValue*) substring :(nonnull SODataV4_DataValue*)start;
/// @return `QueryFunction.substring(this, start, length)`.
/// @param start A starting index.
/// @param length (optional) A substring length.
- (nonnull SODataV4_QueryValue*) substring :(nonnull SODataV4_DataValue*)start :(nullable SODataV4_DataValue*)length;
/// @return `QueryOperator.add(this, value)`.
/// @param value Value to be subtracted from the current value.
- (nonnull SODataV4_QueryValue*) subtract :(nonnull SODataV4_DataValue*)value;
/// @return Aggregate transformation item with this query value and 'sum' aggregate method.
/// @param alias Alias of the transformation item.
- (nonnull SODataV4_AggregateValue*) sum :(nonnull NSString*)alias;
/// @return `QueryFunction.time(this)`.
///
- (nonnull SODataV4_QueryValue*) time;
/// @return `QueryFunction.toLower(this)`.
///
- (nonnull SODataV4_QueryValue*) toLower;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_QueryValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @return `QueryFunction.toUpper(this)`.
///
- (nonnull SODataV4_QueryValue*) toUpper;
/// @return `QueryFunction.totalOffsetMinutes(this)`.
///
- (nonnull SODataV4_QueryValue*) totalOffsetMinutes;
/// @return `QueryFunction.trim(this)`.
///
- (nonnull SODataV4_QueryValue*) trim;
/// @return The path, property, constant value or query function/operator call which is wrapped by this object.
///
- (nonnull SODataV4_DataValue*) unwrap;
/// @return `value` wrapped so as to allow cascading query function/operator calls.
/// @param value Data value.
+ (nonnull SODataV4_QueryValue*) wrap :(nonnull SODataV4_DataValue*)value;
/// @return `QueryFunction.year(this)`.
///
- (nonnull SODataV4_QueryValue*) year;
/// @brief Data type of the property.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__QueryValue_private
#ifndef imported_SODataV4__QueryValue_private
#define imported_SODataV4__QueryValue_private
@interface SODataV4_QueryValue (private)
- (nonnull SODataV4_DataValue*) _value;
- (void) set_value :(nonnull SODataV4_DataValue*)value;
+ (nonnull SODataV4_QueryValue*) _new1 :(nonnull SODataV4_DataValue*)p1;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValue* _value;
@end
#endif
#endif

#ifdef import_SODataV4__QueryValue_internal
#ifndef imported_SODataV4__QueryValue_internal
#define imported_SODataV4__QueryValue_internal
@interface SODataV4_QueryValue (internal)
+ (nullable SODataV4_DataValue*) staticUnwrap :(nullable SODataV4_DataValue*)value;
@end
#endif
#endif

#ifndef imported_SODataV4__ShortValue_public
#define imported_SODataV4__ShortValue_public
/// @brief DataValue subclass that wraps a `SODataV4_ShortValue`.`value` of type `short`.
///
///
@interface SODataV4_ShortValue : SODataV4_DataValue
{
    @private SODataV4_short value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_ShortValue*)left :(nonnull SODataV4_ShortValue*)right;
/// @brief The type BasicType.SHORT.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_ShortValue*)left :(nullable SODataV4_ShortValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `short` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_ShortValue*) of :(SODataV4_short)value;
/// @brief Wrap a nullable `short` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_ShortValue*) ofNullable :(SODataV4_nullable_short)value;
/// @brief Convert a wrapped `short` value to a nullable short.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `short` or `nil`.
/// @return A nullable short.
/// @param value The wrapped value.
+ (SODataV4_nullable_short) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_ShortValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `short` value to a short.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `short`.
/// @return A short.
/// @param value The wrapped value.
+ (SODataV4_short) unwrap :(nullable NSObject*)value;
/// @brief Check if argument would be a valid `SODataV4_ShortValue`.
///
///
/// @throw `SODataV4_CastException` if `value` is out of the valid range of `SODataV4_ShortValue`.
/// @return The argument without modification.
/// @param value The value to be validated.
+ (SODataV4_short) validate :(SODataV4_short)value;
/// @brief The wrapped value.
///
///
- (SODataV4_short) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_ShortValue*) zero;
/// @brief The type BasicType.SHORT.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_short value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ShortValue* zero;
@end
#endif

#ifdef import_SODataV4__ShortValue_private
#ifndef imported_SODataV4__ShortValue_private
#define imported_SODataV4__ShortValue_private
@interface SODataV4_ShortValue (private)
+ (nonnull SODataV4_ShortValue*) new;
+ (nonnull SODataV4_ShortValue*) _new1 :(SODataV4_short)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__SimpleType_public
#define imported_SODataV4__SimpleType_public
/// @brief Represents a type definition for an underlying basic type.
///
///
@interface SODataV4_SimpleType : SODataV4_DataType
{
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_TypeFacets* _Nullable typeFacets_;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_boolean isInferred_;
    @private SODataV4_boolean isUnicode_;
    @private SODataV4_int minLength_;
    @private SODataV4_int maxLength_;
    @private SODataV4_int precision_;
    @private SODataV4_int scale_;
    @private SODataV4_int srid_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_SimpleType*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_SimpleType`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_SimpleType`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_SimpleType`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @brief The type code of the underlying type.
///
///
- (SODataV4_int) code;
/// @brief Synonym for `SODataV4_SimpleType`.`baseType`.
///
///
- (nonnull SODataV4_DataType*) derivedFrom;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_SimpleType`.`minLength`, `SODataV4_SimpleType`.`maxLength`.
- (SODataV4_boolean) fixedLength;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_SimpleType`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief `true` if this type is a derived simple, complex, entity or enum type.
///
///
- (SODataV4_boolean) isDerived;
/// @brief `true` if this type was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief `true` if this simple type was inferred due to a missing term definition in the CSDL.
///
///
- (SODataV4_boolean) isInferred;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_SimpleType`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (SODataV4_boolean) isUnicode;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
- (nonnull NSString*) localName;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) minLength;
/// @brief Synonym for `SODataV4_SimpleType`.`qualifiedName`.
///
///
- (nonnull NSString*) name;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (SODataV4_int) precision;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
- (nonnull NSString*) qualifiedName;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (SODataV4_int) scale;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_SimpleType`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief Synonym for `SODataV4_SimpleType`.`baseType`.
///
///
- (void) setDerivedFrom :(nonnull SODataV4_DataType*)value;
/// @brief `true` if this type was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief `true` if this simple type was inferred due to a missing term definition in the CSDL.
///
///
- (void) setIsInferred :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_SimpleType`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (void) setIsUnicode :(SODataV4_boolean)value;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMaxLength :(SODataV4_int)value;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMinLength :(SODataV4_int)value;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (void) setPrecision :(SODataV4_int)value;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
- (void) setQualifiedName :(nonnull NSString*)value;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (void) setScale :(SODataV4_int)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (void) setSrid :(SODataV4_int)value;
/// @brief Type facets for this type. Can be `nil` if there are no custom facets.
///
///
- (void) setTypeFacets :(nullable SODataV4_TypeFacets*)value;
/// @brief Represents an undefined enum type.
///
///
+ (nonnull SODataV4_EnumType*) simplr;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (SODataV4_int) srid;
/// @return The name of this data type.
///
- (nonnull NSString*) toString;
/// @brief Type facets for this type. Can be `nil` if there are no custom facets.
///
///
- (nullable SODataV4_TypeFacets*) typeFacets;
/// @brief Obsolete. Use `SODataV4_SimpleType`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_SimpleType`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_SimpleType`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief The type code of the underlying type.
///
///
@property (nonatomic, readonly) SODataV4_int code;
/// @brief Synonym for `SODataV4_SimpleType`.`baseType`.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* derivedFrom;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_SimpleType`.`minLength`, `SODataV4_SimpleType`.`maxLength`.
@property (nonatomic, readonly) SODataV4_boolean fixedLength;
/// @brief `true` if this type is a derived simple, complex, entity or enum type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isDerived;
/// @brief `true` if this type was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief `true` if this simple type was inferred due to a missing term definition in the CSDL.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isInferred;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_SimpleType`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
@property (nonatomic, readwrite) SODataV4_boolean isUnicode;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int minLength;
/// @brief Synonym for `SODataV4_SimpleType`.`qualifiedName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
@property (nonatomic, readwrite) SODataV4_int precision;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
@property (nonatomic, readwrite) SODataV4_int scale;
/// @brief Represents an undefined enum type.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumType* simplr;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
@property (nonatomic, readwrite) SODataV4_int srid;
/// @brief Type facets for this type. Can be `nil` if there are no custom facets.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_TypeFacets* typeFacets;
@end
#endif

#ifdef import_SODataV4__SimpleType_private
#ifndef imported_SODataV4__SimpleType_private
#define imported_SODataV4__SimpleType_private
@interface SODataV4_SimpleType (private)
+ (nonnull SODataV4_EnumType*) _new1 :(nonnull NSString*)p1 :(nonnull SODataV4_EnumValueMap*)p2 :(nonnull SODataV4_EnumValueList*)p3 :(SODataV4_boolean)p4 :(nonnull NSString*)p5 :(nonnull SODataV4_DataType*)p6;
@end
#endif
#endif

#ifdef import_SODataV4__SimpleTypeList_SortByName_internal
#ifndef imported_SODataV4__SimpleTypeList_SortByName_internal
#define imported_SODataV4__SimpleTypeList_SortByName_public
/* internal */
@interface SODataV4_SimpleTypeList_SortByName : SODataV4_Comparer
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_SimpleTypeList_SortByName*) new;
/// @internal
///
- (void) _init;
- (SODataV4_int) compare :(nullable NSObject*)left :(nullable NSObject*)right;
+ (nonnull SODataV4_SimpleTypeList_SortByName*) singleton;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_SimpleTypeList_SortByName* singleton;
@end
#endif
#endif

#ifndef imported_SODataV4__SimpleTypeMap_public
#define imported_SODataV4__SimpleTypeMap_public
/// @internal
///
@interface SODataV4_SimpleTypeMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_SimpleTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_SimpleTypeMap*) new;
/// @brief Construct a new map with `SODataV4_SimpleTypeMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_SimpleTypeMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add an entry to this map using `value.localName` as the entry key and `value` as the entry value.
///
///
/// @param value Value for new map entry.
- (void) add :(nonnull SODataV4_SimpleType*)value;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_SimpleTypeMap`.
///
///
+ (nonnull SODataV4_SimpleTypeMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_SimpleTypeMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable SODataV4_SimpleType*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull SODataV4_SimpleType*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull SODataV4_SimpleType*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_SimpleTypeMap*) setThis :(nonnull NSString*)key :(nonnull SODataV4_SimpleType*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_SimpleTypeMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_SimpleTypeList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_SimpleTypeList*) values;
/// @brief An immutable empty `SODataV4_SimpleTypeMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_SimpleTypeMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__SimpleTypeMap_private
#ifndef imported_SODataV4__SimpleTypeMap_private
#define imported_SODataV4__SimpleTypeMap_private
@interface SODataV4_SimpleTypeMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_SimpleTypeMap_Entry*) _new1 :(nonnull SODataV4_SimpleType*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__StreamBase_public
#define imported_SODataV4__StreamBase_public
/// @brief Abstract base class for streams.
///
///
/// @see `SODataV4_ByteStream`, `SODataV4_CharStream`.
@interface SODataV4_StreamBase : SODataV4_DataValue
{
    @private NSString* _Nullable _tag;
    @private NSString* _Nullable _file;
    @private NSString* _Nullable _type;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StreamBase*) new;
/// @internal
///
- (void) _init;
/// @brief Close this stream. Automatically calls `SODataV4_StreamBase`.`flush` before closing.
///
/// This function can be safely called if the stream is already closed.
- (void) close;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
- (nullable NSString*) entityTag;
/// @brief File name if known, otherwise `nil`.
///
///
- (nullable NSString*) fileName;
/// @brief Flush any buffered writes from this stream.
///
///
- (void) flush;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (nullable NSString*) mediaType;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
- (void) setEntityTag :(nullable NSString*)value;
/// @brief File name if known, otherwise `nil`.
///
///
- (void) setFileName :(nullable NSString*)value;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (void) setMediaType :(nullable NSString*)value;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
@property (nonatomic, readwrite, strong, nullable) NSString* entityTag;
/// @brief File name if known, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* fileName;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
@property (nonatomic, readwrite, strong, nullable) NSString* mediaType;
@end
#endif

#ifndef imported_SODataV4__StreamLink_public
#define imported_SODataV4__StreamLink_public
/// @brief Represents a link to the value of a media entity resource or a stream-typed property.
///
///
/// @see `SODataV4_EntityType`.`isMedia`, `SODataV4_Property`.`isStream`.
@interface SODataV4_StreamLink : SODataV4_DataValue
{
    @private NSData* _Nullable _data;
    @private SODataV4_StructureType* _Nonnull owningType_;
    @private SODataV4_EntitySet* _Nullable entitySet_;
    @private SODataV4_StreamProperty* _Nonnull streamProperty_;
    @private NSString* _Nullable mediaType_;
    @private NSString* _Nullable entityTag_;
    @private NSString* _Nullable editLink_;
    @private NSString* _Nullable readLink_;
    @private NSString* _Nullable valuePath_;
    @private SODataV4_boolean isDeleted_;
    @private SODataV4_boolean isOffline_;
    @private SODataV4_boolean isChanged_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StreamLink*) new;
/// @internal
///
- (void) _init;
/// @return A copy of this stream link.
///
- (nonnull SODataV4_StreamLink*) copyLink;
/// @brief The type BasicType.STREAM_LINK.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The edit link for this value, preferably relative to the service root URL.
///
/// If a stream does not have an explicit edit link, then writers should use the `SODataV4_StreamLink`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (nullable NSString*) editLink;
/// @brief Which entity set does this stream link belong to?
///
///
- (nullable SODataV4_EntitySet*) entitySet;
/// @brief Server-generated entity tag for this entity.
///
/// If non-null, it is used for conflict detection during
/// `DataService.uploadMedia` and `DataService.uploadStream` calls.
- (nullable NSString*) entityTag;
/// @return `true` if two stream links have equal read/edit links.
/// @param a First stream link.
/// @param b Second stream link.
+ (SODataV4_boolean) equal :(nullable SODataV4_StreamLink*)a :(nullable SODataV4_StreamLink*)b;
/// @brief Inline binary content if known, otherwise `nil`.
///
///
- (nullable NSData*) inlineData;
/// @brief Inline string content if known, otherwise `nil`.
///
///
- (nullable NSString*) inlineText;
/// @brief If the stream content has been (or is being) deleted, then `true`, otherwise `false`.
///
///
- (SODataV4_boolean) isDeleted;
/// @brief If the stream content is available offline, then `true`, otherwise `false`.
///
///
- (SODataV4_boolean) isOffline;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (nullable NSString*) mediaType;
/// @brief Which structure type does this stream link belong to?
///
///
- (nonnull SODataV4_StructureType*) owningType;
/// @brief The read link for this value, preferably relative to the service root URL.
///
/// If a stream does not have an explicit read link, then readers should use the `SODataV4_StreamLink`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (nullable NSString*) readLink;
/// @brief The edit link for this value, preferably relative to the service root URL.
///
/// If a stream does not have an explicit edit link, then writers should use the `SODataV4_StreamLink`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (void) setEditLink :(nullable NSString*)value;
/// @brief Which entity set does this stream link belong to?
///
///
- (void) setEntitySet :(nullable SODataV4_EntitySet*)value;
/// @brief Server-generated entity tag for this entity.
///
/// If non-null, it is used for conflict detection during
/// `DataService.uploadMedia` and `DataService.uploadStream` calls.
- (void) setEntityTag :(nullable NSString*)value;
/// @brief Inline binary content if known, otherwise `nil`.
///
///
- (void) setInlineData :(nullable NSData*)value;
/// @brief Inline string content if known, otherwise `nil`.
///
///
- (void) setInlineText :(nullable NSString*)value;
/// @brief If the stream content has been (or is being) deleted, then `true`, otherwise `false`.
///
///
- (void) setIsDeleted :(SODataV4_boolean)value;
/// @brief If the stream content is available offline, then `true`, otherwise `false`.
///
///
- (void) setIsOffline :(SODataV4_boolean)value;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (void) setMediaType :(nullable NSString*)value;
/// @brief Which structure type does this stream link belong to?
///
///
- (void) setOwningType :(nonnull SODataV4_StructureType*)value;
/// @brief The read link for this value, preferably relative to the service root URL.
///
/// If a stream does not have an explicit read link, then readers should use the `SODataV4_StreamLink`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (void) setReadLink :(nullable NSString*)value;
/// @brief Which stream property does this stream link belong to?
///
///
- (void) setStreamProperty :(nonnull SODataV4_StreamProperty*)value;
/// @brief The canonical path of this value relative to the parent entity URL.
///
///
- (void) setValuePath :(nullable NSString*)value;
/// @brief Which stream property does this stream link belong to?
///
///
- (nonnull SODataV4_StreamProperty*) streamProperty;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_StreamLink`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief The canonical path of this value relative to the parent entity URL.
///
///
- (nullable NSString*) valuePath;
/// @brief The type BasicType.STREAM_LINK.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The edit link for this value, preferably relative to the service root URL.
///
/// If a stream does not have an explicit edit link, then writers should use the `SODataV4_StreamLink`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
@property (nonatomic, readwrite, strong, nullable) NSString* editLink;
/// @brief Which entity set does this stream link belong to?
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntitySet* entitySet;
/// @brief Server-generated entity tag for this entity.
///
/// If non-null, it is used for conflict detection during
/// `DataService.uploadMedia` and `DataService.uploadStream` calls.
@property (nonatomic, readwrite, strong, nullable) NSString* entityTag;
/// @brief Inline binary content if known, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSData* inlineData;
/// @brief Inline string content if known, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* inlineText;
/// @brief If the stream content has been (or is being) deleted, then `true`, otherwise `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isDeleted;
/// @brief If the stream content is available offline, then `true`, otherwise `false`.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isOffline;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
@property (nonatomic, readwrite, strong, nullable) NSString* mediaType;
/// @brief Which structure type does this stream link belong to?
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StructureType* owningType;
/// @brief The read link for this value, preferably relative to the service root URL.
///
/// If a stream does not have an explicit read link, then readers should use the `SODataV4_StreamLink`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
@property (nonatomic, readwrite, strong, nullable) NSString* readLink;
/// @brief Which stream property does this stream link belong to?
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StreamProperty* streamProperty;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The canonical path of this value relative to the parent entity URL.
///
///
@property (atomic, readwrite, strong, nullable) NSString* valuePath;
@end
#endif

#ifdef import_SODataV4__StreamLink_private
#ifndef imported_SODataV4__StreamLink_private
#define imported_SODataV4__StreamLink_private
@interface SODataV4_StreamLink (private)
+ (nonnull SODataV4_StreamLink*) _new1 :(nonnull SODataV4_StreamProperty*)p1 :(nullable SODataV4_EntitySet*)p2 :(nullable NSString*)p3 :(nonnull SODataV4_StructureType*)p4 :(nullable NSString*)p5 :(SODataV4_boolean)p6 :(nullable NSData*)p7 :(nullable NSString*)p8 :(nullable NSString*)p9;
@end
#endif
#endif

#ifdef import_SODataV4__StreamLink_internal
#ifndef imported_SODataV4__StreamLink_internal
#define imported_SODataV4__StreamLink_internal
@interface SODataV4_StreamLink (internal)
/// @brief If the inline content is changed, then `true`, else `false`.
///
/// For internal use.
- (SODataV4_boolean) isChanged;
- (nonnull NSString*) metricBaseName;
/// @brief If the inline content is changed, then `true`, else `false`.
///
/// For internal use.
- (void) setIsChanged :(SODataV4_boolean)value;
/// @brief If the inline content is changed, then `true`, else `false`.
///
/// For internal use.
@property (nonatomic, readwrite) SODataV4_boolean isChanged;
@end
#endif
#endif

#ifndef imported_SODataV4__StringMap_public
#define imported_SODataV4__StringMap_public
/// @brief A map from key type `string` to value type `string`.
///
///
@interface SODataV4_StringMap : SODataV4_MapBase
{
    @private SODataV4_MapFromString* _Nonnull _untyped_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new map with `SODataV4_StringMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
+ (nonnull SODataV4_StringMap*) new;
/// @brief Construct a new map with `SODataV4_StringMap`.`size` of zero and optional initial `capacity`.
///
/// A map can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the map's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_StringMap*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Delete the entry with the specified `key` (if found).
///
///
/// @return `true` if an entry with the specified `key` was found (and deleted).
/// @param key Entry key.
- (SODataV4_boolean) delete_ :(nonnull NSString*)key;
/// @brief An immutable empty `SODataV4_StringMap`.
///
///
+ (nonnull SODataV4_StringMap*) empty;
/// @return A list of the entries (key/value pairs) in this map.
///
- (nonnull SODataV4_StringMap_EntryList*) entries;
/// @return The value from the entry with the specified `key` (if found), otherwise `nil`.
/// @param key Entry key.
- (nullable NSString*) get :(nonnull NSString*)key;
/// @return The value from the entry with the specified `key` (if found).
/// @throw `SODataV4_MissingEntryException` if no entry is found for the specified key.
/// @param key Entry key.
- (nonnull NSString*) getRequired :(nonnull NSString*)key;
/// @return `true` if this map has an entry with the specified `key`, otherwise `false`.
/// @param key Entry key.
- (SODataV4_boolean) has :(nonnull NSString*)key;
/// @brief Invert this map of keys to values to another map of values to keys.
///
///
/// @return New inverted map.
- (nonnull SODataV4_StringMap*) inverse;
/// @return A list of the entry keys in this map.
///
- (nonnull SODataV4_StringList*) keys;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @param value Entry value.
/// @param key Entry key.
- (void) set :(nonnull NSString*)key :(nonnull NSString*)value;
/// @brief Add or replace an entry with the specified `key` and `value`.
///
///
/// @return This map.
/// @param key Entry key.
/// @param value Entry value.
- (nonnull SODataV4_StringMap*) setThis :(nonnull NSString*)key :(nonnull NSString*)value;
/// @return The entries of this map sorted by key.
///
- (nonnull SODataV4_StringMap_EntryList*) sortedEntries;
/// @return The sorted keys of this map.
///
- (nonnull SODataV4_StringList*) sortedKeys;
/// @return The sorted values of this map.
///
- (nonnull SODataV4_StringList*) sortedValues;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
- (nonnull SODataV4_UntypedMap*) untypedMap;
/// @return A list of the entry values in this map.
///
- (nonnull SODataV4_StringList*) values;
/// @brief An immutable empty `SODataV4_StringMap`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_StringMap* empty;
/// @brief The underlying untyped map of objects. Use with care, avoiding the addition of objects with an incorrect item type.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_UntypedMap* untypedMap;
@end
#endif

#ifdef import_SODataV4__StringMap_private
#ifndef imported_SODataV4__StringMap_private
#define imported_SODataV4__StringMap_private
@interface SODataV4_StringMap (private)
- (nonnull SODataV4_MapFromString*) _untyped;
- (void) set_untyped :(nonnull SODataV4_MapFromString*)value;
+ (nonnull SODataV4_StringMap_Entry*) _new1 :(nonnull NSString*)p1 :(nonnull NSString*)p2;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MapFromString* _untyped;
@end
#endif
#endif

#ifndef imported_SODataV4__StringSet_public
#define imported_SODataV4__StringSet_public
/// @internal
///
@interface SODataV4_StringSet : SODataV4_SetBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new set with `SODataV4_StringSet`.`size` of zero and optional initial `capacity`.
///
/// A set can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the set's maximum size.
+ (nonnull SODataV4_StringSet*) new;
/// @brief Construct a new set with `SODataV4_StringSet`.`size` of zero and optional initial `capacity`.
///
/// A set can expand in size beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the set's maximum size.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_StringSet*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `value` to this set.
///
///
/// @param value Value to be added.
- (void) add :(nonnull NSString*)value;
/// @brief Add `value` to this set.
///
///
/// @return This set.
/// @param value Value to be added.
- (nonnull SODataV4_StringSet*) addThis :(nonnull NSString*)value;
/// @brief Delete `value` from this set.
///
///
/// @return `true` if the value was found (and deleted).
/// @param value Value to be deleted.
- (SODataV4_boolean) delete_ :(nonnull NSString*)value;
/// @brief An immutable empty `SODataV4_StringSet`.
///
///
+ (nonnull SODataV4_StringSet*) empty;
/// @return `true` if this set contains `value`.
/// @param value Value to be found.
- (SODataV4_boolean) has :(nonnull NSString*)value;
/// @return The sorted values of this set.
///
- (nonnull SODataV4_StringList*) sortedValues;
/// @return A list of the values in this set.
///
- (nonnull SODataV4_StringList*) values;
/// @brief An immutable empty `SODataV4_StringSet`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_StringSet* empty;
@end
#endif

#ifndef imported_SODataV4__StringValue_public
#define imported_SODataV4__StringValue_public
/// @brief DataValue subclass that wraps a `SODataV4_StringValue`.`value` of type `string`.
///
///
@interface SODataV4_StringValue : SODataV4_DataValue
{
    @private NSString* _Nonnull value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_StringValue*)left :(nonnull SODataV4_StringValue*)right;
/// @brief The type BasicType.STRING.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief A wrapped empty string value.
///
///
+ (nonnull SODataV4_StringValue*) empty;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_StringValue*)left :(nullable SODataV4_StringValue*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap a `string` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_StringValue*) of :(nonnull NSString*)value;
/// @brief Wrap a nullable `string` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_StringValue*) ofNullable :(nullable NSString*)value;
/// @brief Convert a wrapped `string` value to a nullable string.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `string` or `nil`.
/// @return A nullable string.
/// @param value The wrapped value.
+ (nullable NSString*) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_StringValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `string` value to a string.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `string`.
/// @return A string.
/// @param value The wrapped value.
+ (nonnull NSString*) unwrap :(nullable NSObject*)value;
/// @brief The wrapped value.
///
///
- (nonnull NSString*) value;
/// @brief The type BasicType.STRING.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief A wrapped empty string value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_StringValue* empty;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* value;
@end
#endif

#ifdef import_SODataV4__StringValue_private
#ifndef imported_SODataV4__StringValue_private
#define imported_SODataV4__StringValue_private
@interface SODataV4_StringValue (private)
+ (nonnull SODataV4_StringValue*) new;
+ (nonnull SODataV4_StringValue*) _new1 :(nonnull NSString*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__StructureBase_public
#define imported_SODataV4__StructureBase_public
/// @brief The canonical path of this value relative to the service root URL.
///
/// Common base class for `SODataV4_ComplexValue` and `SODataV4_EntityValue`.
@interface SODataV4_StructureBase : SODataV4_DataValue
{
    @private SODataV4_DataValueMap* _Nullable _dynamic;
    @private SODataV4_DataValueList* _Nonnull _data_;
    @private SODataV4_BooleanArray* _Nonnull _has_;
    @private NSString* _Nullable valuePath_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StructureBase*) new;
/// @internal
///
- (void) _init;
/// @brief Holds *dynamic* property values, for which metadata is not known in advance.
///
///
/// @see `SODataV4_ComplexType`.`isOpenType`, `SODataV4_EntityType`.`isOpenType`.
- (nonnull SODataV4_DataValueMap*) dynamicProperties;
/// @brief Get the value of a specified property path.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set.
/// @return The property value, as an instance of the appropriate subclass of `SODataV4_DataValue`, or `nil` if the property value is `nil`.
/// @param path The specified property path.
/// @see `SODataV4_StructureBase`.`hasDataValue`.
- (nullable SODataV4_DataValue*) getDataValue :(nonnull SODataV4_PropertyPath*)path;
/// @return The value of a dynamic property, or `nil` if no such property exists.
/// @param name Name of a dynamic property.
/// @see `SODataV4_StructureBase`.`dynamicProperties`.
- (nullable SODataV4_DataValue*) getDynamic :(nonnull NSString*)name;
/// @brief Get the next-link of a specified collection-typed property path.
///
///
/// @return The next-link, or `nil` if there is no next link for the specified path.
/// @param path The specified property path.
/// @see `SODataV4_StructureBase`.`hasNextLink`.
- (nullable NSString*) getNextLink :(nonnull SODataV4_PropertyPath*)path;
/// @brief Get the optional value of a specified property path.
///
///
/// @return The property value, as an instance of the appropriate subclass of `SODataV4_DataValue`, or `nil` if the property value is `nil` or if the property value was not previously set.
/// @param path The specified property path.
- (nullable SODataV4_DataValue*) getOptionalValue :(nonnull SODataV4_PropertyPath*)path;
/// @brief Get the required value of a specified property path.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set (or is `nil`), `SODataV4_CastException` if the property value is `nil`.
/// @return The property value, using the appropriate subclass of `SODataV4_DataValue`.
/// @param path The specified property path.
- (nonnull SODataV4_DataValue*) getRequiredValue :(nonnull SODataV4_PropertyPath*)path;
/// @brief Get the stream link for a specified stream property.
///
///
/// @throw `SODataV4_UsageException` if the property is not a stream property.
/// @return The stream link.
/// @param property The specified stream property.
- (nonnull SODataV4_StreamLink*) getStreamLink :(nonnull SODataV4_Property*)property;
/// @return `true` if this structure has the specified data `type` (or a subtype).
/// @param type Specified data type.
- (SODataV4_boolean) hasDataType :(nonnull SODataV4_DataType*)type;
/// @return `true` if this structure contains an explicitly set value for the specified property (including `nil`, if `SODataV4_Property`.`isNullable`).
/// @param property The specified property.
- (SODataV4_boolean) hasDataValue :(nonnull SODataV4_Property*)property;
/// @brief True if the structure has dynamic properties set.
///
///
- (SODataV4_boolean) hasDynamicProperties;
/// @return `true` if this structure contains a next-link for the specified collection-typed property.
/// @param property The specified property.
- (SODataV4_boolean) hasNextLink :(nonnull SODataV4_Property*)property;
/// @brief Is this structure an instance of a generated proxy class?
///
///
- (SODataV4_boolean) isProxy;
/// @brief Set the value of a specified property.
///
///
/// @throw `SODataV4_CastException` if the property value does not have the expected type.
/// @param property The specified property.
/// @param value The property value (or `nil`), using the appropriate subclass of `SODataV4_DataValue`.
- (void) setDataValue :(nonnull SODataV4_Property*)property :(nullable SODataV4_DataValue*)value;
/// @internal
///
- (void) setDefaultValues;
/// @internal
///
- (void) setDefaultValues :(SODataV4_boolean)nestedComplex;
/// @internal
///
- (void) setDefaultValues :(SODataV4_boolean)nestedComplex :(SODataV4_boolean)nestedEntity;
/// @internal
///
- (void) setDefaultValues :(SODataV4_boolean)nestedComplex :(SODataV4_boolean)nestedEntity :(SODataV4_boolean)defaultOptional;
/// @internal
///
- (void) setDefaultValues :(SODataV4_boolean)nestedComplex :(SODataV4_boolean)nestedEntity :(SODataV4_boolean)defaultOptional :(SODataV4_boolean)defaultRequired;
/// @brief Recursively apply default values to any unset properties of this structure.
///
/// If a property has a model-defined default value, it will always be applied (since that default value is part of a server's contract with the client, it must always be valid to apply it).
/// If the property doesn't have a model-defined default value, then `nil` will be used for nullable properties, and false/empty/zero values will be applied otherwise as appropriate. Dates will default to 2000-01-01.
///
/// @see `SODataV4_StructureBase`.`hasDataValue`, `SODataV4_Property`.`defaultValue`, `SODataV4_StructureType`.`structuralProperties`, `SODataV4_StructureType`.`navigationProperties`.
/// @param nestedComplex (optional) Apply recursively to complex-typed (structural) properties of this structure? Defaults to true.
/// @param nestedEntity (optional) Apply recursively to entity-typed (navigation) properties of this structure? Defaults to false.
/// @param defaultOptional (optional) Apply non-model-defined default values to optional (nullable) properties?
/// @param defaultRequired (optional) Apply non-model-defined default values to required (non-nullable) properties?
/// @param skipConstraints (optional) Avoid applying default values to properties which have a database-level default constraint.
- (void) setDefaultValues :(SODataV4_boolean)nestedComplex :(SODataV4_boolean)nestedEntity :(SODataV4_boolean)defaultOptional :(SODataV4_boolean)defaultRequired :(SODataV4_boolean)skipConstraints;
/// @brief Add or change the value of a dynamic property.
///
///
/// @param name Name of a dynamic property.
/// @param value Value for the dynamic property.
/// @see `SODataV4_StructureBase`.`dynamicProperties`.
- (void) setDynamic :(nonnull NSString*)name :(nullable SODataV4_DataValue*)value;
/// @brief Holds *dynamic* property values, for which metadata is not known in advance.
///
///
/// @see `SODataV4_ComplexType`.`isOpenType`, `SODataV4_EntityType`.`isOpenType`.
- (void) setDynamicProperties :(nonnull SODataV4_DataValueMap*)value;
/// @brief Set the optional value of a specified property.
///
/// If a `nil` value is provided and the property does not permit `nil` values (`SODataV4_Property`.`isNullable` is `false`), then this is equivalent to calling `unsetDataValue`, otherwise it is equivalent to calling `setDataValue`.
///
/// @throw `SODataV4_CastException` if the property value does not have the expected type.
/// @param property The specified property.
/// @param value The property value (or `nil`), using the appropriate subclass of `SODataV4_DataValue`.
- (void) setOptionalValue :(nonnull SODataV4_Property*)property :(nullable SODataV4_DataValue*)value;
/// @brief Set the required value of a specified property.
///
///
/// @throw `SODataV4_CastException` if the property value does not have the expected type.
/// @param property The specified property.
/// @param value The property value, using the appropriate subclass of `SODataV4_DataValue`.
- (void) setRequiredValue :(nonnull SODataV4_Property*)property :(nonnull SODataV4_DataValue*)value;
/// @brief The canonical path of this value relative to the service root URL.
///
/// Used internally in URL construction. Should not be set explicitly.
- (void) setValuePath :(nullable NSString*)value;
/// @brief The complex/entity type metadata for this value (`SODataV4_StructureBase`.`dataType` cast to `StructureType`).
///
///
- (nonnull SODataV4_StructureType*) structureType;
/// @brief Unset the value of a specified property, so that `SODataV4_StructureBase`.`hasDataValue``(property)` will return `false`.
///
///
/// @param property The specified property.
- (void) unsetDataValue :(nonnull SODataV4_Property*)property;
/// @brief The canonical path of this value relative to the service root URL.
///
/// Used internally in URL construction. Should not be set explicitly.
- (nullable NSString*) valuePath;
/// @brief Holds *dynamic* property values, for which metadata is not known in advance.
///
///
/// @see `SODataV4_ComplexType`.`isOpenType`, `SODataV4_EntityType`.`isOpenType`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValueMap* dynamicProperties;
/// @brief True if the structure has dynamic properties set.
///
///
@property (nonatomic, readonly) SODataV4_boolean hasDynamicProperties;
/// @brief Is this structure an instance of a generated proxy class?
///
///
@property (nonatomic, readonly) SODataV4_boolean isProxy;
/// @brief The complex/entity type metadata for this value (`SODataV4_StructureBase`.`dataType` cast to `StructureType`).
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_StructureType* structureType;
/// @brief The canonical path of this value relative to the service root URL.
///
/// Used internally in URL construction. Should not be set explicitly.
@property (atomic, readwrite, strong, nullable) NSString* valuePath;
@end
#endif

#ifdef import_SODataV4__StructureBase_private
#ifndef imported_SODataV4__StructureBase_private
#define imported_SODataV4__StructureBase_private
@interface SODataV4_StructureBase (private)
+ (nonnull SODataV4_DayTimeDuration*) DEFAULT_DAY_TIME_DURATION;
+ (nonnull SODataV4_GlobalDateTime*) DEFAULT_GLOBAL_DATE_TIME;
+ (nonnull SODataV4_GuidValue*) DEFAULT_GUID_VALUE;
+ (nonnull SODataV4_LocalDate*) DEFAULT_LOCAL_DATE;
+ (nonnull SODataV4_LocalDateTime*) DEFAULT_LOCAL_DATE_TIME;
+ (nonnull SODataV4_LocalTime*) DEFAULT_LOCAL_TIME;
+ (nonnull SODataV4_YearMonthDuration*) DEFAULT_YEAR_MONTH_DURATION;
- (SODataV4_int) checkID :(nonnull SODataV4_Property*)property;
- (void) checkPropertyGet :(nonnull SODataV4_Property*)property :(nullable SODataV4_DataValue*)dv;
- (void) checkPropertySet :(nonnull SODataV4_Property*)property :(nullable SODataV4_DataValue*)dv;
- (SODataV4_boolean) checkPropertyType :(nonnull SODataV4_Property*)property :(nonnull SODataV4_DataValue*)dv;
- (SODataV4_int) defaultGeographySRID :(nonnull SODataV4_Property*)property;
- (SODataV4_int) defaultGeometrySRID :(nonnull SODataV4_Property*)property;
- (nonnull NSString*) explainUndefinedProperties :(nonnull SODataV4_Property*)property;
- (nullable SODataV4_DataValue*) getPathValue :(nonnull SODataV4_DataPath*)path;
+ (nonnull SODataV4_StreamLink*) _new1 :(nonnull SODataV4_StreamProperty*)p1 :(nonnull SODataV4_StructureType*)p2;
+ (nonnull SODataV4_GeographyMultiPoint*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPointCoordinates*)p2;
+ (nonnull SODataV4_GeographyLineString*) _new3 :(SODataV4_int)p1 :(nonnull SODataV4_LineStringCoordinates*)p2;
+ (nonnull SODataV4_GeographyPolygon*) _new4 :(SODataV4_int)p1 :(nonnull SODataV4_PolygonCoordinates*)p2;
+ (nonnull SODataV4_GeographyMultiLineString*) _new5 :(SODataV4_int)p1 :(nonnull SODataV4_MultiLineStringCoordinates*)p2;
+ (nonnull SODataV4_GeographyMultiPolygon*) _new6 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPolygonCoordinates*)p2;
+ (nonnull SODataV4_GeographyCollection*) _new7 :(nonnull SODataV4_GeographyValueList*)p1 :(SODataV4_int)p2;
+ (nonnull SODataV4_GeometryMultiPoint*) _new8 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPointCoordinates*)p2;
+ (nonnull SODataV4_GeometryLineString*) _new9 :(SODataV4_int)p1 :(nonnull SODataV4_LineStringCoordinates*)p2;
+ (nonnull SODataV4_GeometryPolygon*) _new10 :(SODataV4_int)p1 :(nonnull SODataV4_PolygonCoordinates*)p2;
+ (nonnull SODataV4_GeometryMultiLineString*) _new11 :(SODataV4_int)p1 :(nonnull SODataV4_MultiLineStringCoordinates*)p2;
+ (nonnull SODataV4_GeometryMultiPolygon*) _new12 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPolygonCoordinates*)p2;
+ (nonnull SODataV4_GeometryCollection*) _new13 :(nonnull SODataV4_GeometryValueList*)p1 :(SODataV4_int)p2;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DayTimeDuration* DEFAULT_DAY_TIME_DURATION;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_GlobalDateTime* DEFAULT_GLOBAL_DATE_TIME;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_GuidValue* DEFAULT_GUID_VALUE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LocalDate* DEFAULT_LOCAL_DATE;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LocalDateTime* DEFAULT_LOCAL_DATE_TIME;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LocalTime* DEFAULT_LOCAL_TIME;
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_YearMonthDuration* DEFAULT_YEAR_MONTH_DURATION;
@end
#endif
#endif

#ifdef import_SODataV4__StructureBase_internal
#ifndef imported_SODataV4__StructureBase_internal
#define imported_SODataV4__StructureBase_internal
@interface SODataV4_StructureBase (internal)
/// @brief Holds the values for structural and navigation properties with known metadata.
///
///
- (nonnull SODataV4_DataValueList*) _data;
/// @brief Indicates whether a value is known for each property.
///
/// Allows us to distinguish a known `nil` value from a value not set.
- (nonnull SODataV4_BooleanArray*) _has;
- (void) copyDynamicProperties :(nonnull SODataV4_StructureBase*)from;
- (void) dataInit;
/// @internal
///
- (nullable SODataV4_DataValue*) defaultForProperty :(nonnull SODataV4_Property*)property;
- (nullable SODataV4_DataValue*) defaultForProperty :(nonnull SODataV4_Property*)property :(SODataV4_boolean)required;
- (void) fixInferred;
/// @brief Holds the values for structural and navigation properties with known metadata.
///
///
- (void) set_data :(nonnull SODataV4_DataValueList*)value;
/// @brief Indicates whether a value is known for each property.
///
/// Allows us to distinguish a known `nil` value from a value not set.
- (void) set_has :(nonnull SODataV4_BooleanArray*)value;
/// @brief Holds the values for structural and navigation properties with known metadata.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValueList* _data;
/// @brief Indicates whether a value is known for each property.
///
/// Allows us to distinguish a known `nil` value from a value not set.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_BooleanArray* _has;
@end
#endif
#endif

#ifndef imported_SODataV4__StructureType_public
#define imported_SODataV4__StructureType_public
/// @brief Common base class for `SODataV4_ComplexType` and `SODataV4_EntityType`.
///
///
@interface SODataV4_StructureType : SODataV4_DataType
{
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private NSString* _Nonnull localName_;
    @private NSString* _Nonnull qualifiedName_;
    @private SODataV4_ObjectFactory* _Nullable objectFactory_;
    @private SODataV4_boolean isAbstract_;
    @private SODataV4_boolean isOpenType_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_PropertyList* _Nonnull propertyList_;
    @private SODataV4_PropertyMap* _Nonnull propertyMap_;
    @private SODataV4_PropertyList* _Nonnull streamProperties_;
    @private SODataV4_PropertyList* _Nonnull complexProperties_;
    @private SODataV4_PropertyList* _Nonnull collectionProperties_;
    @private SODataV4_PropertyList* _Nonnull structuralProperties_;
    @private SODataV4_PropertyList* _Nonnull navigationProperties_;
    @private SODataV4_PropertyList* _Nonnull extensionProperties_;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_boolean isInferred_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StructureType*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_StructureType`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_StructureType`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_StructureType`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @brief List of collection-typed properties for this type (both structural and navigation properties may be included).
///
///
- (nonnull SODataV4_PropertyList*) collectionProperties;
/// @brief List of complex properties for this type (a subset of `SODataV4_StructureType`.`structuralProperties`).
///
///
- (nonnull SODataV4_PropertyList*) complexProperties;
/// @brief List of extension properties for this type.
///
/// Includes extension structural/navigation properties.
///
/// @see `SODataV4_Property`.`isExtension`.
- (nonnull SODataV4_PropertyList*) extensionProperties;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_StructureType`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief Lookup an existing property by name. If the property does not exist it indicates a fundamental implementation
///
/// problem, therefore a non-catchable `FatalException` will be thrown, and the app intentionally crashes.
/// The reason behind this drastic behaviour is to avoid mismatch between server and client.
/// It is still possible to avoid the `FatalException` by looking up propery before calling this method like in the
/// following code snippet:
///
/// @return The property metadata, which MUST exists.
/// @param name Name of the property.
/// 
/// #### Example checking if a property exists
/// 
/// ```` oc
/// - (void) checkPropertyExistsExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* entitySet = [service getEntitySet:@"Employees"];
///     SODataV4_EntityType* entityType = entitySet.entityType;
///     SODataV4_PropertyMap* propMap = entityType.propertyMap;
///     if ([[propMap keys] includes:@"BirthDate"])
///     {
///         [SODataV4_Ignore valueOf_any:[entityType getProperty:@"BirthDate"]];
///     }
///     else
///     {
///     }
/// }
/// ````
/// @see `SODataV4_StructureType`.`propertyMap`, for looking up properties that might not exist.
- (nonnull SODataV4_Property*) getProperty :(nonnull NSString*)name;
/// @brief `true` if this is an abstract type.
///
///
- (SODataV4_boolean) isAbstract;
/// @brief `true` if this type was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief `true` if this structure type was inferred due to a missing term definition in the CSDL.
///
///
- (SODataV4_boolean) isInferred;
/// @brief `true` if this is an open type. An open type can have dynamic properties.
///
///
- (SODataV4_boolean) isOpenType;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_StructureType`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
- (nonnull NSString*) localName;
/// @brief Synonym for `SODataV4_StructureType`.`qualifiedName`.
///
///
- (nonnull NSString*) name;
/// @brief List of navigation properties for this type.
///
///
/// @see `SODataV4_Property`.`isNavigation`.
- (nonnull SODataV4_PropertyList*) navigationProperties;
/// @brief Factory for creating custom (subclass) objects with this type.
///
///
- (nullable SODataV4_ObjectFactory*) objectFactory;
/// @brief List of stream, structural and navigation properties for this type.
///
///
- (nonnull SODataV4_PropertyList*) propertyList;
/// @brief Map of stream, structural and navigation properties for this type.
///
///
- (nonnull SODataV4_PropertyMap*) propertyMap;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
- (nonnull NSString*) qualifiedName;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_StructureType`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief List of collection-typed properties for this type (both structural and navigation properties may be included).
///
///
- (void) setCollectionProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief List of complex properties for this type (a subset of `SODataV4_StructureType`.`structuralProperties`).
///
///
- (void) setComplexProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief List of extension properties for this type.
///
/// Includes extension structural/navigation properties.
///
/// @see `SODataV4_Property`.`isExtension`.
- (void) setExtensionProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief `true` if this is an abstract type.
///
///
- (void) setIsAbstract :(SODataV4_boolean)value;
/// @brief `true` if this type was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief `true` if this structure type was inferred due to a missing term definition in the CSDL.
///
///
- (void) setIsInferred :(SODataV4_boolean)value;
/// @brief `true` if this is an open type. An open type can have dynamic properties.
///
///
- (void) setIsOpenType :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_StructureType`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
- (void) setLocalName :(nonnull NSString*)value;
/// @brief List of navigation properties for this type.
///
///
/// @see `SODataV4_Property`.`isNavigation`.
- (void) setNavigationProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief Factory for creating custom (subclass) objects with this type.
///
///
- (void) setObjectFactory :(nullable SODataV4_ObjectFactory*)value;
/// @brief List of stream, structural and navigation properties for this type.
///
///
- (void) setPropertyList :(nonnull SODataV4_PropertyList*)value;
/// @brief Map of stream, structural and navigation properties for this type.
///
///
- (void) setPropertyMap :(nonnull SODataV4_PropertyMap*)value;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
- (void) setQualifiedName :(nonnull NSString*)value;
/// @brief List of stream properties for this type.
///
///
- (void) setStreamProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief List of structural properties for this type.
///
///
/// @see `SODataV4_Property`.`isStructural`.
- (void) setStructuralProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief List of stream properties for this type.
///
///
- (nonnull SODataV4_PropertyList*) streamProperties;
/// @brief List of structural properties for this type.
///
///
/// @see `SODataV4_Property`.`isStructural`.
- (nonnull SODataV4_PropertyList*) structuralProperties;
/// @brief Obsolete. Use `SODataV4_StructureType`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_StructureType`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_StructureType`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief List of collection-typed properties for this type (both structural and navigation properties may be included).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* collectionProperties;
/// @brief List of complex properties for this type (a subset of `SODataV4_StructureType`.`structuralProperties`).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* complexProperties;
/// @brief List of extension properties for this type.
///
/// Includes extension structural/navigation properties.
///
/// @see `SODataV4_Property`.`isExtension`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* extensionProperties;
/// @brief `true` if this is an abstract type.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isAbstract;
/// @brief `true` if this type was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief `true` if this structure type was inferred due to a missing term definition in the CSDL.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isInferred;
/// @brief `true` if this is an open type. An open type can have dynamic properties.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isOpenType;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_StructureType`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief The local name of this type within its owning `SODataV4_DataSchema`, e.g. "MyType".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* localName;
/// @brief Synonym for `SODataV4_StructureType`.`qualifiedName`.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief List of navigation properties for this type.
///
///
/// @see `SODataV4_Property`.`isNavigation`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* navigationProperties;
/// @brief Factory for creating custom (subclass) objects with this type.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_ObjectFactory* objectFactory;
/// @brief List of stream, structural and navigation properties for this type.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* propertyList;
/// @brief Map of stream, structural and navigation properties for this type.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyMap* propertyMap;
/// @brief The name of this type qualified by its owning `SODataV4_DataSchema` name, e.g. "MySchema.MyType".
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* qualifiedName;
/// @brief List of stream properties for this type.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* streamProperties;
/// @brief List of structural properties for this type.
///
///
/// @see `SODataV4_Property`.`isStructural`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* structuralProperties;
@end
#endif

#ifdef import_SODataV4__UndefinedValue_internal
#ifndef imported_SODataV4__UndefinedValue_internal
#define imported_SODataV4__UndefinedValue_public
/* internal */
@interface SODataV4_UndefinedValue : SODataV4_DataValue
{
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_UndefinedValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
@end
#endif
#endif

#ifdef import_SODataV4__UndefinedValue_internal
#ifndef imported_SODataV4__UndefinedValue_internal
#define imported_SODataV4__UndefinedValue_internal
@interface SODataV4_UndefinedValue (internal)
+ (nonnull SODataV4_UndefinedValue*) new;
@end
#endif
#endif

#ifndef imported_SODataV4__UnsignedByte_public
#define imported_SODataV4__UnsignedByte_public
/// @brief DataValue subclass that wraps a `SODataV4_UnsignedByte`.`value` of type `unsignedByte`.
///
///
@interface SODataV4_UnsignedByte : SODataV4_DataValue
{
    @private SODataV4_int value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_UnsignedByte*)left :(nonnull SODataV4_UnsignedByte*)right;
/// @brief The type BasicType.UNSIGNED_BYTE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_UnsignedByte*)left :(nullable SODataV4_UnsignedByte*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap an `unsignedByte` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_UnsignedByte*) of :(SODataV4_int)value;
/// @brief Wrap a nullable `unsignedByte` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_UnsignedByte*) ofNullable :(SODataV4_nullable_int)value;
/// @brief Convert a signed `byte` value to unsigned `int`.
///
///
/// @return The byte value, treated as unsigned, then converted to an int value.
/// @param value The byte value.
+ (SODataV4_int) toInt :(SODataV4_byte)value;
/// @brief Convert a wrapped `unsignedByte` value to a nullable unsigned byte.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `unsignedByte` or `nil`.
/// @return A nullable int.
/// @param value The wrapped value.
+ (SODataV4_nullable_int) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_UnsignedByte`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `unsignedByte` value to an unsigned byte.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `unsignedByte`.
/// @return A int.
/// @param value The wrapped value.
+ (SODataV4_int) unwrap :(nullable NSObject*)value;
/// @brief Check if argument would be a valid `SODataV4_UnsignedByte`.
///
///
/// @throw `SODataV4_CastException` if `value` is out of the valid range of `SODataV4_UnsignedByte`.
/// @return The argument without modification.
/// @param value The value to be validated.
+ (SODataV4_int) validate :(SODataV4_int)value;
/// @brief The wrapped value.
///
///
- (SODataV4_int) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_UnsignedByte*) zero;
#define SODataV4_UnsignedByte_MAX_VALUE 255
/// @brief The type BasicType.UNSIGNED_BYTE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_int value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_UnsignedByte* zero;
@end
#endif

#ifdef import_SODataV4__UnsignedByte_private
#ifndef imported_SODataV4__UnsignedByte_private
#define imported_SODataV4__UnsignedByte_private
@interface SODataV4_UnsignedByte (private)
+ (nonnull SODataV4_UnsignedByte*) new;
+ (nonnull SODataV4_UnsignedByte*) _new1 :(SODataV4_int)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__UnsignedShort_public
#define imported_SODataV4__UnsignedShort_public
/// @brief DataValue subclass that wraps a `SODataV4_UnsignedShort`.`value` of type `unsignedShort`.
///
///
@interface SODataV4_UnsignedShort : SODataV4_DataValue
{
    @private SODataV4_int value_;
}
+ (void) initialize;
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Compare two wrapped values for ordering.
///
///
/// @return -1 if `left.value < right.value`, 0 if `left.value == right.value`, or 1 if `left.value > right.value`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_UnsignedShort*)left :(nonnull SODataV4_UnsignedShort*)right;
/// @brief The type BasicType.UNSIGNED_SHORT.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two wrapped values for equality.
///
///
/// @return `true` if `left.value == right.value` or if both arguments are `nil`, otherwise `false`.
/// @param left First object for comparison.
/// @param right Second object for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_UnsignedShort*)left :(nullable SODataV4_UnsignedShort*)right;
/// @return `true` if this object is equal to `value`.
/// @param value The value to compare with.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Hash the wrapped value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Wrap an `unsignedShort` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nonnull SODataV4_UnsignedShort*) of :(SODataV4_int)value;
/// @brief Wrap a nullable `unsignedShort` value as an object.
///
///
/// @return The wrapped value.
/// @param value Value to be wrapped.
+ (nullable SODataV4_UnsignedShort*) ofNullable :(SODataV4_nullable_int)value;
/// @brief Convert a signed `short` value to unsigned `int`.
///
///
/// @return The short value, treated as unsigned, then converted to an int value.
/// @param value The short value.
+ (SODataV4_int) toInt :(SODataV4_short)value;
/// @brief Convert a wrapped `unsignedShort` value to an unsigned short.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `unsignedShort` or `nil`.
/// @return A nullable int.
/// @param value The wrapped value.
+ (SODataV4_nullable_int) toNullable :(nullable NSObject*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_UnsignedShort`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Convert a wrapped `unsignedShort` value to an unsigned short.
///
///
/// @throw `SODataV4_CastException` if `value` is not a wrapped `unsignedShort`.
/// @return An int value.
/// @param value The wrapped value.
+ (SODataV4_int) unwrap :(nullable NSObject*)value;
/// @brief Check if argument would be a valid `SODataV4_UnsignedShort`.
///
///
/// @throw `SODataV4_CastException` if `value` is out of the valid range of `SODataV4_UnsignedShort`.
/// @return The argument without modification.
/// @param value The value to be validated.
+ (SODataV4_int) validate :(SODataV4_int)value;
/// @brief The wrapped value.
///
///
- (SODataV4_int) value;
/// @brief Wrapped zero value.
///
///
+ (nonnull SODataV4_UnsignedShort*) zero;
#define SODataV4_UnsignedShort_MAX_VALUE 65535
/// @brief The type BasicType.UNSIGNED_SHORT.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
/// @brief The wrapped value.
///
///
@property (nonatomic, readonly) SODataV4_int value;
/// @brief Wrapped zero value.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_UnsignedShort* zero;
@end
#endif

#ifdef import_SODataV4__UnsignedShort_private
#ifndef imported_SODataV4__UnsignedShort_private
#define imported_SODataV4__UnsignedShort_private
@interface SODataV4_UnsignedShort (private)
+ (nonnull SODataV4_UnsignedShort*) new;
+ (nonnull SODataV4_UnsignedShort*) _new1 :(SODataV4_int)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__YearMonthDuration_public
#define imported_SODataV4__YearMonthDuration_public
/// @brief Represents the XML Schema [yearMonthDuration](http://www.w3.org/TR/xmlschema11-2/#yearMonthDuration) type.
///
///
@interface SODataV4_YearMonthDuration : SODataV4_DataValue
{
    @private SODataV4_byte _sign;
    @private SODataV4_int _years;
    @private SODataV4_int _months;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_YearMonthDuration*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_YearMonthDuration*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return -1 if `left < right`, 0 if `left == right`, or 1 if `left > right`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_int) compare :(nonnull SODataV4_YearMonthDuration*)left :(nonnull SODataV4_YearMonthDuration*)right;
/// @brief Compare this yearMonthDuration with another yearMonthDuration.
///
///
/// @return -1 if this yearMonthDuration is less than the value yearMonthDuration, 0 if they are equal, 1 if this yearMonthDuration is greater than the value yearMonthDuration.
/// @param value The other yearMonthDuration.
- (SODataV4_int) compareTo :(nonnull SODataV4_YearMonthDuration*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return `true` if `left` is equal to `right`, otherwise `false`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_boolean) equal :(nullable SODataV4_YearMonthDuration*)left :(nullable SODataV4_YearMonthDuration*)right;
/// @brief Compare this yearMonthDuration value with another yearMonthDuration value.
///
///
/// @return True, if this yearMonthDuration value is equal to the value yearMonthDuration value. Otherwise `false`.
/// @param value The other yearMonthDuration value.
- (SODataV4_boolean) equals :(nullable NSObject*)value;
/// @brief Compare this yearMonthDuration value with another yearMonthDuration value.
///
///
/// @return `true` if this yearMonthDuration value is greater than or equal to the value yearMonthDuration value. Oherwise `false`.
/// @param value The other yearMonthDuration value.
- (SODataV4_boolean) greaterEqual :(nonnull SODataV4_YearMonthDuration*)value;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return `true` if `left` is greater than or equal to `right`, otherwise `false`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_boolean) greaterEqual :(nonnull SODataV4_YearMonthDuration*)left :(nonnull SODataV4_YearMonthDuration*)right;
/// @brief Compare this yearMonthDuration value with another yearMonthDuration value.
///
///
/// @return `true` if this yearMonthDuration value is greater than the value yearMonthDuration value. Oherwise `false`.
/// @param value The other yearMonthDuration value.
- (SODataV4_boolean) greaterThan :(nonnull SODataV4_YearMonthDuration*)value;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return `true` if `left` is greater than `right`, otherwise `false`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_boolean) greaterThan :(nonnull SODataV4_YearMonthDuration*)left :(nonnull SODataV4_YearMonthDuration*)right;
/// @brief Hash this data value to a number.
///
///
/// @return Any value in the range of type `int`.
- (SODataV4_int) hashCode;
/// @brief Compare this yearMonthDuration value with another yearMonthDuration value.
///
///
/// @return `true` if this yearMonthDuration value is less than or equal to the value yearMonthDuration value. Oherwise `false`.
/// @param value The other yearMonthDuration value.
- (SODataV4_boolean) lessEqual :(nonnull SODataV4_YearMonthDuration*)value;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return `true` if `left` is less than or equal to `right`, otherwise `false`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_boolean) lessEqual :(nonnull SODataV4_YearMonthDuration*)left :(nonnull SODataV4_YearMonthDuration*)right;
/// @brief Compare this yearMonthDuration value with another yearMonthDuration value.
///
///
/// @return `true` if this yearMonthDuration value is less than the value yearMonthDuration value. Oherwise `false`.
/// @param value The other yearMonthDuration value.
- (SODataV4_boolean) lessThan :(nonnull SODataV4_YearMonthDuration*)value;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return `true` if `left` is less than `right`, otherwise `false`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_boolean) lessThan :(nonnull SODataV4_YearMonthDuration*)left :(nonnull SODataV4_YearMonthDuration*)right;
/// @brief Months field of duration (non-negative).
///
///
- (SODataV4_int) months;
/// @return An equivalent value with all fields normalized.
/// The result value will have months < 12.
/// The result value will be `SODataV4_YearMonthDuration`.`equal` to this value.
- (nonnull SODataV4_YearMonthDuration*) normalize;
/// @brief Compare this yearMonthDuration value with another yearMonthDuration value.
///
///
/// @return `true` if this yearMonthDuration value is not equal to the value yearMonthDuration value. Oherwise `false`.
/// @param value The other yearMonthDuration value.
- (SODataV4_boolean) notEqual :(nonnull SODataV4_YearMonthDuration*)value;
/// @brief Compare two yearMonthDuration values.
///
///
/// @return `true` if `left` is not equal to `right`, otherwise `false`.
/// @param left The first yearMonthDuration for comparison.
/// @param right The second yearMonthDuration for comparison.
+ (SODataV4_boolean) notEqual :(nullable SODataV4_YearMonthDuration*)left :(nullable SODataV4_YearMonthDuration*)right;
/// @return A new year/month duration.
/// @param sign The sign field (+1, 0 or -1).
/// @param years The years field (non-negative).
/// @param months The months field (non-negative).
+ (nonnull SODataV4_YearMonthDuration*) of :(SODataV4_int)sign :(SODataV4_int)years :(SODataV4_int)months;
/// @return Value parsed from [XML Schema format](http://www.w3.org/TR/xmlschema11-2/#yearMonthDuration), or `nil` if `text` has invalid duration format.
/// @param text Value in XML Schema format.
+ (nullable SODataV4_YearMonthDuration*) parse :(nonnull NSString*)text;
/// @brief Sign of the duration (+1, 0 or -1).
///
///
- (SODataV4_int) sign;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_YearMonthDuration`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Years field of duration (non-negative).
///
///
- (SODataV4_int) years;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Months field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int months;
/// @brief Sign of the duration (+1, 0 or -1).
///
///
@property (nonatomic, readonly) SODataV4_int sign;
/// @brief Years field of duration (non-negative).
///
///
@property (nonatomic, readonly) SODataV4_int years;
@end
#endif

#ifdef import_SODataV4__YearMonthDuration_private
#ifndef imported_SODataV4__YearMonthDuration_private
#define imported_SODataV4__YearMonthDuration_private
@interface SODataV4_YearMonthDuration (private)
+ (nonnull SODataV4_YearMonthDuration*) new;
+ (nonnull SODataV4_YearMonthDuration*) _new1 :(SODataV4_int)p1 :(SODataV4_int)p2 :(SODataV4_byte)p3;
@end
#endif
#endif

#ifndef imported_SODataV4__AggregateExpressionList_public
#define imported_SODataV4__AggregateExpressionList_public
/// @brief A list of item type `SODataV4_AggregateExpression`.
///
///
@interface SODataV4_AggregateExpressionList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AggregateExpressionList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AggregateExpressionList*) new;
/// @brief Construct a new list with `SODataV4_AggregateExpressionList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AggregateExpressionList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AggregateExpression*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AggregateExpressionList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AggregateExpressionList*) addThis :(nonnull SODataV4_AggregateExpression*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AggregateExpressionList*) copy;
/// @brief An immutable empty `SODataV4_AggregateExpressionList`.
///
///
+ (nonnull SODataV4_AggregateExpressionList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AggregateExpression*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateExpressionList`.`length` - 1).
- (nonnull SODataV4_AggregateExpression*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateExpressionList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateExpression`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AggregateExpression*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AggregateExpression*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateExpressionList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateExpression`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AggregateExpression*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateExpressionList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AggregateExpressionList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateExpressionList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AggregateExpression*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AggregateExpression*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AggregateExpression*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateExpressionList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateExpression`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AggregateExpression*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AggregateExpression*)item;
/// @brief Return a new `SODataV4_AggregateExpressionList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AggregateExpression` will be removed.
///
/// @return A new list of item type `SODataV4_AggregateExpression`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AggregateExpressionList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AggregateExpression*) single;
/// @internal
///
- (nonnull SODataV4_AggregateExpressionList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AggregateExpressionList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AggregateExpressionList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateExpressionList* empty;
@end
#endif

#ifndef imported_SODataV4__AggregateFromList_public
#define imported_SODataV4__AggregateFromList_public
/// @brief A list of "aggregate from" transformation items.
///
///
@interface SODataV4_AggregateFromList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AggregateFromList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AggregateFromList*) new;
/// @brief Construct a new list with `SODataV4_AggregateFromList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AggregateFromList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AggregateFrom*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AggregateFromList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AggregateFromList*) addThis :(nonnull SODataV4_AggregateFrom*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AggregateFromList*) copy;
/// @brief An immutable empty `SODataV4_AggregateFromList`.
///
///
+ (nonnull SODataV4_AggregateFromList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AggregateFrom*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateFromList`.`length` - 1).
- (nonnull SODataV4_AggregateFrom*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateFromList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateFrom`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AggregateFrom*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AggregateFrom*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateFromList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateFrom`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AggregateFrom*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateFromList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AggregateFromList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateFromList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AggregateFrom*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AggregateFrom*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AggregateFrom*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateFromList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateFrom`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AggregateFrom*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AggregateFrom*)item;
/// @brief Return a new `SODataV4_AggregateFromList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AggregateFrom` will be removed.
///
/// @return A new list of item type `SODataV4_AggregateFrom`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AggregateFromList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AggregateFrom*) single;
/// @internal
///
- (nonnull SODataV4_AggregateFromList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AggregateFromList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AggregateFromList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateFromList* empty;
@end
#endif

#ifndef imported_SODataV4__AggregateValueList_public
#define imported_SODataV4__AggregateValueList_public
/// @brief A list of aggregate transformation items.
///
///
@interface SODataV4_AggregateValueList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AggregateValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AggregateValueList*) new;
/// @brief Construct a new list with `SODataV4_AggregateValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AggregateValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AggregateValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AggregateValueList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AggregateValueList*) addThis :(nonnull SODataV4_AggregateValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AggregateValueList*) copy;
/// @brief An immutable empty `SODataV4_AggregateValueList`.
///
///
+ (nonnull SODataV4_AggregateValueList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AggregateValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateValueList`.`length` - 1).
- (nonnull SODataV4_AggregateValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AggregateValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AggregateValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AggregateValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AggregateValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AggregateValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AggregateValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AggregateValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AggregateValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AggregateValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AggregateValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AggregateValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AggregateValue*)item;
/// @brief Return a new `SODataV4_AggregateValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AggregateValue` will be removed.
///
/// @return A new list of item type `SODataV4_AggregateValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AggregateValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AggregateValue*) single;
/// @internal
///
- (nonnull SODataV4_AggregateValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AggregateValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AggregateValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AggregateValueList* empty;
@end
#endif

#ifndef imported_SODataV4__AnnotationList_public
#define imported_SODataV4__AnnotationList_public
/// @internal
///
@interface SODataV4_AnnotationList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AnnotationList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AnnotationList*) new;
/// @brief Construct a new list with `SODataV4_AnnotationList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnnotationList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_Annotation*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AnnotationList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AnnotationList*) addThis :(nonnull SODataV4_Annotation*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AnnotationList*) copy;
/// @brief An immutable empty `SODataV4_AnnotationList`.
///
///
+ (nonnull SODataV4_AnnotationList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_Annotation*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationList`.`length` - 1).
- (nonnull SODataV4_Annotation*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Annotation`.
- (SODataV4_boolean) includes :(nonnull SODataV4_Annotation*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_Annotation*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Annotation`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_Annotation*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AnnotationList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_Annotation*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_Annotation*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_Annotation*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Annotation`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_Annotation*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_Annotation*)item;
/// @brief Return a new `SODataV4_AnnotationList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_Annotation` will be removed.
///
/// @return A new list of item type `SODataV4_Annotation`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AnnotationList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_Annotation*) single;
/// @internal
///
- (nonnull SODataV4_AnnotationList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AnnotationList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_AnnotationList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationList* empty;
@end
#endif

#ifndef imported_SODataV4__AnnotationMap_EntryList_public
#define imported_SODataV4__AnnotationMap_EntryList_public
/// @brief A list of item type `SODataV4_AnnotationMap_Entry`.
///
///
@interface SODataV4_AnnotationMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AnnotationMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AnnotationMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_AnnotationMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnnotationMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AnnotationMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AnnotationMap_EntryList*) addThis :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AnnotationMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_AnnotationMap_EntryList`.
///
///
+ (nonnull SODataV4_AnnotationMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnnotationMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationMap_EntryList`.`length` - 1).
- (nonnull SODataV4_AnnotationMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AnnotationMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AnnotationMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnnotationMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnnotationMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AnnotationMap_Entry*)item;
/// @brief Return a new `SODataV4_AnnotationMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AnnotationMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_AnnotationMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AnnotationMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AnnotationMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_AnnotationMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AnnotationMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AnnotationMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__AnnotationTermList_public
#define imported_SODataV4__AnnotationTermList_public
/// @internal
///
@interface SODataV4_AnnotationTermList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AnnotationTermList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AnnotationTermList*) new;
/// @brief Construct a new list with `SODataV4_AnnotationTermList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnnotationTermList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AnnotationTerm*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AnnotationTermList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AnnotationTermList*) addThis :(nonnull SODataV4_AnnotationTerm*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AnnotationTermList*) copy;
/// @brief An immutable empty `SODataV4_AnnotationTermList`.
///
///
+ (nonnull SODataV4_AnnotationTermList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnnotationTerm*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationTermList`.`length` - 1).
- (nonnull SODataV4_AnnotationTerm*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationTermList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationTerm`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AnnotationTerm*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AnnotationTerm*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationTermList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationTerm`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AnnotationTerm*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationTermList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AnnotationTermList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationTermList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AnnotationTerm*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnnotationTerm*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnnotationTerm*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationTermList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationTerm`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnnotationTerm*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AnnotationTerm*)item;
/// @brief Return a new `SODataV4_AnnotationTermList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AnnotationTerm` will be removed.
///
/// @return A new list of item type `SODataV4_AnnotationTerm`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AnnotationTermList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AnnotationTerm*) single;
/// @internal
///
- (nonnull SODataV4_AnnotationTermList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AnnotationTermList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AnnotationTermList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationTermList* empty;
@end
#endif

#ifndef imported_SODataV4__AnnotationTermMap_EntryList_public
#define imported_SODataV4__AnnotationTermMap_EntryList_public
/// @brief A list of item type `SODataV4_AnnotationTermMap_Entry`.
///
///
@interface SODataV4_AnnotationTermMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AnnotationTermMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AnnotationTermMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_AnnotationTermMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnnotationTermMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AnnotationTermMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AnnotationTermMap_EntryList*) addThis :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AnnotationTermMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_AnnotationTermMap_EntryList`.
///
///
+ (nonnull SODataV4_AnnotationTermMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnnotationTermMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationTermMap_EntryList`.`length` - 1).
- (nonnull SODataV4_AnnotationTermMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationTermMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationTermMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationTermMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationTermMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AnnotationTermMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationTermMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AnnotationTermMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnnotationTermMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnnotationTermMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnnotationTermMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnnotationTermMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnnotationTermMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AnnotationTermMap_Entry*)item;
/// @brief Return a new `SODataV4_AnnotationTermMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AnnotationTermMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_AnnotationTermMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AnnotationTermMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AnnotationTermMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_AnnotationTermMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AnnotationTermMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AnnotationTermMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnnotationTermMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__AnyList_public
#define imported_SODataV4__AnyList_public
/// @internal
///
@interface SODataV4_AnyList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AnyList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AnyList*) new;
/// @brief Construct a new list with `SODataV4_AnyList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnyList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nullable NSObject*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AnyList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AnyList*) addThis :(nullable NSObject*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AnyList*) copy;
/// @brief An immutable empty `SODataV4_AnyList`.
///
///
+ (nonnull SODataV4_AnyList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable NSObject*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnyList`.`length` - 1).
- (nullable NSObject*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnyList`.`equality` property, which would usually be expected to match the `==` operator for item type `object?`.
- (SODataV4_boolean) includes :(nullable NSObject*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nullable NSObject*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnyList`.`equality` property, which would usually be expected to match the `==` operator for item type `object?`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nullable NSObject*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnyList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AnyList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnyList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nullable NSObject*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable NSObject*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nullable NSObject*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnyList`.`equality` property, which would usually be expected to match the `==` operator for item type `object?`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nullable NSObject*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nullable NSObject*)item;
/// @brief Return a new `SODataV4_AnyList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `object?` will be removed.
///
/// @return A new list of item type `object?`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AnyList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nullable NSObject*) single;
/// @internal
///
- (nonnull SODataV4_AnyList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AnyList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AnyList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnyList* empty;
@end
#endif

#ifndef imported_SODataV4__AnyMap_EntryList_public
#define imported_SODataV4__AnyMap_EntryList_public
/// @brief A list of item type `SODataV4_AnyMap_Entry`.
///
///
@interface SODataV4_AnyMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_AnyMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_AnyMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_AnyMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_AnyMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_AnyMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_AnyMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_AnyMap_EntryList*) addThis :(nonnull SODataV4_AnyMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_AnyMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_AnyMap_EntryList`.
///
///
+ (nonnull SODataV4_AnyMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnyMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnyMap_EntryList`.`length` - 1).
- (nonnull SODataV4_AnyMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnyMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnyMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_AnyMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_AnyMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnyMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnyMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_AnyMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnyMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_AnyMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_AnyMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_AnyMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_AnyMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnyMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_AnyMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_AnyMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_AnyMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_AnyMap_Entry*)item;
/// @brief Return a new `SODataV4_AnyMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_AnyMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_AnyMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_AnyMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_AnyMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_AnyMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_AnyMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_AnyMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_AnyMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__BinaryList_public
#define imported_SODataV4__BinaryList_public
/// @internal
///
@interface SODataV4_BinaryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_BinaryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_BinaryList*) new;
/// @brief Construct a new list with `SODataV4_BinaryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_BinaryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull NSData*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_BinaryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_BinaryList*) addThis :(nonnull NSData*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_BinaryList*) copy;
/// @brief An immutable empty `SODataV4_BinaryList`.
///
///
+ (nonnull SODataV4_BinaryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull NSData*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_BinaryList`.`length` - 1).
- (nonnull NSData*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_BinaryList`.`equality` property, which would usually be expected to match the `==` operator for item type `binary`.
- (SODataV4_boolean) includes :(nonnull NSData*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull NSData*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_BinaryList`.`equality` property, which would usually be expected to match the `==` operator for item type `binary`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull NSData*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_BinaryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_BinaryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_BinaryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull NSData*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull NSData*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull NSData*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_BinaryList`.`equality` property, which would usually be expected to match the `==` operator for item type `binary`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull NSData*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull NSData*)item;
/// @brief Return a new `SODataV4_BinaryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `binary` will be removed.
///
/// @return A new list of item type `binary`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_BinaryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull NSData*) single;
/// @internal
///
- (nonnull SODataV4_BinaryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_BinaryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @internal
///
+ (nonnull SODataV4_BinaryList*) split :(nonnull NSData*)value :(nonnull NSData*)separator;
/// @brief Split a binary value into a list of binary values, divided by the specified separator.
///
///
/// @return Binary list.
/// @param value The binary value to be split.
/// @param separator The separator value.
/// @param limit (optional) separator Maximum number of binary values to return. The separator can appear (possibly multiple times) in the final binary value.
+ (nonnull SODataV4_BinaryList*) split :(nonnull NSData*)value :(nonnull NSData*)separator :(SODataV4_int)limit;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_BinaryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_BinaryList* empty;
@end
#endif

#ifndef imported_SODataV4__BooleanList_public
#define imported_SODataV4__BooleanList_public
/// @internal
///
@interface SODataV4_BooleanList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_BooleanList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_BooleanList*) new;
/// @brief Construct a new list with `SODataV4_BooleanList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_BooleanList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_boolean)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_BooleanList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_BooleanList*) addThis :(SODataV4_boolean)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_BooleanList*) copy;
/// @brief An immutable empty `SODataV4_BooleanList`.
///
///
+ (nonnull SODataV4_BooleanList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_boolean) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_BooleanList`.`length` - 1).
- (SODataV4_boolean) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_BooleanList`.`equality` property, which would usually be expected to match the `==` operator for item type `boolean`.
- (SODataV4_boolean) includes :(SODataV4_boolean)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_boolean)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_BooleanList`.`equality` property, which would usually be expected to match the `==` operator for item type `boolean`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_boolean)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_BooleanList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_BooleanList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_BooleanList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_boolean)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_boolean) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_boolean)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_BooleanList`.`equality` property, which would usually be expected to match the `==` operator for item type `boolean`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_boolean)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_boolean)item;
/// @brief Return a new `SODataV4_BooleanList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `boolean` will be removed.
///
/// @return A new list of item type `boolean`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_BooleanList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_boolean) single;
/// @internal
///
- (nonnull SODataV4_BooleanList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_BooleanList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_BooleanList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_BooleanList* empty;
@end
#endif

#ifndef imported_SODataV4__ByteList_public
#define imported_SODataV4__ByteList_public
/// @internal
///
@interface SODataV4_ByteList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ByteList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ByteList*) new;
/// @brief Construct a new list with `SODataV4_ByteList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ByteList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_byte)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ByteList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ByteList*) addThis :(SODataV4_byte)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ByteList*) copy;
/// @brief An immutable empty `SODataV4_ByteList`.
///
///
+ (nonnull SODataV4_ByteList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_byte) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ByteList`.`length` - 1).
- (SODataV4_byte) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ByteList`.`equality` property, which would usually be expected to match the `==` operator for item type `byte`.
- (SODataV4_boolean) includes :(SODataV4_byte)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_byte)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ByteList`.`equality` property, which would usually be expected to match the `==` operator for item type `byte`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_byte)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ByteList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ByteList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ByteList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_byte)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_byte) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_byte)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ByteList`.`equality` property, which would usually be expected to match the `==` operator for item type `byte`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_byte)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_byte)item;
/// @brief Return a new `SODataV4_ByteList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `byte` will be removed.
///
/// @return A new list of item type `byte`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ByteList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_byte) single;
/// @internal
///
- (nonnull SODataV4_ByteList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ByteList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_ByteList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ByteList* empty;
@end
#endif

#ifndef imported_SODataV4__ByteStream_public
#define imported_SODataV4__ByteStream_public
/// @brief Abstract base class for `byte` streams.
///
///
@interface SODataV4_ByteStream : SODataV4_StreamBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ByteStream*) new;
/// @internal
///
- (void) _init;
/// @brief Assuming this stream is a UTF-8 byte stream, map it to a character stream (of UTF-16 code units).
///
///
/// @return New character stream, which reads from this UTF-8 byte stream and converts to UTF-16 code units.
- (nonnull SODataV4_CharStream*) asText;
/// @brief Does this stream support `SODataV4_ByteStream`.`undoRead`?
///
///
/// @see `SODataV4_ByteStream`.`withUndo`.
- (SODataV4_boolean) canUndo;
/// @internal
///
- (void) copyTo :(nonnull SODataV4_ByteStream*)target;
/// @brief Copy all remaining data until the end of this stream into a target stream, then close this stream.
///
/// Also propagate the `SODataV4_ByteStream`.`entityTag` and `SODataV4_ByteStream`.`mediaType` of this stream into the target stream.
///
/// @param target Output stream.
/// @param closeTarget (optional) Close target stream? (defaults to `true`)
- (void) copyTo :(nonnull SODataV4_ByteStream*)target :(SODataV4_boolean)closeTarget;
/// @brief Copy all remaining data until the end of the stream into a file, then close this stream.
///
///
/// @param file Output file name.
- (void) copyToFile :(nonnull NSString*)file;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.BYTE_STREAM.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Immutable empty byte stream, for which `SODataV4_ByteStream`.`readByte` will always return `-1`.
///
///
+ (nonnull SODataV4_ByteStream*) empty;
/// @return A stream that will write the contents of a data file.
/// @param file Output file name.
+ (nonnull SODataV4_ByteStream*) fileWriter :(nonnull NSString*)file;
/// @internal
///
+ (nonnull SODataV4_ByteStream*) fromBinary :(nonnull NSData*)data;
/// @internal
///
+ (nonnull SODataV4_ByteStream*) fromBinary :(nonnull NSData*)data :(SODataV4_int)offset;
/// @return A new stream for reading from a binary value.
/// @param data Source data.
/// @param offset (optional) Starting offset (zero-based).
/// @param length (optional) Maximum number of bytes to read.
+ (nonnull SODataV4_ByteStream*) fromBinary :(nonnull NSData*)data :(SODataV4_int)offset :(SODataV4_int)length;
/// @return A stream that will read the contents of a data file.
/// @param file Input file name.
+ (nonnull SODataV4_ByteStream*) fromFile :(nonnull NSString*)file;
/// @return `stream` (if `stream` is a ByteStream) or `ByteStream.fromText(stream)` (if `stream` is a CharStream).
/// @param stream Underlying stream.
+ (nonnull SODataV4_ByteStream*) fromStream :(nonnull SODataV4_StreamBase*)stream;
/// @return A new UTF-8 byte stream which reads from an underlying UTF-16 character stream.
/// @param stream Underlying character stream.
+ (nonnull SODataV4_ByteStream*) fromText :(nonnull SODataV4_CharStream*)stream;
/// @brief Read all remaining data until the end of the stream, then close this stream.
///
/// *Caution*: this function loads all stream content into memory at once. Consider reading a chunk-at-a-time in a loop, using `SODataV4_ByteStream`.`readBinary`.
///
/// @return The remaining data.
- (nonnull NSData*) readAndClose;
/// @internal
///
- (nullable NSData*) readBinary;
/// @brief Read up to `length` bytes from this stream (may read less, even if the end of stream is not reached).
///
///
/// @return Binary value with at most `length` bytes, or `nil` if there is no remaining data in the stream.
/// @param length (optional) Maximum number of bytes to read (must be greater than zero). Defaults to 20,000.
- (nullable NSData*) readBinary :(SODataV4_int)length;
/// @brief Read a single byte from this stream.
///
///
/// @return Unsigned integer equivalent of the byte read, or `-1` at end of stream.
- (SODataV4_int) readByte;
/// @return A new byte stream which writes to a provided buffer.
/// @param buffer Buffer to be written to.
+ (nonnull SODataV4_ByteStream*) toBuffer :(nonnull SODataV4_ByteBuffer*)buffer;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_ByteStream`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Undo read of one byte.
///
///
/// @throw `SODataV4_DataStreamException` if undo is not supported by this stream.
/// @param value Byte value that was previously read by the caller and is to be made available to read again.
- (void) undoRead :(SODataV4_byte)value;
/// @return A wrapper (if needed) of this stream supporting `SODataV4_ByteStream`.`undoRead`, or this stream if it already supports undoRead.
/// @see `SODataV4_ByteStream`.`canUndo`.
- (nonnull SODataV4_ByteStream*) withUndo;
/// @brief Write to this stream the portion of `data` from the specified `offset` with the specified `length`.
///
///
/// @param data Source data.
- (void) writeBinary :(nonnull NSData*)data;
/// @brief Write a single byte to this stream.
///
///
/// @param value Byte value to be written.
- (void) writeByte :(SODataV4_byte)value;
/// @brief Does this stream support `SODataV4_ByteStream`.`undoRead`?
///
///
/// @see `SODataV4_ByteStream`.`withUndo`.
@property (nonatomic, readonly) SODataV4_boolean canUndo;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.BYTE_STREAM.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Immutable empty byte stream, for which `SODataV4_ByteStream`.`readByte` will always return `-1`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ByteStream* empty;
@end
#endif

#ifdef import_SODataV4__ByteStream_private
#ifndef imported_SODataV4__ByteStream_private
#define imported_SODataV4__ByteStream_private
@interface SODataV4_ByteStream (private)
#define SODataV4_ByteStream_CHUNK_SIZE 20000
@end
#endif
#endif

#ifdef import_SODataV4__CancellationListenerList_internal
#ifndef imported_SODataV4__CancellationListenerList_internal
#define imported_SODataV4__CancellationListenerList_public
/* internal */
/// @brief A list of item type `SODataV4_CancellationListener`.
///
///
@interface SODataV4_CancellationListenerList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_CancellationListenerList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_CancellationListenerList*) new;
/// @brief Construct a new list with `SODataV4_CancellationListenerList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_CancellationListenerList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_CancellationListener*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_CancellationListenerList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_CancellationListenerList*) addThis :(nonnull SODataV4_CancellationListener*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_CancellationListenerList*) copy;
/// @brief An immutable empty `SODataV4_CancellationListenerList`.
///
///
+ (nonnull SODataV4_CancellationListenerList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_CancellationListener*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CancellationListenerList`.`length` - 1).
- (nonnull SODataV4_CancellationListener*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_CancellationListenerList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_CancellationListener`.
- (SODataV4_boolean) includes :(nonnull SODataV4_CancellationListener*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_CancellationListener*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_CancellationListenerList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_CancellationListener`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_CancellationListener*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CancellationListenerList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_CancellationListenerList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CancellationListenerList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_CancellationListener*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_CancellationListener*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_CancellationListener*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_CancellationListenerList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_CancellationListener`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_CancellationListener*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_CancellationListener*)item;
/// @brief Return a new `SODataV4_CancellationListenerList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_CancellationListener` will be removed.
///
/// @return A new list of item type `SODataV4_CancellationListener`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_CancellationListenerList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_CancellationListener*) single;
/// @internal
///
- (nonnull SODataV4_CancellationListenerList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_CancellationListenerList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_CancellationListenerList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_CancellationListenerList* empty;
@end
#endif
#endif

#ifndef imported_SODataV4__ChangedLinkList_public
#define imported_SODataV4__ChangedLinkList_public
/// @internal
///
@interface SODataV4_ChangedLinkList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ChangedLinkList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ChangedLinkList*) new;
/// @brief Construct a new list with `SODataV4_ChangedLinkList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ChangedLinkList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ChangedLink*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ChangedLinkList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ChangedLinkList*) addThis :(nonnull SODataV4_ChangedLink*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ChangedLinkList*) copy;
/// @brief An immutable empty `SODataV4_ChangedLinkList`.
///
///
+ (nonnull SODataV4_ChangedLinkList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ChangedLink*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ChangedLinkList`.`length` - 1).
- (nonnull SODataV4_ChangedLink*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ChangedLinkList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ChangedLink`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ChangedLink*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ChangedLink*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ChangedLinkList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ChangedLink`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ChangedLink*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ChangedLinkList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ChangedLinkList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ChangedLinkList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ChangedLink*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ChangedLink*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ChangedLink*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ChangedLinkList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ChangedLink`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ChangedLink*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ChangedLink*)item;
/// @brief Return a new `SODataV4_ChangedLinkList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ChangedLink` will be removed.
///
/// @return A new list of item type `SODataV4_ChangedLink`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ChangedLinkList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ChangedLink*) single;
/// @internal
///
- (nonnull SODataV4_ChangedLinkList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ChangedLinkList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ChangedLinkList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ChangedLinkList* empty;
@end
#endif

#ifndef imported_SODataV4__CharList_public
#define imported_SODataV4__CharList_public
/// @internal
///
@interface SODataV4_CharList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_CharList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_CharList*) new;
/// @brief Construct a new list with `SODataV4_CharList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_CharList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_char)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_CharList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_CharList*) addThis :(SODataV4_char)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_CharList*) copy;
/// @brief An immutable empty `SODataV4_CharList`.
///
///
+ (nonnull SODataV4_CharList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_char) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CharList`.`length` - 1).
- (SODataV4_char) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_CharList`.`equality` property, which would usually be expected to match the `==` operator for item type `char`.
- (SODataV4_boolean) includes :(SODataV4_char)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_char)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_CharList`.`equality` property, which would usually be expected to match the `==` operator for item type `char`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_char)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CharList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_CharList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CharList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_char)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_char) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_char)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_CharList`.`equality` property, which would usually be expected to match the `==` operator for item type `char`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_char)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_char)item;
/// @brief Return a new `SODataV4_CharList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `char` will be removed.
///
/// @return A new list of item type `char`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_CharList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_char) single;
/// @internal
///
- (nonnull SODataV4_CharList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_CharList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_CharList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_CharList* empty;
@end
#endif

#ifndef imported_SODataV4__CharStream_public
#define imported_SODataV4__CharStream_public
/// @brief Abstract base class for `char` streams, using UTF-16 code units.
///
///
@interface SODataV4_CharStream : SODataV4_StreamBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_CharStream*) new;
/// @internal
///
- (void) _init;
/// @brief Does this stream support `SODataV4_CharStream`.`undoRead`?
///
///
/// @see `SODataV4_CharStream`.`withUndo`.
- (SODataV4_boolean) canUndo;
/// @internal
///
- (void) copyTo :(nonnull SODataV4_CharStream*)target;
/// @brief Copy all remaining text until the end of this stream into a target stream, then close this stream.
///
/// Also propagate the `SODataV4_CharStream`.`entityTag` and `SODataV4_CharStream`.`mediaType` of this stream into the target stream.
///
/// @param target Output stream.
/// @param closeTarget (optional) Close target stream? (defaults to `true`)
- (void) copyTo :(nonnull SODataV4_CharStream*)target :(SODataV4_boolean)closeTarget;
/// @brief Copy all remaining text until the end of this stream into a file, then close this stream.
///
///
/// @param file Output file name.
- (void) copyToFile :(nonnull NSString*)file;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.CHAR_STREAM.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Immutable empty char stream, for which `SODataV4_CharStream`.`readChar` will always return `-1`.
///
///
+ (nonnull SODataV4_CharStream*) empty;
/// @return A stream that will write the contents of a text file.
/// @param file Output file name.
+ (nonnull SODataV4_CharStream*) fileWriter :(nonnull NSString*)file;
/// @return A stream that will read the contents of a text file.
/// @param file Input file name.
+ (nonnull SODataV4_CharStream*) fromFile :(nonnull NSString*)file;
/// @internal
///
+ (nonnull SODataV4_CharStream*) fromString :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_CharStream*) fromString :(nonnull NSString*)text :(SODataV4_int)offset;
/// @return A new stream for reading from a string value.
/// @param text Source text.
/// @param offset (optional) Starting offset (zero-based).
/// @param length (optional) Maximum number of characters to read.
+ (nonnull SODataV4_CharStream*) fromString :(nonnull NSString*)text :(SODataV4_int)offset :(SODataV4_int)length;
/// @brief Read all remaining text until the end of this stream, then close this stream.
///
/// *Caution*: this function loads all stream content into memory at once. Consider reading a chunk-at-a-time in a loop, using `SODataV4_CharStream`.`readString`.
///
/// @return The remaining text.
- (nonnull NSString*) readAndClose;
/// @brief Read a single character (UTF-16 code unit) from this stream.
///
///
/// @return Unsigned integer equivalent of the character read (a UTF-16 code unit), or `-1` at end of stream.
- (SODataV4_int) readChar;
/// @brief Read a line of text content from the stream.
///
///
/// @return Text content, or `nil` at end of stream.
- (nullable NSString*) readLine;
/// @internal
///
- (nullable NSString*) readString;
/// @brief Read up to `length` characters from this stream (may read less, even if the end of stream is not reached).
///
///
/// @return String value with at most `length` characters, or `nil` if there is no remaining text in the stream.
/// @param length (optional) Maximum number of characters to read (must be greater than zero). Defaults to 20,000.
- (nullable NSString*) readString :(SODataV4_int)length;
/// @return A new byte stream which writes to a provided buffer.
/// @param buffer Buffer to be written to.
+ (nonnull SODataV4_CharStream*) toBuffer :(nonnull SODataV4_CharBuffer*)buffer;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_CharStream`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Undo read of one character.
///
///
/// @throw `SODataV4_DataStreamException` if undo is not supported by this stream.
/// @param value Character value that was previously read by the caller and is to be made available to read again.
- (void) undoRead :(SODataV4_char)value;
/// @return A wrapper (if needed) of this stream supporting `SODataV4_CharStream`.`undoRead`, or this stream if it already supports undoRead.
/// @see `SODataV4_CharStream`.`canUndo`.
- (nonnull SODataV4_CharStream*) withUndo;
/// @brief Write a single character to this stream.
///
///
/// @param value Character value to be written.
- (void) writeChar :(SODataV4_char)value;
/// @brief Write line content to the stream, followed by a newline character.
///
///
/// @param text Line content.
- (void) writeLine :(nonnull NSString*)text;
/// @brief Write to this stream the portion of `text` from the specified `offset` with the specified `length`.
///
///
/// @param text Source text.
- (void) writeString :(nonnull NSString*)text;
/// @brief Does this stream support `SODataV4_CharStream`.`undoRead`?
///
///
/// @see `SODataV4_CharStream`.`withUndo`.
@property (nonatomic, readonly) SODataV4_boolean canUndo;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.CHAR_STREAM.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Immutable empty char stream, for which `SODataV4_CharStream`.`readChar` will always return `-1`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_CharStream* empty;
@end
#endif

#ifdef import_SODataV4__CharStream_private
#ifndef imported_SODataV4__CharStream_private
#define imported_SODataV4__CharStream_private
@interface SODataV4_CharStream (private)
#define SODataV4_CharStream_CHUNK_SIZE 20000
@end
#endif
#endif

#ifndef imported_SODataV4__ComplexType_public
#define imported_SODataV4__ComplexType_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) complex type.
///
///
@interface SODataV4_ComplexType : SODataV4_StructureType
{
    @private SODataV4_ComplexTypeList* _Nullable subtypes_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_ComplexType*) new;
/// @internal
///
- (void) _init;
/// @brief The abstract base type Edm.ComplexType.
///
///
+ (nonnull SODataV4_ComplexType*) abstractBase;
/// @brief DataType.COMPLEX_VALUE
///
///
- (SODataV4_int) code;
/// @brief `true` if this complex type is a parent of one or more derived complex types.
///
///
- (SODataV4_boolean) hasSubtypes;
/// @brief `true` if this complex type is a subtype of a parent complex type.
///
///
- (SODataV4_boolean) hasSupertype;
/// @brief Set the `SODataV4_ComplexType`.`objectFactory` for this complex type.
///
///
/// @param factory Custom factory to produce `SODataV4_ComplexValue` instances of this type.
- (void) registerFactory :(nonnull SODataV4_ObjectFactory*)factory;
/// @brief If `SODataV4_ComplexType`.`hasSubtypes` is `true`, then the list of subtypes. Otherwise `nil`.
///
///
- (void) setSubtypes :(nullable SODataV4_ComplexTypeList*)value;
/// @brief If `SODataV4_ComplexType`.`hasSupertype` is `true`, then the parent complex type. Otherwise `nil`.
///
///
- (void) setSupertype :(nullable SODataV4_ComplexType*)value;
/// @brief If `SODataV4_ComplexType`.`hasSubtypes` is `true`, then the list of subtypes. Otherwise `nil`.
///
///
- (nullable SODataV4_ComplexTypeList*) subtypes;
/// @brief If `SODataV4_ComplexType`.`hasSupertype` is `true`, then the parent complex type. Otherwise `nil`.
///
///
- (nullable SODataV4_ComplexType*) supertype;
/// @return The name of this data type.
///
- (nonnull NSString*) toString;
/// @brief Represents an undefined complex type.
///
///
+ (nonnull SODataV4_ComplexType*) undefined;
/// @brief Set the `SODataV4_ComplexType`.`objectFactory` for this complex type.
///
///
/// @return This complex type.
/// @param factory Custom factory to produce `SODataV4_ComplexValue` instances of this type.
- (nonnull SODataV4_ComplexType*) withFactory :(nonnull SODataV4_ObjectFactory*)factory;
/// @brief The abstract base type Edm.ComplexType.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexType* abstractBase;
/// @brief DataType.COMPLEX_VALUE
///
///
@property (nonatomic, readonly) SODataV4_int code;
/// @brief `true` if this complex type is a parent of one or more derived complex types.
///
///
@property (nonatomic, readonly) SODataV4_boolean hasSubtypes;
/// @brief `true` if this complex type is a subtype of a parent complex type.
///
///
@property (nonatomic, readonly) SODataV4_boolean hasSupertype;
/// @brief If `SODataV4_ComplexType`.`hasSubtypes` is `true`, then the list of subtypes. Otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_ComplexTypeList* subtypes;
/// @brief If `SODataV4_ComplexType`.`hasSupertype` is `true`, then the parent complex type. Otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_ComplexType* supertype;
/// @brief Represents an undefined complex type.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexType* undefined;
@end
#endif

#ifdef import_SODataV4__ComplexType_private
#ifndef imported_SODataV4__ComplexType_private
#define imported_SODataV4__ComplexType_private
@interface SODataV4_ComplexType (private)
+ (nonnull SODataV4_ComplexType*) _new1 :(nonnull NSString*)p1 :(nonnull SODataV4_PropertyList*)p2 :(nonnull NSString*)p3 :(nonnull SODataV4_PropertyList*)p4 :(nonnull SODataV4_PropertyList*)p5 :(nonnull SODataV4_PropertyList*)p6 :(nonnull SODataV4_PropertyList*)p7 :(nonnull SODataV4_PropertyMap*)p8;
+ (nonnull SODataV4_ComplexType*) _new2 :(nonnull NSString*)p1 :(nonnull SODataV4_PropertyList*)p2 :(nonnull NSString*)p3 :(nonnull SODataV4_PropertyList*)p4 :(nonnull SODataV4_PropertyList*)p5 :(nonnull SODataV4_PropertyList*)p6 :(nonnull SODataV4_PropertyList*)p7 :(nonnull SODataV4_PropertyMap*)p8 :(SODataV4_boolean)p9;
@end
#endif
#endif

#ifndef imported_SODataV4__ComplexTypeList_public
#define imported_SODataV4__ComplexTypeList_public
/// @internal
///
@interface SODataV4_ComplexTypeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ComplexTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ComplexTypeList*) new;
/// @brief Construct a new list with `SODataV4_ComplexTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexTypeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ComplexType*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ComplexTypeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ComplexTypeList*) addThis :(nonnull SODataV4_ComplexType*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ComplexTypeList*) copy;
/// @brief An immutable empty `SODataV4_ComplexTypeList`.
///
///
+ (nonnull SODataV4_ComplexTypeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexType*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexTypeList`.`length` - 1).
- (nonnull SODataV4_ComplexType*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexType`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ComplexType*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexType*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexType`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexType*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexTypeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ComplexTypeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexTypeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ComplexType*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexType*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexType*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexType`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexType*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ComplexType*)item;
/// @brief Return a new `SODataV4_ComplexTypeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ComplexType` will be removed.
///
/// @return A new list of item type `SODataV4_ComplexType`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ComplexTypeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ComplexType*) single;
/// @internal
///
- (nonnull SODataV4_ComplexTypeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ComplexTypeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_ComplexTypeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexTypeList* empty;
@end
#endif

#ifndef imported_SODataV4__ComplexTypeMap_EntryList_public
#define imported_SODataV4__ComplexTypeMap_EntryList_public
/// @brief A list of item type `SODataV4_ComplexTypeMap_Entry`.
///
///
@interface SODataV4_ComplexTypeMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ComplexTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ComplexTypeMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_ComplexTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexTypeMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ComplexTypeMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ComplexTypeMap_EntryList*) addThis :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ComplexTypeMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_ComplexTypeMap_EntryList`.
///
///
+ (nonnull SODataV4_ComplexTypeMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexTypeMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexTypeMap_EntryList`.`length` - 1).
- (nonnull SODataV4_ComplexTypeMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexTypeMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexTypeMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ComplexTypeMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexTypeMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexTypeMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ComplexTypeMap_Entry*)item;
/// @brief Return a new `SODataV4_ComplexTypeMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ComplexTypeMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_ComplexTypeMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ComplexTypeMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ComplexTypeMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_ComplexTypeMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ComplexTypeMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ComplexTypeMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexTypeMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__ComplexValue_public
#define imported_SODataV4__ComplexValue_public
/// @brief Encapsulates an [OData](http://odata.org) complex value.
///
///
@interface SODataV4_ComplexValue : SODataV4_StructureBase
{
    @private SODataV4_ComplexType* _Nonnull _type_;
    @private SODataV4_ComplexValue* _Nullable oldComplex_;
}
- (nonnull id) init;
/// @brief Construct a new complex value.
///
/// This constructor is intended for use by custom complex value subclasses.
/// Use `SODataV4_ComplexValue`.`ofType` for regular construction.
+ (nonnull SODataV4_ComplexValue*) new;
/// @brief Construct a new complex value.
///
/// This constructor is intended for use by custom complex value subclasses.
/// Use `SODataV4_ComplexValue`.`ofType` for regular construction.
///
/// @param withDefaults (optional) Should `SODataV4_ComplexValue`.`setDefaultValues` be called to initialize properties with default values?
+ (nonnull SODataV4_ComplexValue*) new :(SODataV4_boolean)withDefaults;
/// @brief Construct a new complex value.
///
/// This constructor is intended for use by custom complex value subclasses.
/// Use `SODataV4_ComplexValue`.`ofType` for regular construction.
///
/// @param type (optional) Complex type. Should not be `nil` except when called by generated proxy base classes.
/// @param withDefaults (optional) Should `SODataV4_ComplexValue`.`setDefaultValues` be called to initialize properties with default values?
+ (nonnull SODataV4_ComplexValue*) new :(SODataV4_boolean)withDefaults :(nullable SODataV4_ComplexType*)type;
/// @internal
///
- (void) _init :(SODataV4_boolean)withDefaults :(nullable SODataV4_ComplexType*)type;
/// @internal
///
+ (nullable SODataV4_ComplexValue*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_ComplexValue*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The complex type metadata for this value (`SODataV4_ComplexValue`.`dataType` cast to `ComplexType`).
///
///
- (nonnull SODataV4_ComplexType*) complexType;
/// @return A copy of this complex value (only structural properties are copied).
///
- (nonnull SODataV4_ComplexValue*) copyComplex;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.COMPLEX_VALUE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @return `true` if two complex values have equal structural properties.
/// @param a First complex value.
/// @param b Second complex value.
+ (SODataV4_boolean) equal :(nullable SODataV4_ComplexValue*)a :(nullable SODataV4_ComplexValue*)b;
/// @brief Construct a new complex value of the specified type.
///
///
/// @return A new complex value.
/// @param type Complex type for the new value.
+ (nonnull SODataV4_ComplexValue*) ofType :(nonnull SODataV4_ComplexType*)type;
/// @brief Contains the original values for all structural properties of this complex value.
///
/// Used by `DataService.updateEntity` to determine the changed properties for PATCH requests.
- (nullable SODataV4_ComplexValue*) oldComplex;
/// @brief Contains the original values for all structural properties of this complex value.
///
/// Used by `DataService.updateEntity` to determine the changed properties for PATCH requests.
- (void) setOldComplex :(nullable SODataV4_ComplexValue*)value;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_ComplexValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief The complex type metadata for this value (`SODataV4_ComplexValue`.`dataType` cast to `ComplexType`).
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_ComplexType* complexType;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.COMPLEX_VALUE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Contains the original values for all structural properties of this complex value.
///
/// Used by `DataService.updateEntity` to determine the changed properties for PATCH requests.
@property (nonatomic, readwrite, strong, nullable) SODataV4_ComplexValue* oldComplex;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
@end
#endif

#ifdef import_SODataV4__ComplexValue_internal
#ifndef imported_SODataV4__ComplexValue_internal
#define imported_SODataV4__ComplexValue_internal
@interface SODataV4_ComplexValue (internal)
/// @internal
///
- (nonnull SODataV4_ComplexType*) _type;
/// @internal
///
- (void) set_type :(nonnull SODataV4_ComplexType*)value;
/// @internal
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ComplexType* _type;
@end
#endif
#endif

#ifndef imported_SODataV4__ComplexValueList_public
#define imported_SODataV4__ComplexValueList_public
/// @brief A list of item type `SODataV4_ComplexValue`.
///
///
@interface SODataV4_ComplexValueList : SODataV4_ListBase
{
    @private SODataV4_DataType* _Nonnull _type;
    @private SODataV4_boolean isReference_;
    @private NSString* _Nullable nextLink_;
    @private NSString* _Nullable readLink_;
    @private SODataV4_nullable_long totalCount_;
    @private SODataV4_boolean needsNextLink_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ComplexValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ComplexValueList*) new;
/// @brief Construct a new list with `SODataV4_ComplexValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ComplexValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ComplexValueList*)list;
/// @brief Append `item` to the end of this list.
///
/// It is unusual for a `SODataV4_ComplexValueList` to contain `nil` items, so `SODataV4_ComplexValueList`.`add` is usually used.
///
/// @return This list.
/// @param item Item to be added, which might be `nil`.
- (nonnull SODataV4_ComplexValueList*) addNullable :(nullable SODataV4_ComplexValue*)item;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ComplexValueList*) addThis :(nonnull SODataV4_ComplexValue*)item;
/// @return A new list with at most `query.pageSize` initial items of this list`. The result's `SODataV4_EntityValueList`.`nextLink` will be "?" if the original list length exceeded the page size.
/// @param query Data query whose `SODataV4_DataQuery`.`pageSize` is used for filtering.
- (nonnull SODataV4_ComplexValueList*) applyPageSize :(nonnull SODataV4_DataQuery*)query;
/// @internal
///
+ (nonnull SODataV4_ComplexValueList*) castRequired :(nullable SODataV4_DataValue*)value;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ComplexValueList*) copy;
/// @brief The data type for this list.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief An immutable empty `SODataV4_ComplexValueList`.
///
///
+ (nonnull SODataV4_ComplexValueList*) empty;
/// @return `true` if two complex lists have equal items.
/// @param a First complex list.
/// @param b Second complex list.
/// @see `SODataV4_ComplexValue`.`equal`.
+ (SODataV4_boolean) equal :(nullable SODataV4_ComplexValueList*)a :(nullable SODataV4_ComplexValueList*)b;
/// @return A new list with the items of this list, filtered by `query.queryFilter` and sorted by `query.sortItems`.
/// @param query Data query whose `SODataV4_DataQuery`.`queryFilter` is used for filtering and whose `SODataV4_DataQuery`.`sortItems` are used for sorting.
- (nonnull SODataV4_ComplexValueList*) filterAndSort :(nonnull SODataV4_DataQuery*)query;
/// @return A new list with the items of this list, filtered by `query.queryFilter`, `query.derivedType` (whichever of those is specified, if any).
/// @param query Data query used for filtering.
- (nonnull SODataV4_ComplexValueList*) filterWithQuery :(nonnull SODataV4_DataQuery*)query;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueList`.`length` - 1).
- (nonnull SODataV4_ComplexValue*) get :(SODataV4_int)index;
/// @return The item in this list at the specified `index`, which may be `nil`.
/// It is unusual for a `SODataV4_ComplexValueList` to contain `nil` items, so `SODataV4_ComplexValueList`.`get` is usually used.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueList`.`length` - 1).
- (nullable SODataV4_ComplexValue*) getNullable :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ComplexValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ComplexValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ComplexValue*)item;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_ComplexValueList`.`readLink` will be non-null, and this list will be empty.
///
///
- (SODataV4_boolean) isReference;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexValue*)item :(SODataV4_int)start;
/// @brief An optional link that can be followed (by the caller) to fetch additional list items.
///
/// If this complex list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
- (nullable NSString*) nextLink;
/// @brief An optional link that can be followed (by the caller) to re-read this list.
///
///
- (nullable NSString*) readLink;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ComplexValue*)item;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_ComplexValueList`.`readLink` will be non-null, and this list will be empty.
///
///
- (void) setIsReference :(SODataV4_boolean)value;
/// @brief An optional link that can be followed (by the caller) to fetch additional list items.
///
/// If this complex list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
- (void) setNextLink :(nullable NSString*)value;
/// @brief Set the item in this list at the specified `index`.
///
/// It is unusual for a `SODataV4_ComplexValueList` to contain `nil` items, so `SODataV4_ComplexValueList`.`set` is usually used.
///
/// @param index Zero-based index.
/// @param item Item value, which might be `nil`.
- (void) setNullable :(SODataV4_int)index :(nullable SODataV4_ComplexValue*)item;
/// @brief An optional link that can be followed (by the caller) to re-read this list.
///
///
- (void) setReadLink :(nullable NSString*)value;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_ComplexValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
- (void) setTotalCount :(SODataV4_nullable_long)value;
/// @brief Return a new `SODataV4_ComplexValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ComplexValue` will be removed.
///
/// @return A new list of item type `SODataV4_ComplexValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ComplexValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @brief Return a new ComplexValueList that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter, including nulls.
///
/// To ensure type safety, items in `list` that do not have the item type will be removed.
///
/// @return A new list of item type `SODataV4_ComplexValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ComplexValueList*) shareNullable :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ComplexValue*) single;
/// @return A new list with at most `query.topCount` items of this list, starting at index `query.skipCount`.
/// @param query Data query whose `SODataV4_DataQuery`.`skipCount` and `SODataV4_DataQuery`.`topCount` are used for filtering.
- (nonnull SODataV4_ComplexValueList*) skipAndTop :(nonnull SODataV4_DataQuery*)query;
/// @internal
///
- (nonnull SODataV4_ComplexValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ComplexValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief Sort this list in-place, using `query.sortItems`.
///
///
/// @param query Data query whose whose `SODataV4_DataQuery`.`sortItems` are used for filtering.
- (void) sortWithQuery :(nonnull SODataV4_DataQuery*)query;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_ComplexValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
- (SODataV4_nullable_long) totalCount;
/// @brief Override the type of this list, and return this list.
///
///
/// @param type Data type for the items in this list.
/// @return This list.
- (nonnull SODataV4_ComplexValueList*) withItemType :(nonnull SODataV4_DataType*)type;
/// @return An iterator of this list which uses a nullable item type.
///
- (nonnull SODataV4_ComplexValueListWithNulls*) withNulls;
/// @brief Override the type of this list, and return this list.
///
///
/// @param type Data type for a list of complex values. Use `SODataV4_DataType`.`listOf` to obtain a suitable list type.
/// @return This list.
- (nonnull SODataV4_ComplexValueList*) withType :(nonnull SODataV4_DataType*)type;
/// @brief The data type for this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief An immutable empty `SODataV4_ComplexValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexValueList* empty;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_ComplexValueList`.`readLink` will be non-null, and this list will be empty.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isReference;
/// @brief An optional link that can be followed (by the caller) to fetch additional list items.
///
/// If this complex list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
@property (nonatomic, readwrite, strong, nullable) NSString* nextLink;
/// @brief An optional link that can be followed (by the caller) to re-read this list.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* readLink;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_ComplexValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
@property (nonatomic, readwrite) SODataV4_nullable_long totalCount;
@end
#endif

#ifdef import_SODataV4__ComplexValueList_private
#ifndef imported_SODataV4__ComplexValueList_private
#define imported_SODataV4__ComplexValueList_private
@interface SODataV4_ComplexValueList (private)
+ (nonnull SODataV4_ComplexComparer*) _new1 :(nonnull SODataV4_DataQuery*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__ComplexValueList_internal
#ifndef imported_SODataV4__ComplexValueList_internal
#define imported_SODataV4__ComplexValueList_internal
@interface SODataV4_ComplexValueList (internal)
- (SODataV4_boolean) needsNextLink;
- (void) setNeedsNextLink :(SODataV4_boolean)value;
@property (nonatomic, readwrite) SODataV4_boolean needsNextLink;
@end
#endif
#endif

#ifndef imported_SODataV4__ComplexValueListWithNulls_public
#define imported_SODataV4__ComplexValueListWithNulls_public
/// @internal
///
@interface SODataV4_ComplexValueListWithNulls : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ComplexValueListWithNulls`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ComplexValueListWithNulls*) new;
/// @brief Construct a new list with `SODataV4_ComplexValueListWithNulls`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexValueListWithNulls*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nullable SODataV4_ComplexValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ComplexValueListWithNulls*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ComplexValueListWithNulls*) addThis :(nullable SODataV4_ComplexValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ComplexValueListWithNulls*) copy;
/// @brief An immutable empty `SODataV4_ComplexValueListWithNulls`.
///
///
+ (nonnull SODataV4_ComplexValueListWithNulls*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable SODataV4_ComplexValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueListWithNulls`.`length` - 1).
- (nullable SODataV4_ComplexValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValue`?.
- (SODataV4_boolean) includes :(nullable SODataV4_ComplexValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nullable SODataV4_ComplexValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValue`?.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nullable SODataV4_ComplexValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueListWithNulls`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ComplexValueListWithNulls*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueListWithNulls`.`length`).
- (void) insertAt :(SODataV4_int)index :(nullable SODataV4_ComplexValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable SODataV4_ComplexValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nullable SODataV4_ComplexValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValue`?.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nullable SODataV4_ComplexValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nullable SODataV4_ComplexValue*)item;
/// @brief Return a new `SODataV4_ComplexValueListWithNulls` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ComplexValue`? will be removed.
///
/// @return A new list of item type `SODataV4_ComplexValue`?, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ComplexValueListWithNulls*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nullable SODataV4_ComplexValue*) single;
/// @internal
///
- (nonnull SODataV4_ComplexValueListWithNulls*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ComplexValueListWithNulls*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ComplexValueListWithNulls`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexValueListWithNulls* empty;
@end
#endif

#ifndef imported_SODataV4__ComplexValueMap_EntryList_public
#define imported_SODataV4__ComplexValueMap_EntryList_public
/// @brief A list of item type `SODataV4_ComplexValueMap_Entry`.
///
///
@interface SODataV4_ComplexValueMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ComplexValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ComplexValueMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_ComplexValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ComplexValueMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ComplexValueMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ComplexValueMap_EntryList*) addThis :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ComplexValueMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_ComplexValueMap_EntryList`.
///
///
+ (nonnull SODataV4_ComplexValueMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexValueMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueMap_EntryList`.`length` - 1).
- (nonnull SODataV4_ComplexValueMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValueMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ComplexValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ComplexValueMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ComplexValueMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ComplexValueMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ComplexValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ComplexValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ComplexValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ComplexValueMap_Entry*)item;
/// @brief Return a new `SODataV4_ComplexValueMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ComplexValueMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_ComplexValueMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ComplexValueMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ComplexValueMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_ComplexValueMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ComplexValueMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ComplexValueMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ComplexValueMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__CustomPathList_public
#define imported_SODataV4__CustomPathList_public
/// @internal
///
@interface SODataV4_CustomPathList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_CustomPathList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_CustomPathList*) new;
/// @brief Construct a new list with `SODataV4_CustomPathList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_CustomPathList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_CustomPath*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_CustomPathList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_CustomPathList*) addThis :(nonnull SODataV4_CustomPath*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_CustomPathList*) copy;
/// @brief An immutable empty `SODataV4_CustomPathList`.
///
///
+ (nonnull SODataV4_CustomPathList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_CustomPath*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CustomPathList`.`length` - 1).
- (nonnull SODataV4_CustomPath*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_CustomPathList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_CustomPath`.
- (SODataV4_boolean) includes :(nonnull SODataV4_CustomPath*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_CustomPath*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_CustomPathList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_CustomPath`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_CustomPath*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CustomPathList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_CustomPathList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_CustomPathList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_CustomPath*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_CustomPath*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_CustomPath*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_CustomPathList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_CustomPath`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_CustomPath*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_CustomPath*)item;
/// @brief Return a new `SODataV4_CustomPathList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_CustomPath` will be removed.
///
/// @return A new list of item type `SODataV4_CustomPath`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_CustomPathList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_CustomPath*) single;
/// @internal
///
- (nonnull SODataV4_CustomPathList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_CustomPathList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_CustomPathList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_CustomPathList* empty;
@end
#endif

#ifndef imported_SODataV4__DataException_public
#define imported_SODataV4__DataException_public
/// @brief Abstract base class for data exceptions.
///
///
@interface SODataV4_DataException : SODataV4_ExceptionBase
{
    @private SODataV4_boolean safeMessage_;
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataException*) new;
/// @internal
///
- (void) _init;
/// @brief Mark this exception as having a message, that can be safely delivered to untrusted clients.
///
///
/// @return This exception.
- (nonnull SODataV4_DataException*) safe;
/// @brief Can the `message` property be safely delivered to untrusted clients.
///
///
- (SODataV4_boolean) safeMessage;
/// @brief Can the `message` property be safely delivered to untrusted clients.
///
///
- (void) setSafeMessage :(SODataV4_boolean)value;
/// @brief Can the `message` property be safely delivered to untrusted clients.
///
///
@property (nonatomic, readwrite) SODataV4_boolean safeMessage;
@end
#endif

#ifndef imported_SODataV4__DataMethodList_public
#define imported_SODataV4__DataMethodList_public
/// @internal
///
@interface SODataV4_DataMethodList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataMethodList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataMethodList*) new;
/// @brief Construct a new list with `SODataV4_DataMethodList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataMethodList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataMethod*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataMethodList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataMethodList*) addThis :(nonnull SODataV4_DataMethod*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataMethodList*) copy;
/// @brief An immutable empty `SODataV4_DataMethodList`.
///
///
+ (nonnull SODataV4_DataMethodList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMethod*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMethodList`.`length` - 1).
- (nonnull SODataV4_DataMethod*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMethodList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMethod`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataMethod*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMethod*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMethodList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMethod`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMethod*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMethodList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataMethodList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMethodList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataMethod*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMethod*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMethod*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMethodList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMethod`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMethod*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataMethod*)item;
/// @brief Return a new `SODataV4_DataMethodList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataMethod` will be removed.
///
/// @return A new list of item type `SODataV4_DataMethod`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataMethodList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataMethod*) single;
/// @internal
///
- (nonnull SODataV4_DataMethodList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataMethodList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_DataMethodList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMethodList* empty;
@end
#endif

#ifndef imported_SODataV4__DataMethodMap_EntryList_public
#define imported_SODataV4__DataMethodMap_EntryList_public
/// @brief A list of item type `SODataV4_DataMethodMap_Entry`.
///
///
@interface SODataV4_DataMethodMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataMethodMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataMethodMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_DataMethodMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataMethodMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataMethodMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataMethodMap_EntryList*) addThis :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataMethodMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_DataMethodMap_EntryList`.
///
///
+ (nonnull SODataV4_DataMethodMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMethodMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMethodMap_EntryList`.`length` - 1).
- (nonnull SODataV4_DataMethodMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMethodMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMethodMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMethodMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMethodMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMethodMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMethodMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataMethodMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMethodMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMethodMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMethodMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMethodMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMethodMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataMethodMap_Entry*)item;
/// @brief Return a new `SODataV4_DataMethodMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataMethodMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_DataMethodMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataMethodMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataMethodMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_DataMethodMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataMethodMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataMethodMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMethodMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__DataMetricList_public
#define imported_SODataV4__DataMetricList_public
/// @internal
///
@interface SODataV4_DataMetricList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataMetricList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataMetricList*) new;
/// @brief Construct a new list with `SODataV4_DataMetricList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataMetricList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataMetric*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataMetricList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataMetricList*) addThis :(nonnull SODataV4_DataMetric*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataMetricList*) copy;
/// @brief An immutable empty `SODataV4_DataMetricList`.
///
///
+ (nonnull SODataV4_DataMetricList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMetric*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMetricList`.`length` - 1).
- (nonnull SODataV4_DataMetric*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMetricList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMetric`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataMetric*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMetric*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMetricList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMetric`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMetric*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMetricList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataMetricList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMetricList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataMetric*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMetric*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMetric*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMetricList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMetric`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMetric*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataMetric*)item;
/// @brief Return a new `SODataV4_DataMetricList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataMetric` will be removed.
///
/// @return A new list of item type `SODataV4_DataMetric`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataMetricList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataMetric*) single;
/// @internal
///
- (nonnull SODataV4_DataMetricList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataMetricList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_DataMetricList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMetricList* empty;
@end
#endif

#ifndef imported_SODataV4__DataMetricMap_EntryList_public
#define imported_SODataV4__DataMetricMap_EntryList_public
/// @brief A list of item type `SODataV4_DataMetricMap_Entry`.
///
///
@interface SODataV4_DataMetricMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataMetricMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataMetricMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_DataMetricMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataMetricMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataMetricMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataMetricMap_EntryList*) addThis :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataMetricMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_DataMetricMap_EntryList`.
///
///
+ (nonnull SODataV4_DataMetricMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMetricMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMetricMap_EntryList`.`length` - 1).
- (nonnull SODataV4_DataMetricMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMetricMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMetricMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMetricMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMetricMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataMetricMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMetricMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataMetricMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataMetricMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataMetricMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataMetricMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataMetricMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataMetricMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataMetricMap_Entry*)item;
/// @brief Return a new `SODataV4_DataMetricMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataMetricMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_DataMetricMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataMetricMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataMetricMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_DataMetricMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataMetricMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataMetricMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataMetricMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__DataSchemaList_public
#define imported_SODataV4__DataSchemaList_public
/// @internal
///
@interface SODataV4_DataSchemaList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataSchemaList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataSchemaList*) new;
/// @brief Construct a new list with `SODataV4_DataSchemaList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataSchemaList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataSchema*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataSchemaList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataSchemaList*) addThis :(nonnull SODataV4_DataSchema*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataSchemaList*) copy;
/// @brief An immutable empty `SODataV4_DataSchemaList`.
///
///
+ (nonnull SODataV4_DataSchemaList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataSchema*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataSchemaList`.`length` - 1).
- (nonnull SODataV4_DataSchema*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataSchemaList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataSchema`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataSchema*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataSchema*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataSchemaList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataSchema`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataSchema*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataSchemaList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataSchemaList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataSchemaList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataSchema*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataSchema*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataSchema*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataSchemaList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataSchema`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataSchema*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataSchema*)item;
/// @brief Return a new `SODataV4_DataSchemaList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataSchema` will be removed.
///
/// @return A new list of item type `SODataV4_DataSchema`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataSchemaList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataSchema*) single;
/// @internal
///
- (nonnull SODataV4_DataSchemaList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataSchemaList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataSchemaList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataSchemaList* empty;
@end
#endif

#ifndef imported_SODataV4__DataSchemaMap_EntryList_public
#define imported_SODataV4__DataSchemaMap_EntryList_public
/// @brief A list of item type `SODataV4_DataSchemaMap_Entry`.
///
///
@interface SODataV4_DataSchemaMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataSchemaMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataSchemaMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_DataSchemaMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataSchemaMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataSchemaMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataSchemaMap_EntryList*) addThis :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataSchemaMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_DataSchemaMap_EntryList`.
///
///
+ (nonnull SODataV4_DataSchemaMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataSchemaMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataSchemaMap_EntryList`.`length` - 1).
- (nonnull SODataV4_DataSchemaMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataSchemaMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataSchemaMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataSchemaMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataSchemaMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataSchemaMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataSchemaMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataSchemaMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataSchemaMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataSchemaMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataSchemaMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataSchemaMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataSchemaMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataSchemaMap_Entry*)item;
/// @brief Return a new `SODataV4_DataSchemaMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataSchemaMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_DataSchemaMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataSchemaMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataSchemaMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_DataSchemaMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataSchemaMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataSchemaMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataSchemaMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__DataTypeList_public
#define imported_SODataV4__DataTypeList_public
/// @internal
///
@interface SODataV4_DataTypeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataTypeList*) new;
/// @brief Construct a new list with `SODataV4_DataTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataTypeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataType*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataTypeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataTypeList*) addThis :(nonnull SODataV4_DataType*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataTypeList*) copy;
/// @brief An immutable empty `SODataV4_DataTypeList`.
///
///
+ (nonnull SODataV4_DataTypeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataType*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataTypeList`.`length` - 1).
- (nonnull SODataV4_DataType*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataType`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataType*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataType*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataType`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataType*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataTypeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataTypeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataTypeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataType*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataType*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataType*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataType`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataType*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataType*)item;
/// @brief Return a new `SODataV4_DataTypeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataType` will be removed.
///
/// @return A new list of item type `SODataV4_DataType`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataTypeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataType*) single;
/// @internal
///
- (nonnull SODataV4_DataTypeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataTypeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_DataTypeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataTypeList* empty;
@end
#endif

#ifdef import_SODataV4__DataTypeList_internal
#ifndef imported_SODataV4__DataTypeList_internal
#define imported_SODataV4__DataTypeList_internal
@interface SODataV4_DataTypeList (internal)
- (nullable SODataV4_DataType*) getNullable :(SODataV4_int)index;
@end
#endif
#endif

#ifndef imported_SODataV4__DataTypeMap_EntryList_public
#define imported_SODataV4__DataTypeMap_EntryList_public
/// @brief A list of item type `SODataV4_DataTypeMap_Entry`.
///
///
@interface SODataV4_DataTypeMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataTypeMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_DataTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataTypeMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataTypeMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataTypeMap_EntryList*) addThis :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataTypeMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_DataTypeMap_EntryList`.
///
///
+ (nonnull SODataV4_DataTypeMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataTypeMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataTypeMap_EntryList`.`length` - 1).
- (nonnull SODataV4_DataTypeMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataTypeMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataTypeMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataTypeMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataTypeMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataTypeMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataTypeMap_Entry*)item;
/// @brief Return a new `SODataV4_DataTypeMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataTypeMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_DataTypeMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataTypeMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataTypeMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_DataTypeMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataTypeMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataTypeMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataTypeMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__DataValueList_public
#define imported_SODataV4__DataValueList_public
/// @brief A list of item type `SODataV4_DataValue`.
///
///
@interface SODataV4_DataValueList : SODataV4_ListBase
{
    @private SODataV4_DataType* _Nonnull _type;
    @private SODataV4_boolean isReference_;
    @private NSString* _Nullable nextLink_;
    @private NSString* _Nullable readLink_;
    @private SODataV4_nullable_long totalCount_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataValueList*) new;
/// @brief Construct a new list with `SODataV4_DataValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataValueList*)list;
/// @brief Append `item` to the end of this list.
///
/// It is unusual for a `SODataV4_DataValueList` to contain `nil` items, so `SODataV4_DataValueList`.`add` is usually used.
///
/// @return This list.
/// @param item Item to be added, which might be `nil`.
- (nonnull SODataV4_DataValueList*) addNullable :(nullable SODataV4_DataValue*)item;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataValueList*) addThis :(nonnull SODataV4_DataValue*)item;
/// @internal
///
+ (nonnull SODataV4_DataValueList*) castRequired :(nullable SODataV4_DataValue*)value;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataValueList*) copy;
/// @brief The data type for this list.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief An immutable empty `SODataV4_DataValueList`.
///
///
+ (nonnull SODataV4_DataValueList*) empty;
/// @return `true` if two value lists have equal items.
/// @param a First value list.
/// @param b Second value list.
/// @see `SODataV4_DataEquality`.
+ (SODataV4_boolean) equal :(nullable SODataV4_DataValueList*)a :(nullable SODataV4_DataValueList*)b;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueList`.`length` - 1).
- (nonnull SODataV4_DataValue*) get :(SODataV4_int)index;
/// @return The item in this list at the specified `index`, which might be `nil`.
/// It is unusual for a `SODataV4_DataValueList` to contain `nil` items, so `SODataV4_DataValueList`.`get` is usually used (although `SODataV4_DataValueList`.`get` will throw an exception for a `nil` item).
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueList`.`length` - 1).
- (nullable SODataV4_DataValue*) getNullable :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataValue*)item;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_DataValueList`.`readLink` will be non-null, and this list will be empty.
///
///
- (SODataV4_boolean) isReference;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataValue*)item :(SODataV4_int)start;
/// @brief An optional link that can be followed (by the caller, not by this DataValueList) to fetch additional list items.
///
/// If this value list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
- (nullable NSString*) nextLink;
/// @brief An optional link that can be followed (by the caller, not by this DataValueList) to re-read this list.
///
///
- (nullable NSString*) readLink;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataValue*)item;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_DataValueList`.`readLink` will be non-null, and this list will be empty.
///
///
- (void) setIsReference :(SODataV4_boolean)value;
/// @brief An optional link that can be followed (by the caller, not by this DataValueList) to fetch additional list items.
///
/// If this value list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
- (void) setNextLink :(nullable NSString*)value;
/// @brief Set the item in this list at the specified `index`.
///
/// It is unusual for a `SODataV4_DataValueList` to contain `nil` items, so `SODataV4_DataValueList`.`set` is usually used.
///
/// @param index Zero-based index.
/// @param item Item value, which might be `nil`.
- (void) setNullable :(SODataV4_int)index :(nullable SODataV4_DataValue*)item;
/// @brief An optional link that can be followed (by the caller, not by this DataValueList) to re-read this list.
///
///
- (void) setReadLink :(nullable NSString*)value;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_DataValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
- (void) setTotalCount :(SODataV4_nullable_long)value;
/// @brief Return a new `SODataV4_DataValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataValue` will be removed.
///
/// @return A new list of item type `SODataV4_DataValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @brief Return a new DataValueList that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter, including nulls.
///
/// To ensure type safety, items in `list` that do not have the item type will be removed.
///
/// @return A new list of item type `SODataV4_DataValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataValueList*) shareNullable :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataValue*) single;
/// @internal
///
- (nonnull SODataV4_DataValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_DataValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
- (SODataV4_nullable_long) totalCount;
/// @brief Override the type of this list, and return this list.
///
///
/// @param type Data type for the items in this list.
/// @return This list.
- (nonnull SODataV4_DataValueList*) withItemType :(nonnull SODataV4_DataType*)type;
/// @return An iterator of this list which uses a nullable item type.
/// @see `SODataV4_DataValueList`.`share`.
- (nonnull SODataV4_DataValueListWithNulls*) withNulls;
/// @brief Override the type of this list, and return this list.
///
///
/// @param type Data type for a list of data values. Use `SODataV4_DataType`.`listOf` to obtain a suitable list type.
/// @return This list.
- (nonnull SODataV4_DataValueList*) withType :(nonnull SODataV4_DataType*)type;
/// @brief The data type for this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief An immutable empty `SODataV4_DataValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataValueList* empty;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_DataValueList`.`readLink` will be non-null, and this list will be empty.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isReference;
/// @brief An optional link that can be followed (by the caller, not by this DataValueList) to fetch additional list items.
///
/// If this value list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
@property (nonatomic, readwrite, strong, nullable) NSString* nextLink;
/// @brief An optional link that can be followed (by the caller, not by this DataValueList) to re-read this list.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* readLink;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_DataValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
@property (nonatomic, readwrite) SODataV4_nullable_long totalCount;
@end
#endif

#ifndef imported_SODataV4__DataValueListWithNulls_public
#define imported_SODataV4__DataValueListWithNulls_public
/// @internal
///
@interface SODataV4_DataValueListWithNulls : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataValueListWithNulls`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataValueListWithNulls*) new;
/// @brief Construct a new list with `SODataV4_DataValueListWithNulls`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataValueListWithNulls*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nullable SODataV4_DataValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataValueListWithNulls*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataValueListWithNulls*) addThis :(nullable SODataV4_DataValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataValueListWithNulls*) copy;
/// @brief An immutable empty `SODataV4_DataValueListWithNulls`.
///
///
+ (nonnull SODataV4_DataValueListWithNulls*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable SODataV4_DataValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueListWithNulls`.`length` - 1).
- (nullable SODataV4_DataValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValue`?.
- (SODataV4_boolean) includes :(nullable SODataV4_DataValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nullable SODataV4_DataValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValue`?.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nullable SODataV4_DataValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueListWithNulls`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataValueListWithNulls*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueListWithNulls`.`length`).
- (void) insertAt :(SODataV4_int)index :(nullable SODataV4_DataValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable SODataV4_DataValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nullable SODataV4_DataValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValue`?.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nullable SODataV4_DataValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nullable SODataV4_DataValue*)item;
/// @brief Return a new `SODataV4_DataValueListWithNulls` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataValue`? will be removed.
///
/// @return A new list of item type `SODataV4_DataValue`?, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataValueListWithNulls*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nullable SODataV4_DataValue*) single;
/// @internal
///
- (nonnull SODataV4_DataValueListWithNulls*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataValueListWithNulls*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataValueListWithNulls`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataValueListWithNulls* empty;
@end
#endif

#ifndef imported_SODataV4__DataValueMap_EntryList_public
#define imported_SODataV4__DataValueMap_EntryList_public
/// @brief A list of item type `SODataV4_DataValueMap_Entry`.
///
///
@interface SODataV4_DataValueMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DataValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DataValueMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_DataValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DataValueMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DataValueMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DataValueMap_EntryList*) addThis :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DataValueMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_DataValueMap_EntryList`.
///
///
+ (nonnull SODataV4_DataValueMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataValueMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueMap_EntryList`.`length` - 1).
- (nonnull SODataV4_DataValueMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValueMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DataValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DataValueMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DataValueMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DataValueMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DataValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DataValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DataValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DataValueMap_Entry*)item;
/// @brief Return a new `SODataV4_DataValueMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DataValueMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_DataValueMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DataValueMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DataValueMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_DataValueMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DataValueMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_DataValueMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DataValueMap_EntryList* empty;
@end
#endif

#ifdef import_SODataV4__DateTimeException_internal
#ifndef imported_SODataV4__DateTimeException_internal
#define imported_SODataV4__DateTimeException_public
/* internal */
/// @brief Thrown by DateTimeParser to be caught by various 'parse' functions that return `nil`.
///
///
@interface SODataV4_DateTimeException : SODataV4_ExceptionBase
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DateTimeException*) new;
/// @internal
///
- (void) _init;
@end
#endif
#endif

#ifndef imported_SODataV4__DayTimeDurationList_public
#define imported_SODataV4__DayTimeDurationList_public
/// @internal
///
@interface SODataV4_DayTimeDurationList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DayTimeDurationList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DayTimeDurationList*) new;
/// @brief Construct a new list with `SODataV4_DayTimeDurationList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DayTimeDurationList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_DayTimeDuration*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DayTimeDurationList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DayTimeDurationList*) addThis :(nonnull SODataV4_DayTimeDuration*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DayTimeDurationList*) copy;
/// @brief An immutable empty `SODataV4_DayTimeDurationList`.
///
///
+ (nonnull SODataV4_DayTimeDurationList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DayTimeDuration*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DayTimeDurationList`.`length` - 1).
- (nonnull SODataV4_DayTimeDuration*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DayTimeDurationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DayTimeDuration`.
- (SODataV4_boolean) includes :(nonnull SODataV4_DayTimeDuration*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_DayTimeDuration*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DayTimeDurationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DayTimeDuration`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_DayTimeDuration*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DayTimeDurationList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DayTimeDurationList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DayTimeDurationList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_DayTimeDuration*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_DayTimeDuration*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DayTimeDuration*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DayTimeDurationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_DayTimeDuration`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_DayTimeDuration*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_DayTimeDuration*)item;
/// @brief Return a new `SODataV4_DayTimeDurationList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_DayTimeDuration` will be removed.
///
/// @return A new list of item type `SODataV4_DayTimeDuration`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DayTimeDurationList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_DayTimeDuration*) single;
/// @internal
///
- (nonnull SODataV4_DayTimeDurationList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DayTimeDurationList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_DayTimeDurationList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DayTimeDurationList* empty;
@end
#endif

#ifndef imported_SODataV4__DecimalList_public
#define imported_SODataV4__DecimalList_public
/// @internal
///
@interface SODataV4_DecimalList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DecimalList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DecimalList*) new;
/// @brief Construct a new list with `SODataV4_DecimalList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DecimalList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_BigDecimal*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DecimalList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DecimalList*) addThis :(nonnull SODataV4_BigDecimal*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DecimalList*) copy;
/// @brief An immutable empty `SODataV4_DecimalList`.
///
///
+ (nonnull SODataV4_DecimalList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_BigDecimal*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DecimalList`.`length` - 1).
- (nonnull SODataV4_BigDecimal*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DecimalList`.`equality` property, which would usually be expected to match the `==` operator for item type `decimal`.
- (SODataV4_boolean) includes :(nonnull SODataV4_BigDecimal*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_BigDecimal*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DecimalList`.`equality` property, which would usually be expected to match the `==` operator for item type `decimal`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_BigDecimal*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DecimalList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DecimalList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DecimalList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_BigDecimal*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_BigDecimal*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_BigDecimal*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DecimalList`.`equality` property, which would usually be expected to match the `==` operator for item type `decimal`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_BigDecimal*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_BigDecimal*)item;
/// @brief Return a new `SODataV4_DecimalList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `decimal` will be removed.
///
/// @return A new list of item type `decimal`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DecimalList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_BigDecimal*) single;
/// @internal
///
- (nonnull SODataV4_DecimalList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DecimalList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_DecimalList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DecimalList* empty;
@end
#endif

#ifndef imported_SODataV4__DoubleList_public
#define imported_SODataV4__DoubleList_public
/// @internal
///
@interface SODataV4_DoubleList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_DoubleList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_DoubleList*) new;
/// @brief Construct a new list with `SODataV4_DoubleList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_DoubleList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_double)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_DoubleList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_DoubleList*) addThis :(SODataV4_double)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_DoubleList*) copy;
/// @brief An immutable empty `SODataV4_DoubleList`.
///
///
+ (nonnull SODataV4_DoubleList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_double) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DoubleList`.`length` - 1).
- (SODataV4_double) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_DoubleList`.`equality` property, which would usually be expected to match the `==` operator for item type `double`.
- (SODataV4_boolean) includes :(SODataV4_double)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_double)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DoubleList`.`equality` property, which would usually be expected to match the `==` operator for item type `double`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_double)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DoubleList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_DoubleList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_DoubleList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_double)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_double) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_double)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_DoubleList`.`equality` property, which would usually be expected to match the `==` operator for item type `double`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_double)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_double)item;
/// @brief Return a new `SODataV4_DoubleList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `double` will be removed.
///
/// @return A new list of item type `double`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_DoubleList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_double) single;
/// @internal
///
- (nonnull SODataV4_DoubleList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_DoubleList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_DoubleList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_DoubleList* empty;
@end
#endif

#ifndef imported_SODataV4__EntityContainerList_public
#define imported_SODataV4__EntityContainerList_public
/// @internal
///
@interface SODataV4_EntityContainerList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityContainerList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityContainerList*) new;
/// @brief Construct a new list with `SODataV4_EntityContainerList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityContainerList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntityContainer*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityContainerList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityContainerList*) addThis :(nonnull SODataV4_EntityContainer*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityContainerList*) copy;
/// @brief An immutable empty `SODataV4_EntityContainerList`.
///
///
+ (nonnull SODataV4_EntityContainerList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityContainer*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityContainerList`.`length` - 1).
- (nonnull SODataV4_EntityContainer*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityContainerList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityContainer`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntityContainer*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityContainer*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityContainerList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityContainer`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityContainer*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityContainerList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityContainerList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityContainerList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntityContainer*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityContainer*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityContainer*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityContainerList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityContainer`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityContainer*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntityContainer*)item;
/// @brief Return a new `SODataV4_EntityContainerList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityContainer` will be removed.
///
/// @return A new list of item type `SODataV4_EntityContainer`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityContainerList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntityContainer*) single;
/// @internal
///
- (nonnull SODataV4_EntityContainerList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityContainerList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EntityContainerList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityContainerList* empty;
@end
#endif

#ifndef imported_SODataV4__EntityContainerMap_EntryList_public
#define imported_SODataV4__EntityContainerMap_EntryList_public
/// @brief A list of item type `SODataV4_EntityContainerMap_Entry`.
///
///
@interface SODataV4_EntityContainerMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityContainerMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityContainerMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_EntityContainerMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityContainerMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityContainerMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityContainerMap_EntryList*) addThis :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityContainerMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_EntityContainerMap_EntryList`.
///
///
+ (nonnull SODataV4_EntityContainerMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityContainerMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityContainerMap_EntryList`.`length` - 1).
- (nonnull SODataV4_EntityContainerMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityContainerMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityContainerMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityContainerMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityContainerMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityContainerMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityContainerMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityContainerMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityContainerMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityContainerMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityContainerMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityContainerMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityContainerMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntityContainerMap_Entry*)item;
/// @brief Return a new `SODataV4_EntityContainerMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityContainerMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_EntityContainerMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityContainerMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntityContainerMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_EntityContainerMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityContainerMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EntityContainerMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityContainerMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__EntitySetList_public
#define imported_SODataV4__EntitySetList_public
/// @internal
///
@interface SODataV4_EntitySetList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntitySetList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntitySetList*) new;
/// @brief Construct a new list with `SODataV4_EntitySetList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntitySetList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntitySet*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntitySetList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntitySetList*) addThis :(nonnull SODataV4_EntitySet*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntitySetList*) copy;
/// @brief An immutable empty `SODataV4_EntitySetList`.
///
///
+ (nonnull SODataV4_EntitySetList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntitySet*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntitySetList`.`length` - 1).
- (nonnull SODataV4_EntitySet*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntitySetList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntitySet`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntitySet*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntitySet*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntitySetList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntitySet`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntitySet*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntitySetList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntitySetList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntitySetList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntitySet*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntitySet*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntitySet*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntitySetList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntitySet`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntitySet*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntitySet*)item;
/// @brief Return a new `SODataV4_EntitySetList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntitySet` will be removed.
///
/// @return A new list of item type `SODataV4_EntitySet`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntitySetList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntitySet*) single;
/// @internal
///
- (nonnull SODataV4_EntitySetList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntitySetList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_EntitySetList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntitySetList* empty;
@end
#endif

#ifdef import_SODataV4__EntitySetList_private
#ifndef imported_SODataV4__EntitySetList_private
#define imported_SODataV4__EntitySetList_private
@interface SODataV4_EntitySetList (private)
- (void) topVisitWithForeignKeys :(nonnull SODataV4_EntitySet*)entitySet :(nonnull SODataV4_StringSet*)permanentMarks :(nonnull SODataV4_StringSet*)temporaryMarks :(nonnull SODataV4_EntitySetList*)result :(nonnull SODataV4_MutableBoolean*)notDAG;
@end
#endif
#endif

#ifdef import_SODataV4__EntitySetList_internal
#ifndef imported_SODataV4__EntitySetList_internal
#define imported_SODataV4__EntitySetList_internal
@interface SODataV4_EntitySetList (internal)
/// @brief Topological sort where entity sets with foreign keys come after entity sets that the foreign keys refer to.
///
///
/// @return `true` if the list could be sorted topologically, `false` if it is not a directed acyclic graph.
/// @see [Topological sorting: depth-first search](https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search).
- (SODataV4_boolean) topSortWithForeignKeys;
@end
#endif
#endif

#ifndef imported_SODataV4__EntitySetMap_EntryList_public
#define imported_SODataV4__EntitySetMap_EntryList_public
/// @brief A list of item type `SODataV4_EntitySetMap_Entry`.
///
///
@interface SODataV4_EntitySetMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntitySetMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntitySetMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_EntitySetMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntitySetMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntitySetMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntitySetMap_EntryList*) addThis :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntitySetMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_EntitySetMap_EntryList`.
///
///
+ (nonnull SODataV4_EntitySetMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntitySetMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntitySetMap_EntryList`.`length` - 1).
- (nonnull SODataV4_EntitySetMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntitySetMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntitySetMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntitySetMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntitySetMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntitySetMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntitySetMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntitySetMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntitySetMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntitySetMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntitySetMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntitySetMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntitySetMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntitySetMap_Entry*)item;
/// @brief Return a new `SODataV4_EntitySetMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntitySetMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_EntitySetMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntitySetMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntitySetMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_EntitySetMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntitySetMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EntitySetMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntitySetMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__EntityType_public
#define imported_SODataV4__EntityType_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) entity type.
///
///
@interface SODataV4_EntityType : SODataV4_StructureType
{
    @private SODataV4_EntityTypeList* _Nullable subtypes_;
    @private SODataV4_boolean isMedia_;
    @private SODataV4_PropertyList* _Nonnull keyProperties_;
    @private SODataV4_StreamProperty* _Nonnull mediaProperty_;
    @private SODataV4_CustomPathList* _Nullable customPaths_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EntityType*) new;
/// @internal
///
- (void) _init;
/// @brief The abstract base type Edm.EntityType.
///
///
+ (nonnull SODataV4_EntityType*) abstractBase;
/// @brief DataType.ENTITY_VALUE
///
///
- (SODataV4_int) code;
/// @internal
///
- (nullable SODataV4_CustomPathList*) customPaths;
/// @brief Lookup a key property by name.
///
///
/// @return The property metadata. A DataException is thrown if the property does not exist in this type.
/// @param name Name of the property.
/// @see `SODataV4_EntityType`.`keyProperties`.
- (nonnull SODataV4_Property*) getKeyProperty :(nonnull NSString*)name;
/// @brief `true` if this entity type is a parent of one or more derived entity types.
///
///
- (SODataV4_boolean) hasSubtypes;
/// @brief `true` if this entity type is a subtype of a parent entity type.
///
///
- (SODataV4_boolean) hasSupertype;
/// @brief `true` if this entity type is a media resource (has stream content).
///
///
- (SODataV4_boolean) isMedia;
/// @brief List of key properties for this type.
///
///
- (nonnull SODataV4_PropertyList*) keyProperties;
/// @brief Pseudo-property for media content (media entities only).
///
///
/// @see `SODataV4_EntityType`.`isMedia`.
- (nonnull SODataV4_StreamProperty*) mediaProperty;
/// @brief Set the `SODataV4_EntityType`.`objectFactory` for this entity type.
///
///
/// @param factory Custom factory to produce `SODataV4_EntityValue` instances of this type.
- (void) registerFactory :(nonnull SODataV4_ObjectFactory*)factory;
/// @internal
///
- (void) setCustomPaths :(nullable SODataV4_CustomPathList*)value;
/// @brief `true` if this entity type is a media resource (has stream content).
///
///
- (void) setIsMedia :(SODataV4_boolean)value;
/// @brief List of key properties for this type.
///
///
- (void) setKeyProperties :(nonnull SODataV4_PropertyList*)value;
/// @brief Pseudo-property for media content (media entities only).
///
///
/// @see `SODataV4_EntityType`.`isMedia`.
- (void) setMediaProperty :(nonnull SODataV4_StreamProperty*)value;
/// @brief If `SODataV4_EntityType`.`hasSubtypes` is `true`, then the list of subtypes. Otherwise `nil`.
///
///
- (void) setSubtypes :(nullable SODataV4_EntityTypeList*)value;
/// @brief If `SODataV4_EntityType`.`hasSupertype` is `true`, then the parent entity type. Otherwise `nil`.
///
///
- (void) setSupertype :(nullable SODataV4_EntityType*)value;
/// @brief If `SODataV4_EntityType`.`hasSubtypes` is `true`, then the list of subtypes. Otherwise `nil`.
///
///
- (nullable SODataV4_EntityTypeList*) subtypes;
/// @brief If `SODataV4_EntityType`.`hasSupertype` is `true`, then the parent entity type. Otherwise `nil`.
///
///
- (nullable SODataV4_EntityType*) supertype;
/// @return The name of this data type.
///
- (nonnull NSString*) toString;
/// @brief Represents an undefined entity type.
///
///
+ (nonnull SODataV4_EntityType*) undefined;
/// @brief Set the `SODataV4_EntityType`.`objectFactory` for this entity type.
///
///
/// @return This entity type.
/// @param factory Custom factory to produce `SODataV4_EntityValue` instances of this type.
- (nonnull SODataV4_EntityType*) withFactory :(nonnull SODataV4_ObjectFactory*)factory;
/// @brief The abstract base type Edm.EntityType.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityType* abstractBase;
/// @brief DataType.ENTITY_VALUE
///
///
@property (nonatomic, readonly) SODataV4_int code;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_CustomPathList* customPaths;
/// @brief `true` if this entity type is a parent of one or more derived entity types.
///
///
@property (nonatomic, readonly) SODataV4_boolean hasSubtypes;
/// @brief `true` if this entity type is a subtype of a parent entity type.
///
///
@property (nonatomic, readonly) SODataV4_boolean hasSupertype;
/// @brief `true` if this entity type is a media resource (has stream content).
///
///
@property (nonatomic, readwrite) SODataV4_boolean isMedia;
/// @brief List of key properties for this type.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PropertyList* keyProperties;
/// @brief Pseudo-property for media content (media entities only).
///
///
/// @see `SODataV4_EntityType`.`isMedia`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StreamProperty* mediaProperty;
/// @brief If `SODataV4_EntityType`.`hasSubtypes` is `true`, then the list of subtypes. Otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityTypeList* subtypes;
/// @brief If `SODataV4_EntityType`.`hasSupertype` is `true`, then the parent entity type. Otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityType* supertype;
/// @brief Represents an undefined entity type.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityType* undefined;
@end
#endif

#ifdef import_SODataV4__EntityType_private
#ifndef imported_SODataV4__EntityType_private
#define imported_SODataV4__EntityType_private
@interface SODataV4_EntityType (private)
+ (nonnull SODataV4_EntityType*) _new1 :(nonnull NSString*)p1 :(nonnull SODataV4_PropertyList*)p2 :(nonnull SODataV4_PropertyList*)p3 :(nonnull NSString*)p4 :(nonnull SODataV4_PropertyList*)p5 :(nonnull SODataV4_PropertyList*)p6 :(nonnull SODataV4_PropertyList*)p7 :(nonnull SODataV4_PropertyList*)p8 :(nonnull SODataV4_PropertyMap*)p9 :(nullable SODataV4_CustomPathList*)p10;
+ (nonnull SODataV4_EntityType*) _new2 :(nonnull NSString*)p1 :(nonnull SODataV4_PropertyList*)p2 :(nonnull SODataV4_PropertyList*)p3 :(nonnull NSString*)p4 :(nonnull SODataV4_PropertyList*)p5 :(nonnull SODataV4_PropertyList*)p6 :(nonnull SODataV4_PropertyList*)p7 :(nonnull SODataV4_PropertyList*)p8 :(nonnull SODataV4_PropertyMap*)p9 :(nullable SODataV4_CustomPathList*)p10 :(SODataV4_boolean)p11;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityTypeList_public
#define imported_SODataV4__EntityTypeList_public
/// @internal
///
@interface SODataV4_EntityTypeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityTypeList*) new;
/// @brief Construct a new list with `SODataV4_EntityTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityTypeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntityType*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityTypeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityTypeList*) addThis :(nonnull SODataV4_EntityType*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityTypeList*) copy;
/// @brief An immutable empty `SODataV4_EntityTypeList`.
///
///
+ (nonnull SODataV4_EntityTypeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityType*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityTypeList`.`length` - 1).
- (nonnull SODataV4_EntityType*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityType`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntityType*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityType*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityType`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityType*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityTypeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityTypeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityTypeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntityType*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityType*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityType*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityType`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityType*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntityType*)item;
/// @brief Return a new `SODataV4_EntityTypeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityType` will be removed.
///
/// @return A new list of item type `SODataV4_EntityType`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityTypeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntityType*) single;
/// @internal
///
- (nonnull SODataV4_EntityTypeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityTypeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_EntityTypeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityTypeList* empty;
@end
#endif

#ifndef imported_SODataV4__EntityTypeMap_EntryList_public
#define imported_SODataV4__EntityTypeMap_EntryList_public
/// @brief A list of item type `SODataV4_EntityTypeMap_Entry`.
///
///
@interface SODataV4_EntityTypeMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityTypeMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_EntityTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityTypeMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityTypeMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityTypeMap_EntryList*) addThis :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityTypeMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_EntityTypeMap_EntryList`.
///
///
+ (nonnull SODataV4_EntityTypeMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityTypeMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityTypeMap_EntryList`.`length` - 1).
- (nonnull SODataV4_EntityTypeMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityTypeMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityTypeMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityTypeMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityTypeMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityTypeMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntityTypeMap_Entry*)item;
/// @brief Return a new `SODataV4_EntityTypeMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityTypeMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_EntityTypeMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityTypeMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntityTypeMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_EntityTypeMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityTypeMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EntityTypeMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityTypeMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__EntityValue_public
#define imported_SODataV4__EntityValue_public
/// @brief Encapsulates an [OData](http://odata.org) entity value.
///
///
@interface SODataV4_EntityValue : SODataV4_StructureBase
{
    @private SODataV4_EntityType* _Nonnull _type_;
    @private SODataV4_EntitySet* _Nonnull _set_;
    @private SODataV4_long _key_;
    @private SODataV4_EntityValue* _Nullable _old_;
    @private SODataV4_StreamLink* _Nullable _media_;
    @private NSString* _Nullable _tag_;
    @private NSString* _Nullable _canon_;
    @private SODataV4_EntityValue* _Nullable parentEntity_;
    @private SODataV4_Property* _Nullable parentProperty_;
    @private SODataV4_GlobalDateTime* _Nullable deltaTime_;
    @private NSString* _Nullable entityID_;
    @private NSString* _Nullable readLink_;
    @private NSString* _Nullable editLink_;
    @private SODataV4_int systemFlags_;
}
- (nonnull id) init;
/// @brief Construct a new entity value.
///
/// This constructor is intended for use by custom entity value subclasses.
/// Use `SODataV4_EntityValue`.`ofType` for regular construction.
+ (nonnull SODataV4_EntityValue*) new;
/// @brief Construct a new entity value.
///
/// This constructor is intended for use by custom entity value subclasses.
/// Use `SODataV4_EntityValue`.`ofType` for regular construction.
///
/// @param withDefaults (optional) Should `SODataV4_EntityValue`.`setDefaultValues` be called to initialize properties with default values?
+ (nonnull SODataV4_EntityValue*) new :(SODataV4_boolean)withDefaults;
/// @brief Construct a new entity value.
///
/// This constructor is intended for use by custom entity value subclasses.
/// Use `SODataV4_EntityValue`.`ofType` for regular construction.
///
/// @param withDefaults (optional) Should `SODataV4_EntityValue`.`setDefaultValues` be called to initialize properties with default values?
/// @param type (optional) Entity type. Should not be `nil` except when called by generated proxy base classes.
+ (nonnull SODataV4_EntityValue*) new :(SODataV4_boolean)withDefaults :(nullable SODataV4_EntityType*)type;
/// @internal
///
- (void) _init :(SODataV4_boolean)withDefaults :(nullable SODataV4_EntityType*)type;
/// @brief Bind an entity to a property of the current entity.
///
/// This can be used before `DataService.createEntity` or `DataService.updateEntity` to create or update the bindings of navigation properties.
///
/// @param entity Entity to be bound.
/// @param to Property the entity will be bound to.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) bindEntityExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* categoryQuery = [[[SODataV4_DataQuery new] top:1] expand:@[Category.products]];
///     Category* category = [service getCategory:categoryQuery];
///     SODataV4_DataQuery* productQuery = [[SODataV4_DataQuery new] top:1];
///     Product* product = [service getProduct:productQuery];
///     [category bindEntity:product:Category.products];
///     [service updateEntity:category];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) bindEntityExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* categoriesEntitySet = [service getEntitySet:@"Categories"];
///     SODataV4_EntitySet* productsEntitySet = [service getEntitySet:@"Products"];
///     SODataV4_EntityType* categoryEntityType = categoriesEntitySet.entityType;
///     SODataV4_Property* productsProperty = [categoryEntityType getProperty:@"Products"];
///     SODataV4_DataQuery* categoryQuery = [[[[SODataV4_DataQuery new] from:categoriesEntitySet] top:1] expand:@[productsProperty]];
///     SODataV4_EntityValue* category = [[service executeQuery:categoryQuery] getRequiredEntity];
///     SODataV4_DataQuery* productQuery = [[[SODataV4_DataQuery new] from:productsEntitySet] top:1];
///     SODataV4_EntityValue* product = [[service executeQuery:productQuery] getRequiredEntity];
///     [category bindEntity:product:productsProperty];
///     [service updateEntity:category];
/// }
/// ````
- (void) bindEntity :(nonnull SODataV4_EntityValue*)entity :(nonnull SODataV4_Property*)to;
/// @brief The canonical URL for this entity, relative to the service root URL. Uses OData V4 URL conventions.
///
///
- (nonnull NSString*) canonicalURL;
/// @internal
///
+ (nullable SODataV4_EntityValue*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_EntityValue*) castRequired :(nullable SODataV4_DataValue*)value;
/// @return A copy of this entity value (only structural properties are copied).
///
- (nonnull SODataV4_EntityValue*) copyEntity;
/// @internal
///
- (void) copyKey :(nonnull SODataV4_EntityValue*)from;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.ENTITY_VALUE.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief Can be used to hold the "last modified time" for a changed entity.
///
///
- (nullable SODataV4_GlobalDateTime*) deltaTime;
/// @brief The edit link for this value, preferably relative to the service root URL.
///
/// If an entity does not have an explicit edit link, then writers should use the `SODataV4_EntityValue`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (nullable NSString*) editLink;
/// @brief OData entity id (IRI) for this entity, preferably relative to the service root URL.
///
/// If an entity does not have an explicit entity id, then callers should use the canonical URL.
- (nullable NSString*) entityID;
/// @brief The entity key for this value.
///
///
- (nonnull SODataV4_EntityKey*) entityKey;
/// @brief The entity set for this value.
///
///
/// @see `SODataV4_EntityValue`.`inSet`.
- (nonnull SODataV4_EntitySet*) entitySet;
/// @brief Server-generated entity tag for this entity.
///
/// If non-null, it is used for conflict detection during
/// `DataService.updateEntity` and `DataService.deleteEntity` calls.
- (nullable NSString*) entityTag;
/// @brief The entity type metadata for this value (`SODataV4_EntityValue`.`dataType` cast to `EntityType`).
///
///
- (nonnull SODataV4_EntityType*) entityType;
/// @return `true` if two entity values have equal structural properties.
/// @param a First entity value.
/// @param b Second entity value.
+ (SODataV4_boolean) equal :(nullable SODataV4_EntityValue*)a :(nullable SODataV4_EntityValue*)b;
/// @return `true` if two entity values have equal key properties.
/// @param a First entity value.
/// @param b Second entity value.
+ (SODataV4_boolean) equalKeys :(nullable SODataV4_EntityValue*)a :(nullable SODataV4_EntityValue*)b;
/// @brief `true` if this entity has binding-related changes.
///
///
/// @see `SODataV4_EntityValue`.`bindEntity`, `SODataV4_EntityValue`.`unbindEntity`.
- (SODataV4_boolean) hasChangedBindings;
/// @brief `true` if the entity has a client provided key.
///
///
- (SODataV4_boolean) hasClientProvidedKey;
/// @return `true` if this entity has a value for all key properties.
///
- (SODataV4_boolean) hasKey;
/// @brief `true` if the entity is related to entities which are local (entities that have local requests executed that have either not been sent
///
/// or have been sent but not yet downloaded).
- (SODataV4_nullable_boolean) hasLocalRelatives;
/// @brief `true` if there are unsent requests in the request queue.
///
///
- (SODataV4_boolean) hasPendingChanges;
/// @brief `true` if the entity is related to entities that have unsent requests in the request queue.
///
///
- (SODataV4_nullable_boolean) hasRelativesWithPendingChanges;
/// @brief `true` if this entity is in error state, for example due to the failed backend execution of an uploaded offline create/update/delete operation.
///
/// If true, then one of `SODataV4_EntityValue`.`isCreated`, `SODataV4_EntityValue`.`isUpdated` or `SODataV4_EntityValue`.`isDeleted` should also be true to indicate the kind of failed operation.
/// In some cases (e.g. system unable to distinguish create from update due to "upsert" behaviour) then `SODataV4_EntityValue`.`isCreated`, `SODataV4_EntityValue`.`isUpdated` and `SODataV4_EntityValue`.`isDeleted` might all be `false`.
- (SODataV4_boolean) inErrorState;
/// @brief Change the entity set for this entity.
///
/// Having a non-null entity set is optional if only one entity set in the `DataService` uses the entity type,
/// but is required (before `DataService.createEntity` is called) if multiple entity sets use the same entity type.
///
/// @return This entity.
/// @param set Entity set.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) createEntityInSetExample
/// {
///     NorthwindService* service = self.service;
///     Customer* customer = [Customer new];
///     customer.companyName = @"Voyager Inc.";
///     customer.contactName = @"Kathryn Janeway";
///     [service createEntity:[customer inSet:NorthwindServiceMetadata_EntitySets.customers]];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) createEntityInSetExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* customersEntitySet = [service getEntitySet:@"Customers"];
///     SODataV4_EntityType* customerEntityType = customersEntitySet.entityType;
///     SODataV4_Property* companyNameProperty = [customerEntityType getProperty:@"CompanyName"];
///     SODataV4_Property* contactNameProperty = [customerEntityType getProperty:@"ContactName"];
///     SODataV4_EntityValue* customer = [SODataV4_EntityValue ofType:customerEntityType];
///     [companyNameProperty setString:customer:@"Voyager Inc."];
///     [contactNameProperty setString:customer:@"Kathryn Janeway"];
///     [service createEntity:[customer inSet:customersEntitySet]];
/// }
/// ````
- (nonnull SODataV4_EntityValue*) inSet :(nonnull SODataV4_EntitySet*)set;
/// @brief `true` if this object is an entity binding.
///
/// The `isReference` property should also be `true` for bindings.
///
/// @see `SODataV4_EntityValue`.`bindEntity`, `SODataV4_EntityValue`.`unbindEntity`.
- (SODataV4_boolean) isBinding;
/// @brief `true` if this entity has just been created in the local database or backend system.
///
///
- (SODataV4_boolean) isCreated;
/// @brief `true` if this entity has just been deleted from the local database or backend system.
///
///
- (SODataV4_boolean) isDeleted;
/// @brief `true` if a change (create, update or delete) has been submitted to the local database, but not yet synchronized to the backend system.
///
///
- (SODataV4_boolean) isLocal;
/// @brief `true` if this entity has been newly instantiated, but not yet created, updated or deleted
///
/// in the local database or backend system.
- (SODataV4_boolean) isNew;
/// @return `true` if the value of property `property` is new or changed, relative to `SODataV4_EntityValue`.`oldEntity`.
/// @param property Structural property.
- (SODataV4_boolean) isNewOrChanged :(nonnull SODataV4_Property*)property;
/// @brief `true` if this object is an entity reference. If `true`, the `SODataV4_EntityValue`.`editLink` and/or `SODataV4_EntityValue`.`readLink` will be non-null, or the key properties will be available.
///
/// Non-key properties will not be available.
- (SODataV4_boolean) isReference;
/// @brief 'true' if the entity was already resolved by CsdlDocument's resolveEntity
///
///
- (SODataV4_boolean) isResolved;
/// @brief 'true' if the entity is being resolved by CsdlDocument's resolveEntity
///
///
- (SODataV4_boolean) isResolving;
/// @brief `true` if this entity has just been updated in the local database or backend system.
///
///
- (SODataV4_boolean) isUpdated;
/// @brief Stream link for media entities. Should not be used with non-media entities.
///
///
- (nonnull SODataV4_StreamLink*) mediaStream;
/// @brief Construct a new entity value of the specified type.
///
///
/// @return A new entity value.
/// @param type Entity type for the new value.
+ (nonnull SODataV4_EntityValue*) ofType :(nonnull SODataV4_EntityType*)type;
/// @brief Contains the original values for all structural properties of this entity value.
///
/// Used by `DataService.updateEntity` to determine the changed properties for PATCH requests.
- (nullable SODataV4_EntityValue*) oldEntity;
/// @brief Parent entity when this entity is to be created as a related child.
///
///
- (nullable SODataV4_EntityValue*) parentEntity;
/// @brief Parent property when this entity is to be created as a related child.
///
///
- (nullable SODataV4_Property*) parentProperty;
/// @brief The read link for this value, preferably relative to the service root URL.
///
/// If an entity does not have an explicit read link, then readers should use the `SODataV4_EntityValue`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (nullable NSString*) readLink;
/// @brief Remember the values of structural properties of this entity as the `SODataV4_EntityValue`.`oldEntity`.
///
///
- (void) rememberOld;
/// @brief Can be used to hold the "last modified time" for a changed entity.
///
///
- (void) setDeltaTime :(nullable SODataV4_GlobalDateTime*)value;
/// @brief The edit link for this value, preferably relative to the service root URL.
///
/// If an entity does not have an explicit edit link, then writers should use the `SODataV4_EntityValue`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (void) setEditLink :(nullable NSString*)value;
/// @brief OData entity id (IRI) for this entity, preferably relative to the service root URL.
///
/// If an entity does not have an explicit entity id, then callers should use the canonical URL.
- (void) setEntityID :(nullable NSString*)value;
/// @brief The entity set for this value.
///
///
/// @see `SODataV4_EntityValue`.`inSet`.
- (void) setEntitySet :(nonnull SODataV4_EntitySet*)value;
/// @brief Server-generated entity tag for this entity.
///
/// If non-null, it is used for conflict detection during
/// `DataService.updateEntity` and `DataService.deleteEntity` calls.
- (void) setEntityTag :(nullable NSString*)value;
/// @brief `true` if this entity has binding-related changes.
///
///
/// @see `SODataV4_EntityValue`.`bindEntity`, `SODataV4_EntityValue`.`unbindEntity`.
- (void) setHasChangedBindings :(SODataV4_boolean)value;
/// @brief `true` if the entity has a client provided key.
///
///
- (void) setHasClientProvidedKey :(SODataV4_boolean)value;
/// @brief `true` if the entity is related to entities which are local (entities that have local requests executed that have either not been sent
///
/// or have been sent but not yet downloaded).
- (void) setHasLocalRelatives :(SODataV4_nullable_boolean)value;
/// @brief `true` if there are unsent requests in the request queue.
///
///
- (void) setHasPendingChanges :(SODataV4_boolean)value;
/// @brief `true` if the entity is related to entities that have unsent requests in the request queue.
///
///
- (void) setHasRelativesWithPendingChanges :(SODataV4_nullable_boolean)value;
/// @brief `true` if this entity is in error state, for example due to the failed backend execution of an uploaded offline create/update/delete operation.
///
/// If true, then one of `SODataV4_EntityValue`.`isCreated`, `SODataV4_EntityValue`.`isUpdated` or `SODataV4_EntityValue`.`isDeleted` should also be true to indicate the kind of failed operation.
/// In some cases (e.g. system unable to distinguish create from update due to "upsert" behaviour) then `SODataV4_EntityValue`.`isCreated`, `SODataV4_EntityValue`.`isUpdated` and `SODataV4_EntityValue`.`isDeleted` might all be `false`.
- (void) setInErrorState :(SODataV4_boolean)value;
/// @brief `true` if this object is an entity binding.
///
/// The `isReference` property should also be `true` for bindings.
///
/// @see `SODataV4_EntityValue`.`bindEntity`, `SODataV4_EntityValue`.`unbindEntity`.
- (void) setIsBinding :(SODataV4_boolean)value;
/// @brief `true` if this entity has just been created in the local database or backend system.
///
///
- (void) setIsCreated :(SODataV4_boolean)value;
/// @brief `true` if this entity has just been deleted from the local database or backend system.
///
///
- (void) setIsDeleted :(SODataV4_boolean)value;
/// @brief `true` if a change (create, update or delete) has been submitted to the local database, but not yet synchronized to the backend system.
///
///
- (void) setIsLocal :(SODataV4_boolean)value;
/// @brief `true` if this entity has been newly instantiated, but not yet created, updated or deleted
///
/// in the local database or backend system.
- (void) setIsNew :(SODataV4_boolean)value;
/// @brief `true` if this object is an entity reference. If `true`, the `SODataV4_EntityValue`.`editLink` and/or `SODataV4_EntityValue`.`readLink` will be non-null, or the key properties will be available.
///
/// Non-key properties will not be available.
- (void) setIsReference :(SODataV4_boolean)value;
/// @brief 'true' if the entity was already resolved by CsdlDocument's resolveEntity
///
///
- (void) setIsResolved :(SODataV4_boolean)value;
/// @brief 'true' if the entity is being resolved by CsdlDocument's resolveEntity
///
///
- (void) setIsResolving :(SODataV4_boolean)value;
/// @brief `true` if this entity has just been updated in the local database or backend system.
///
///
- (void) setIsUpdated :(SODataV4_boolean)value;
/// @brief Stream link for media entities. Should not be used with non-media entities.
///
///
- (void) setMediaStream :(nonnull SODataV4_StreamLink*)value;
/// @brief Contains the original values for all structural properties of this entity value.
///
/// Used by `DataService.updateEntity` to determine the changed properties for PATCH requests.
- (void) setOldEntity :(nullable SODataV4_EntityValue*)value;
/// @brief Parent entity when this entity is to be created as a related child.
///
///
- (void) setParentEntity :(nullable SODataV4_EntityValue*)value;
/// @brief Parent property when this entity is to be created as a related child.
///
///
- (void) setParentProperty :(nullable SODataV4_Property*)value;
/// @brief The read link for this value, preferably relative to the service root URL.
///
/// If an entity does not have an explicit read link, then readers should use the `SODataV4_EntityValue`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
- (void) setReadLink :(nullable NSString*)value;
/// @internal
///
- (void) setSystemFlags :(SODataV4_int)value;
/// @brief System-generated unique numeric key for this entity.
///
/// For internal use. Should not be changed by application code.
- (void) setSystemKey :(SODataV4_long)value;
/// @internal
///
- (SODataV4_int) systemFlags;
/// @brief System-generated unique numeric key for this entity.
///
/// For internal use. Should not be changed by application code.
- (SODataV4_long) systemKey;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_EntityValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
- (SODataV4_int) typeCode;
/// @brief Unbind an entity from a property of the current entity.
///
/// This can be used before `DataService.createEntity` or `DataService.updateEntity` to create or update the bindings of navigation properties.
///
/// @param entity Entity to be unbound. Can be `nil` for unbinding an entity from a single-valued navigation property.
/// @param from Property the entity will be unbound from.
/// 
/// #### Example using proxy classes
/// 
/// ```` oc
/// - (void) unbindEntityExample
/// {
///     NorthwindService* service = self.service;
///     SODataV4_DataQuery* categoryQuery = [[[SODataV4_DataQuery new] top:1] expand:@[Category.products]];
///     Category* category = [service getCategory:categoryQuery];
///     Product__List* products = category.products;
///     if (products.length != 0)
///     {
///         Product* product = [products first];
///         [category unbindEntity:product:Category.products];
///     }
///     [service updateEntity:category];
/// }
/// ````
/// 
/// #### Example using dynamic API
/// 
/// ```` oc
/// - (void) unbindEntityExample
/// {
///     SODataV4_DataService* service = self.service;
///     SODataV4_EntitySet* categoriesEntitySet = [service getEntitySet:@"Categories"];
///     SODataV4_EntityType* categoryEntityType = categoriesEntitySet.entityType;
///     SODataV4_Property* productsProperty = [categoryEntityType getProperty:@"Products"];
///     SODataV4_DataQuery* categoryQuery = [[[[SODataV4_DataQuery new] from:categoriesEntitySet] top:1] expand:@[productsProperty]];
///     SODataV4_EntityValue* category = [[service executeQuery:categoryQuery] getRequiredEntity];
///     SODataV4_EntityValueList* products = [productsProperty getEntityList:category];
///     if (products.length != 0)
///     {
///         SODataV4_EntityValue* product = [products first];
///         [category unbindEntity:product:productsProperty];
///     }
///     [service updateEntity:category];
/// }
/// ````
- (void) unbindEntity :(nullable SODataV4_EntityValue*)entity :(nonnull SODataV4_Property*)from;
/// @brief Change the primary key for this entity.
///
///
/// @return This entity.
/// @param key Primary key
- (nonnull SODataV4_EntityValue*) withKey :(nonnull SODataV4_EntityKey*)key;
/// @brief Perform some `work` within an instance-level exclusive lock.
///
///
/// @param work Work to be executed within an instance-level exclusive lock.
- (void) withLock :(void(^ _Nonnull)(void))work;
/// @brief The canonical URL for this entity, relative to the service root URL. Uses OData V4 URL conventions.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* canonicalURL;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.ENTITY_VALUE.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Can be used to hold the "last modified time" for a changed entity.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_GlobalDateTime* deltaTime;
/// @brief The edit link for this value, preferably relative to the service root URL.
///
/// If an entity does not have an explicit edit link, then writers should use the `SODataV4_EntityValue`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
@property (nonatomic, readwrite, strong, nullable) NSString* editLink;
/// @brief OData entity id (IRI) for this entity, preferably relative to the service root URL.
///
/// If an entity does not have an explicit entity id, then callers should use the canonical URL.
@property (nonatomic, readwrite, strong, nullable) NSString* entityID;
/// @brief The entity key for this value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntityKey* entityKey;
/// @brief The entity set for this value.
///
///
/// @see `SODataV4_EntityValue`.`inSet`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntitySet* entitySet;
/// @brief Server-generated entity tag for this entity.
///
/// If non-null, it is used for conflict detection during
/// `DataService.updateEntity` and `DataService.deleteEntity` calls.
@property (nonatomic, readwrite, strong, nullable) NSString* entityTag;
/// @brief The entity type metadata for this value (`SODataV4_EntityValue`.`dataType` cast to `EntityType`).
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntityType* entityType;
/// @brief `true` if this entity has binding-related changes.
///
///
/// @see `SODataV4_EntityValue`.`bindEntity`, `SODataV4_EntityValue`.`unbindEntity`.
@property (nonatomic, readwrite) SODataV4_boolean hasChangedBindings;
/// @brief `true` if the entity has a client provided key.
///
///
@property (nonatomic, readwrite) SODataV4_boolean hasClientProvidedKey;
/// @brief `true` if the entity is related to entities which are local (entities that have local requests executed that have either not been sent
///
/// or have been sent but not yet downloaded).
@property (nonatomic, readwrite) SODataV4_nullable_boolean hasLocalRelatives;
/// @brief `true` if there are unsent requests in the request queue.
///
///
@property (nonatomic, readwrite) SODataV4_boolean hasPendingChanges;
/// @brief `true` if the entity is related to entities that have unsent requests in the request queue.
///
///
@property (nonatomic, readwrite) SODataV4_nullable_boolean hasRelativesWithPendingChanges;
/// @brief `true` if this entity is in error state, for example due to the failed backend execution of an uploaded offline create/update/delete operation.
///
/// If true, then one of `SODataV4_EntityValue`.`isCreated`, `SODataV4_EntityValue`.`isUpdated` or `SODataV4_EntityValue`.`isDeleted` should also be true to indicate the kind of failed operation.
/// In some cases (e.g. system unable to distinguish create from update due to "upsert" behaviour) then `SODataV4_EntityValue`.`isCreated`, `SODataV4_EntityValue`.`isUpdated` and `SODataV4_EntityValue`.`isDeleted` might all be `false`.
@property (nonatomic, readwrite) SODataV4_boolean inErrorState;
/// @brief `true` if this object is an entity binding.
///
/// The `isReference` property should also be `true` for bindings.
///
/// @see `SODataV4_EntityValue`.`bindEntity`, `SODataV4_EntityValue`.`unbindEntity`.
@property (nonatomic, readwrite) SODataV4_boolean isBinding;
/// @brief `true` if this entity has just been created in the local database or backend system.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isCreated;
/// @brief `true` if this entity has just been deleted from the local database or backend system.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isDeleted;
/// @brief `true` if a change (create, update or delete) has been submitted to the local database, but not yet synchronized to the backend system.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isLocal;
/// @brief `true` if this entity has been newly instantiated, but not yet created, updated or deleted
///
/// in the local database or backend system.
@property (nonatomic, readwrite) SODataV4_boolean isNew;
/// @brief `true` if this object is an entity reference. If `true`, the `SODataV4_EntityValue`.`editLink` and/or `SODataV4_EntityValue`.`readLink` will be non-null, or the key properties will be available.
///
/// Non-key properties will not be available.
@property (nonatomic, readwrite) SODataV4_boolean isReference;
/// @brief 'true' if the entity was already resolved by CsdlDocument's resolveEntity
///
///
@property (nonatomic, readwrite) SODataV4_boolean isResolved;
/// @brief 'true' if the entity is being resolved by CsdlDocument's resolveEntity
///
///
@property (nonatomic, readwrite) SODataV4_boolean isResolving;
/// @brief `true` if this entity has just been updated in the local database or backend system.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isUpdated;
/// @brief Stream link for media entities. Should not be used with non-media entities.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StreamLink* mediaStream;
/// @brief Contains the original values for all structural properties of this entity value.
///
/// Used by `DataService.updateEntity` to determine the changed properties for PATCH requests.
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityValue* oldEntity;
/// @brief Parent entity when this entity is to be created as a related child.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityValue* parentEntity;
/// @brief Parent property when this entity is to be created as a related child.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_Property* parentProperty;
/// @brief The read link for this value, preferably relative to the service root URL.
///
/// If an entity does not have an explicit read link, then readers should use the `SODataV4_EntityValue`.`valuePath`,
/// or if that is not set, then a canonical URL (refer to the OData specification).
@property (nonatomic, readwrite, strong, nullable) NSString* readLink;
/// @internal
///
@property (nonatomic, readwrite) SODataV4_int systemFlags;
/// @brief System-generated unique numeric key for this entity.
///
/// For internal use. Should not be changed by application code.
@property (nonatomic, readwrite) SODataV4_long systemKey;
/// @brief Data type code of the wrapped value, equivalent to `dataType.code`.
///
///
@property (nonatomic, readonly) SODataV4_int typeCode;
@end
#endif

#ifdef import_SODataV4__EntityValue_private
#ifndef imported_SODataV4__EntityValue_private
#define imported_SODataV4__EntityValue_private
@interface SODataV4_EntityValue (private)
+ (nonnull SODataV4_StreamLink*) _new1 :(nonnull SODataV4_StreamProperty*)p1 :(nonnull SODataV4_StructureType*)p2;
@end
#endif
#endif

#ifdef import_SODataV4__EntityValue_internal
#ifndef imported_SODataV4__EntityValue_internal
#define imported_SODataV4__EntityValue_internal
@interface SODataV4_EntityValue (internal)
/// @internal
///
- (nullable NSString*) _canon;
/// @internal
///
- (SODataV4_long) _key;
/// @internal
///
- (nullable SODataV4_StreamLink*) _media;
/// @internal
///
- (nullable SODataV4_EntityValue*) _old;
/// @internal
///
- (nonnull SODataV4_EntitySet*) _set;
/// @internal
///
- (nullable NSString*) _tag;
/// @internal
///
- (nonnull SODataV4_EntityType*) _type;
- (SODataV4_boolean) hasChangedPropertiesForUpdate;
- (SODataV4_boolean) inCreateMedia;
- (SODataV4_boolean) inDownload;
- (SODataV4_boolean) inSyncTran;
- (SODataV4_boolean) inUploadMedia;
- (void) setInCreateMedia :(SODataV4_boolean)value;
- (void) setInDownload :(SODataV4_boolean)value;
- (void) setInSyncTran :(SODataV4_boolean)value;
- (void) setInUploadMedia :(SODataV4_boolean)value;
/// @internal
///
- (void) set_canon :(nullable NSString*)value;
/// @internal
///
- (void) set_key :(SODataV4_long)value;
/// @internal
///
- (void) set_media :(nullable SODataV4_StreamLink*)value;
/// @internal
///
- (void) set_old :(nullable SODataV4_EntityValue*)value;
/// @internal
///
- (void) set_set :(nonnull SODataV4_EntitySet*)value;
/// @internal
///
- (void) set_tag :(nullable NSString*)value;
/// @internal
///
- (void) set_type :(nonnull SODataV4_EntityType*)value;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) NSString* _canon;
/// @internal
///
@property (nonatomic, readwrite) SODataV4_long _key;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_StreamLink* _media;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntityValue* _old;
/// @internal
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntitySet* _set;
/// @internal
///
@property (nonatomic, readwrite, strong, nullable) NSString* _tag;
/// @internal
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_EntityType* _type;
@property (nonatomic, readwrite) SODataV4_boolean inCreateMedia;
@property (nonatomic, readwrite) SODataV4_boolean inDownload;
@property (nonatomic, readwrite) SODataV4_boolean inSyncTran;
@property (nonatomic, readwrite) SODataV4_boolean inUploadMedia;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityValueList_public
#define imported_SODataV4__EntityValueList_public
/// @brief A list of item type `SODataV4_EntityValue`.
///
///
@interface SODataV4_EntityValueList : SODataV4_ListBase
{
    @private SODataV4_DataType* _Nonnull _type;
    @private SODataV4_boolean isDelta_;
    @private SODataV4_boolean isReference_;
    @private NSString* _Nullable deltaLink_;
    @private NSString* _Nullable nextLink_;
    @private NSString* _Nullable readLink_;
    @private SODataV4_nullable_long totalCount_;
    @private SODataV4_ChangedLinkList* _Nonnull changedLinks_;
    @private SODataV4_boolean needsNextLink_;
    @private SODataV4_DataValueList* _Nullable orderByValues_;
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityValueList*) new;
/// @brief Construct a new list with `SODataV4_EntityValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntityValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityValueList*)list;
/// @brief Append `item` to the end of this list.
///
/// It is unusual for an `SODataV4_EntityValueList` to contain `nil` items, so `SODataV4_EntityValueList`.`add` is usually used.
///
/// @return This list.
/// @param item Item to be added, which might be `nil`.
- (nonnull SODataV4_EntityValueList*) addNullable :(nullable SODataV4_EntityValue*)item;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityValueList*) addThis :(nonnull SODataV4_EntityValue*)item;
/// @return A new list with at most `query.pageSize` initial items of this list`. The result's `SODataV4_EntityValueList`.`nextLink` will be "?" if the original list length exceeded the page size.
/// @param query Data query whose `SODataV4_DataQuery`.`pageSize` is used for filtering.
- (nonnull SODataV4_EntityValueList*) applyPageSize :(nonnull SODataV4_DataQuery*)query;
/// @internal
///
+ (nonnull SODataV4_EntityValueList*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief A list of changed links associated with this entity list.
///
///
- (nonnull SODataV4_ChangedLinkList*) changedLinks;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityValueList*) copy;
/// @brief The data type for this list.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief An optional link that can be followed (by the caller) to get changes to this list.
///
///
- (nullable NSString*) deltaLink;
/// @brief An immutable empty `SODataV4_EntityValueList`.
///
///
+ (nonnull SODataV4_EntityValueList*) empty;
/// @return `true` if two entity lists have equal items.
/// @param a First entity list.
/// @param b Second entity list.
/// @see `SODataV4_EntityValue`.`equal`.
+ (SODataV4_boolean) equal :(nullable SODataV4_EntityValueList*)a :(nullable SODataV4_EntityValueList*)b;
/// @return A new list with the items of this list, filtered by `query.queryFilter` and sorted by `query.sortItems`.
/// @param query Data query whose `SODataV4_DataQuery`.`queryFilter` is used for filtering and whose `SODataV4_DataQuery`.`sortItems` are used for sorting.
- (nonnull SODataV4_EntityValueList*) filterAndSort :(nonnull SODataV4_DataQuery*)query;
/// @return A new list with the items of this list, filtered by `query.queryFilter`, `query.derivedType`, `query.entityKey`, `query.deltaTime` (whichever of those is specified, if any).
/// @param query Data query used for filtering.
- (nonnull SODataV4_EntityValueList*) filterWithQuery :(nonnull SODataV4_DataQuery*)query;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueList`.`length` - 1).
- (nonnull SODataV4_EntityValue*) get :(SODataV4_int)index;
/// @return The item in this list at the specified `index`, which may be `nil`.
/// It is unusual for an `SODataV4_EntityValueList` to contain `nil` items, so `SODataV4_EntityValueList`.`get` is usually used.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueList`.`length` - 1).
- (nullable SODataV4_EntityValue*) getNullable :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntityValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntityValue*)item;
/// @brief `true` if this list is a delta response.
///
///
- (SODataV4_boolean) isDelta;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_EntityValueList`.`readLink` will be non-null, and this list will be empty.
///
///
- (SODataV4_boolean) isReference;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityValue*)item :(SODataV4_int)start;
/// @brief An optional link that can be followed (by the caller) to fetch additional list items.
///
/// If this entity list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
- (nullable NSString*) nextLink;
/// @brief An optional link that can be followed (by the caller) to re-read this list.
///
///
- (nullable NSString*) readLink;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntityValue*)item;
/// @brief A list of changed links associated with this entity list.
///
///
- (void) setChangedLinks :(nonnull SODataV4_ChangedLinkList*)value;
/// @brief An optional link that can be followed (by the caller) to get changes to this list.
///
///
- (void) setDeltaLink :(nullable NSString*)value;
/// @brief `true` if this list is a delta response.
///
///
- (void) setIsDelta :(SODataV4_boolean)value;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_EntityValueList`.`readLink` will be non-null, and this list will be empty.
///
///
- (void) setIsReference :(SODataV4_boolean)value;
/// @brief An optional link that can be followed (by the caller) to fetch additional list items.
///
/// If this entity list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
- (void) setNextLink :(nullable NSString*)value;
/// @brief Set the item in this list at the specified `index`.
///
/// It is unusual for an `SODataV4_EntityValueList` to contain `nil` items, so `SODataV4_EntityValueList`.`set` is usually used.
///
/// @param index Zero-based index.
/// @param item Item value, which might be `nil`.
- (void) setNullable :(SODataV4_int)index :(nullable SODataV4_EntityValue*)item;
/// @brief An optional link that can be followed (by the caller) to re-read this list.
///
///
- (void) setReadLink :(nullable NSString*)value;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_EntityValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
- (void) setTotalCount :(SODataV4_nullable_long)value;
/// @brief Return a new `SODataV4_EntityValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityValue` will be removed.
///
/// @return A new list of item type `SODataV4_EntityValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @brief Return a new EntityValueList that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter, including nulls.
///
/// To ensure type safety, items in `list` that do not have the item type will be removed.
///
/// @return A new list of item type `SODataV4_EntityValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityValueList*) shareNullable :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntityValue*) single;
/// @return A new list with at most `query.topCount` items of this list, starting at index `query.skipCount`.
/// @param query Data query whose `SODataV4_DataQuery`.`skipCount` and `SODataV4_DataQuery`.`topCount` are used for filtering.
- (nonnull SODataV4_EntityValueList*) skipAndTop :(nonnull SODataV4_DataQuery*)query;
/// @internal
///
- (nonnull SODataV4_EntityValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief Sort this list in-place, using `query.sortItems`.
///
///
/// @param query Data query whose whose `SODataV4_DataQuery`.`sortItems` are used for filtering.
- (void) sortWithQuery :(nonnull SODataV4_DataQuery*)query;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_EntityValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
- (SODataV4_nullable_long) totalCount;
/// @brief Override the type of this list, and return this list.
///
///
/// @param type Data type for the items in this list.
/// @return This list.
- (nonnull SODataV4_EntityValueList*) withItemType :(nonnull SODataV4_DataType*)type;
/// @return An iterator of this list which uses a nullable item type.
/// @see `SODataV4_EntityValueList`.`share`.
- (nonnull SODataV4_EntityValueListWithNulls*) withNulls;
/// @brief Override the type of this list, and return this list.
///
///
/// @param type Data type for a list of entity values. Use `SODataV4_DataType`.`listOf` to obtain a suitable list type.
/// @return This list.
- (nonnull SODataV4_EntityValueList*) withType :(nonnull SODataV4_DataType*)type;
/// @brief A list of changed links associated with this entity list.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ChangedLinkList* changedLinks;
/// @brief The data type for this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief An optional link that can be followed (by the caller) to get changes to this list.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* deltaLink;
/// @brief An immutable empty `SODataV4_EntityValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityValueList* empty;
/// @brief `true` if this list is a delta response.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isDelta;
/// @brief `true` if this list is a referece. If `true`, the `SODataV4_EntityValueList`.`readLink` will be non-null, and this list will be empty.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isReference;
/// @brief An optional link that can be followed (by the caller) to fetch additional list items.
///
/// If this entity list was produced via server-driven paging, then the server may
/// have provided a next-link which can be followed to obtain more items.
@property (nonatomic, readwrite, strong, nullable) NSString* nextLink;
/// @brief An optional link that can be followed (by the caller) to re-read this list.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* readLink;
/// @brief Total number of items available in the server-side list, which may be greater than `SODataV4_EntityValueList`.`length` if the client requested an inline `SODataV4_DataQuery`.`count`.
///
///
@property (nonatomic, readwrite) SODataV4_nullable_long totalCount;
@end
#endif

#ifdef import_SODataV4__EntityValueList_private
#ifndef imported_SODataV4__EntityValueList_private
#define imported_SODataV4__EntityValueList_private
@interface SODataV4_EntityValueList (private)
+ (nonnull SODataV4_EntityComparer*) _new1 :(nonnull SODataV4_DataQuery*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__EntityValueList_internal
#ifndef imported_SODataV4__EntityValueList_internal
#define imported_SODataV4__EntityValueList_internal
@interface SODataV4_EntityValueList (internal)
- (SODataV4_boolean) needsNextLink;
/// @brief Used, for example, by SQLDatabaseProvider.executeQuery to save the
///
///
- (nullable SODataV4_DataValueList*) orderByValues;
- (void) setNeedsNextLink :(SODataV4_boolean)value;
/// @brief Used, for example, by SQLDatabaseProvider.executeQuery to save the
///
///
- (void) setOrderByValues :(nullable SODataV4_DataValueList*)value;
@property (nonatomic, readwrite) SODataV4_boolean needsNextLink;
/// @brief Used, for example, by SQLDatabaseProvider.executeQuery to save the
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValueList* orderByValues;
@end
#endif
#endif

#ifndef imported_SODataV4__EntityValueListWithNulls_public
#define imported_SODataV4__EntityValueListWithNulls_public
/// @internal
///
@interface SODataV4_EntityValueListWithNulls : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityValueListWithNulls`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityValueListWithNulls*) new;
/// @brief Construct a new list with `SODataV4_EntityValueListWithNulls`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityValueListWithNulls*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nullable SODataV4_EntityValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityValueListWithNulls*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityValueListWithNulls*) addThis :(nullable SODataV4_EntityValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityValueListWithNulls*) copy;
/// @brief An immutable empty `SODataV4_EntityValueListWithNulls`.
///
///
+ (nonnull SODataV4_EntityValueListWithNulls*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable SODataV4_EntityValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueListWithNulls`.`length` - 1).
- (nullable SODataV4_EntityValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValue`?.
- (SODataV4_boolean) includes :(nullable SODataV4_EntityValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nullable SODataV4_EntityValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValue`?.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nullable SODataV4_EntityValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueListWithNulls`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityValueListWithNulls*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueListWithNulls`.`length`).
- (void) insertAt :(SODataV4_int)index :(nullable SODataV4_EntityValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nullable SODataV4_EntityValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nullable SODataV4_EntityValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueListWithNulls`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValue`?.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nullable SODataV4_EntityValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nullable SODataV4_EntityValue*)item;
/// @brief Return a new `SODataV4_EntityValueListWithNulls` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityValue`? will be removed.
///
/// @return A new list of item type `SODataV4_EntityValue`?, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityValueListWithNulls*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nullable SODataV4_EntityValue*) single;
/// @internal
///
- (nonnull SODataV4_EntityValueListWithNulls*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityValueListWithNulls*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EntityValueListWithNulls`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityValueListWithNulls* empty;
@end
#endif

#ifndef imported_SODataV4__EntityValueMap_EntryList_public
#define imported_SODataV4__EntityValueMap_EntryList_public
/// @brief A list of item type `SODataV4_EntityValueMap_Entry`.
///
///
@interface SODataV4_EntityValueMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EntityValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EntityValueMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_EntityValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EntityValueMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EntityValueMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EntityValueMap_EntryList*) addThis :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EntityValueMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_EntityValueMap_EntryList`.
///
///
+ (nonnull SODataV4_EntityValueMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityValueMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueMap_EntryList`.`length` - 1).
- (nonnull SODataV4_EntityValueMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValueMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EntityValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EntityValueMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EntityValueMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EntityValueMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EntityValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EntityValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EntityValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EntityValueMap_Entry*)item;
/// @brief Return a new `SODataV4_EntityValueMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EntityValueMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_EntityValueMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EntityValueMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EntityValueMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_EntityValueMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EntityValueMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EntityValueMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EntityValueMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__EnumTypeList_public
#define imported_SODataV4__EnumTypeList_public
/// @internal
///
@interface SODataV4_EnumTypeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EnumTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EnumTypeList*) new;
/// @brief Construct a new list with `SODataV4_EnumTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EnumTypeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EnumType*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EnumTypeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EnumTypeList*) addThis :(nonnull SODataV4_EnumType*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EnumTypeList*) copy;
/// @brief An immutable empty `SODataV4_EnumTypeList`.
///
///
+ (nonnull SODataV4_EnumTypeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumType*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumTypeList`.`length` - 1).
- (nonnull SODataV4_EnumType*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumType`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EnumType*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumType*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumType`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumType*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumTypeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EnumTypeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumTypeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EnumType*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumType*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumType*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumType`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumType*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EnumType*)item;
/// @brief Return a new `SODataV4_EnumTypeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EnumType` will be removed.
///
/// @return A new list of item type `SODataV4_EnumType`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EnumTypeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EnumType*) single;
/// @internal
///
- (nonnull SODataV4_EnumTypeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EnumTypeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_EnumTypeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumTypeList* empty;
@end
#endif

#ifndef imported_SODataV4__EnumTypeMap_EntryList_public
#define imported_SODataV4__EnumTypeMap_EntryList_public
/// @brief A list of item type `SODataV4_EnumTypeMap_Entry`.
///
///
@interface SODataV4_EnumTypeMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EnumTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EnumTypeMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_EnumTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EnumTypeMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EnumTypeMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EnumTypeMap_EntryList*) addThis :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EnumTypeMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_EnumTypeMap_EntryList`.
///
///
+ (nonnull SODataV4_EnumTypeMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumTypeMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumTypeMap_EntryList`.`length` - 1).
- (nonnull SODataV4_EnumTypeMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumTypeMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumTypeMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EnumTypeMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumTypeMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumTypeMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EnumTypeMap_Entry*)item;
/// @brief Return a new `SODataV4_EnumTypeMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EnumTypeMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_EnumTypeMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EnumTypeMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EnumTypeMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_EnumTypeMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EnumTypeMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EnumTypeMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumTypeMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__EnumValueList_public
#define imported_SODataV4__EnumValueList_public
/// @internal
///
@interface SODataV4_EnumValueList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EnumValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EnumValueList*) new;
/// @brief Construct a new list with `SODataV4_EnumValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EnumValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EnumValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EnumValueList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EnumValueList*) addThis :(nonnull SODataV4_EnumValue*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EnumValueList*) copy;
/// @brief An immutable empty `SODataV4_EnumValueList`.
///
///
+ (nonnull SODataV4_EnumValueList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumValueList`.`length` - 1).
- (nonnull SODataV4_EnumValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EnumValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EnumValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EnumValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EnumValue*)item;
/// @brief Return a new `SODataV4_EnumValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EnumValue` will be removed.
///
/// @return A new list of item type `SODataV4_EnumValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EnumValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EnumValue*) single;
/// @internal
///
- (nonnull SODataV4_EnumValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EnumValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_EnumValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumValueList* empty;
@end
#endif

#ifndef imported_SODataV4__EnumValueMap_EntryList_public
#define imported_SODataV4__EnumValueMap_EntryList_public
/// @brief A list of item type `SODataV4_EnumValueMap_Entry`.
///
///
@interface SODataV4_EnumValueMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_EnumValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_EnumValueMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_EnumValueMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_EnumValueMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_EnumValueMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_EnumValueMap_EntryList*) addThis :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_EnumValueMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_EnumValueMap_EntryList`.
///
///
+ (nonnull SODataV4_EnumValueMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumValueMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumValueMap_EntryList`.`length` - 1).
- (nonnull SODataV4_EnumValueMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumValueMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_EnumValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumValueMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_EnumValueMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_EnumValueMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_EnumValueMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_EnumValueMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_EnumValueMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_EnumValueMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_EnumValueMap_Entry*)item;
/// @brief Return a new `SODataV4_EnumValueMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_EnumValueMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_EnumValueMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_EnumValueMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_EnumValueMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_EnumValueMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_EnumValueMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_EnumValueMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_EnumValueMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__ErrorResponseList_public
#define imported_SODataV4__ErrorResponseList_public
/// @internal
///
@interface SODataV4_ErrorResponseList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ErrorResponseList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ErrorResponseList*) new;
/// @brief Construct a new list with `SODataV4_ErrorResponseList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ErrorResponseList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ErrorResponse*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ErrorResponseList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ErrorResponseList*) addThis :(nonnull SODataV4_ErrorResponse*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ErrorResponseList*) copy;
/// @brief An immutable empty `SODataV4_ErrorResponseList`.
///
///
+ (nonnull SODataV4_ErrorResponseList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ErrorResponse*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ErrorResponseList`.`length` - 1).
- (nonnull SODataV4_ErrorResponse*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ErrorResponseList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ErrorResponse`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ErrorResponse*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ErrorResponse*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ErrorResponseList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ErrorResponse`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ErrorResponse*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ErrorResponseList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ErrorResponseList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ErrorResponseList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ErrorResponse*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ErrorResponse*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ErrorResponse*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ErrorResponseList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ErrorResponse`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ErrorResponse*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ErrorResponse*)item;
/// @brief Return a new `SODataV4_ErrorResponseList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ErrorResponse` will be removed.
///
/// @return A new list of item type `SODataV4_ErrorResponse`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ErrorResponseList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ErrorResponse*) single;
/// @internal
///
- (nonnull SODataV4_ErrorResponseList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ErrorResponseList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ErrorResponseList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ErrorResponseList* empty;
@end
#endif

#ifndef imported_SODataV4__ExpandItemList_public
#define imported_SODataV4__ExpandItemList_public
/// @internal
///
@interface SODataV4_ExpandItemList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ExpandItemList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ExpandItemList*) new;
/// @brief Construct a new list with `SODataV4_ExpandItemList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ExpandItemList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ExpandItem*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ExpandItemList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ExpandItemList*) addThis :(nonnull SODataV4_ExpandItem*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ExpandItemList*) copy;
/// @brief An immutable empty `SODataV4_ExpandItemList`.
///
///
+ (nonnull SODataV4_ExpandItemList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ExpandItem*) first;
/// @return The first item (if any) for `property`, otherwise `nil`.
/// @param property Property to be search for in items.
- (nullable SODataV4_ExpandItem*) forProperty :(nonnull SODataV4_Property*)property;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ExpandItemList`.`length` - 1).
- (nonnull SODataV4_ExpandItem*) get :(SODataV4_int)index;
/// @return `true` if this list has an item for `property`.
/// @param property Property to be search for in items.
- (SODataV4_boolean) hasProperty :(nonnull SODataV4_Property*)property;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ExpandItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ExpandItem`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ExpandItem*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ExpandItem*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ExpandItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ExpandItem`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ExpandItem*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ExpandItemList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ExpandItemList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ExpandItemList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ExpandItem*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ExpandItem*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ExpandItem*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ExpandItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ExpandItem`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ExpandItem*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ExpandItem*)item;
/// @brief Return a new `SODataV4_ExpandItemList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ExpandItem` will be removed.
///
/// @return A new list of item type `SODataV4_ExpandItem`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ExpandItemList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ExpandItem*) single;
/// @internal
///
- (nonnull SODataV4_ExpandItemList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ExpandItemList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ExpandItemList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ExpandItemList* empty;
@end
#endif

#ifndef imported_SODataV4__FloatList_public
#define imported_SODataV4__FloatList_public
/// @internal
///
@interface SODataV4_FloatList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_FloatList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_FloatList*) new;
/// @brief Construct a new list with `SODataV4_FloatList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_FloatList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_float)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_FloatList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_FloatList*) addThis :(SODataV4_float)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_FloatList*) copy;
/// @brief An immutable empty `SODataV4_FloatList`.
///
///
+ (nonnull SODataV4_FloatList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_float) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_FloatList`.`length` - 1).
- (SODataV4_float) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_FloatList`.`equality` property, which would usually be expected to match the `==` operator for item type `float`.
- (SODataV4_boolean) includes :(SODataV4_float)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_float)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_FloatList`.`equality` property, which would usually be expected to match the `==` operator for item type `float`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_float)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_FloatList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_FloatList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_FloatList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_float)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_float) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_float)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_FloatList`.`equality` property, which would usually be expected to match the `==` operator for item type `float`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_float)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_float)item;
/// @brief Return a new `SODataV4_FloatList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `float` will be removed.
///
/// @return A new list of item type `float`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_FloatList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_float) single;
/// @internal
///
- (nonnull SODataV4_FloatList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_FloatList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_FloatList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_FloatList* empty;
@end
#endif

#ifndef imported_SODataV4__GeographyValue_public
#define imported_SODataV4__GeographyValue_public
/// @brief Abstract base class for geography data values.
///
///
/// @see `SODataV4_GeographyPoint`, `SODataV4_GeographyMultiPoint`, `SODataV4_GeographyLineString`, `SODataV4_GeographyMultiLineString`, `SODataV4_GeographyPolygon`, `SODataV4_GeographyMultiPolygon`, `SODataV4_GeographyCollection`.
@interface SODataV4_GeographyValue : SODataV4_GeospatialValue
{
    @private SODataV4_int _srsCode;
    @private NSString* _Nullable _srsName;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_GeographyValue*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyValue*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyValue*) castRequired :(nullable SODataV4_DataValue*)value;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @brief Parse a geography value from [GeoJSON](http://geojson.org) format.
///
///
/// @return Geography value.
/// @param text A value in GeoJSON format.
/// @param type A `SODataV4_DataType`.`isGeography`.
+ (nonnull SODataV4_GeographyValue*) parseAny :(nonnull NSString*)text :(nonnull SODataV4_DataType*)type;
/// @internal
///
+ (nonnull SODataV4_GeographyValue*) parseAnyWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyValue*) parseAnyWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID. Defaults to 4326.
///
///
- (void) setSrsCode :(SODataV4_int)value;
/// @brief Spatial Reference System Name (optional).
///
///
- (void) setSrsName :(nullable NSString*)value;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID. Defaults to 4326.
///
///
- (SODataV4_int) srsCode;
/// @brief Spatial Reference System Name (optional).
///
///
- (nullable NSString*) srsName;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_GeographyValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
#define SODataV4_GeographyValue_DEFAULT_SRID 4326
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID. Defaults to 4326.
///
///
@property (nonatomic, readwrite) SODataV4_int srsCode;
/// @brief Spatial Reference System Name (optional).
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* srsName;
@end
#endif

#ifdef import_SODataV4__GeographyValue_private
#ifndef imported_SODataV4__GeographyValue_private
#define imported_SODataV4__GeographyValue_private
@interface SODataV4_GeographyValue (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyValueList_public
#define imported_SODataV4__GeographyValueList_public
/// @brief A list of item type `SODataV4_GeographyValue`.
///
///
@interface SODataV4_GeographyValueList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_GeographyValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_GeographyValueList*) new;
/// @brief Construct a new list with `SODataV4_GeographyValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_GeographyValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_GeographyValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_GeographyValueList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_GeographyValueList*) addThis :(nonnull SODataV4_GeographyValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_GeographyValueList*) copy;
/// @brief An immutable empty `SODataV4_GeographyValueList`.
///
///
+ (nonnull SODataV4_GeographyValueList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GeographyValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GeographyValueList`.`length` - 1).
- (nonnull SODataV4_GeographyValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_GeographyValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GeographyValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_GeographyValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_GeographyValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GeographyValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GeographyValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_GeographyValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GeographyValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_GeographyValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GeographyValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_GeographyValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GeographyValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GeographyValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GeographyValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GeographyValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GeographyValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_GeographyValue*)item;
/// @brief Return a new `SODataV4_GeographyValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_GeographyValue` will be removed.
///
/// @return A new list of item type `SODataV4_GeographyValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_GeographyValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_GeographyValue*) single;
/// @internal
///
- (nonnull SODataV4_GeographyValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_GeographyValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_GeographyValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_GeographyValueList* empty;
@end
#endif

#ifndef imported_SODataV4__GeometryValue_public
#define imported_SODataV4__GeometryValue_public
/// @brief Abstract base class for geometry data values.
///
///
/// @see `SODataV4_GeometryPoint`, `SODataV4_GeometryMultiPoint`, `SODataV4_GeometryLineString`, `SODataV4_GeometryMultiLineString`, `SODataV4_GeometryPolygon`, `SODataV4_GeometryMultiPolygon`, `SODataV4_GeometryCollection`.
@interface SODataV4_GeometryValue : SODataV4_GeospatialValue
{
    @private SODataV4_int _srsCode;
    @private NSString* _Nullable _srsName;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_GeometryValue*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryValue*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryValue*) castRequired :(nullable SODataV4_DataValue*)value;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @brief Parse a geometry value from [GeoJSON](http://geojson.org) format.
///
///
/// @return Geometry value.
/// @param text A value in GeoJSON format.
/// @param type A `SODataV4_DataType`.`isGeometry`.
+ (nonnull SODataV4_GeometryValue*) parseAny :(nonnull NSString*)text :(nonnull SODataV4_DataType*)type;
/// @internal
///
+ (nonnull SODataV4_GeometryValue*) parseAnyWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryValue*) parseAnyWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID. Defaults to 0.
///
///
- (void) setSrsCode :(SODataV4_int)value;
/// @brief Spatial Reference System Name (optional).
///
///
- (void) setSrsName :(nullable NSString*)value;
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID. Defaults to 0.
///
///
- (SODataV4_int) srsCode;
/// @brief Spatial Reference System Name (optional).
///
///
- (nullable NSString*) srsName;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_GeometryValue`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @return 2D geometry point.
/// @param latitude Y-coordinate.
/// @param longitude X-coordinate.
+ (nonnull SODataV4_GeometryPoint*) withLatitudeLongitude :(SODataV4_double)latitude :(SODataV4_double)longitude;
/// @return 2D geometry point.
/// @param x X-coordinate.
/// @param y Y-coordinate.
+ (nonnull SODataV4_GeometryPoint*) withXY :(SODataV4_double)x :(SODataV4_double)y;
/// @return 2D geometry point with measure.
/// @param x X-coordinate.
/// @param y Y-coordinate.
/// @param m M-coordinate (measure).
+ (nonnull SODataV4_GeometryPoint*) withXYM :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)m;
/// @return 3D geometry point.
/// @param x X-coordinate.
/// @param y Y-coordinate.
/// @param z Z-coordinate.
+ (nonnull SODataV4_GeometryPoint*) withXYZ :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)z;
/// @return 3D geometry point with measure.
/// @param x X-coordinate.
/// @param y Y-coordinate.
/// @param z Z-coordinate.
/// @param m M-coordinate (measure).
+ (nonnull SODataV4_GeometryPoint*) withXYZM :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)z :(SODataV4_double)m;
#define SODataV4_GeometryValue_DEFAULT_SRID 0
/// @brief Spatial Reference System Code, e.g. [EPSG](http://www.epsg.org/Geodetic.html) SRID. Defaults to 0.
///
///
@property (nonatomic, readwrite) SODataV4_int srsCode;
/// @brief Spatial Reference System Name (optional).
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* srsName;
@end
#endif

#ifdef import_SODataV4__GeometryValue_private
#ifndef imported_SODataV4__GeometryValue_private
#define imported_SODataV4__GeometryValue_private
@interface SODataV4_GeometryValue (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryPoint*) _new2 :(nonnull SODataV4_PointCoordinates*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryValueList_public
#define imported_SODataV4__GeometryValueList_public
/// @brief A list of item type `SODataV4_GeometryValue`.
///
///
@interface SODataV4_GeometryValueList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_GeometryValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_GeometryValueList*) new;
/// @brief Construct a new list with `SODataV4_GeometryValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_GeometryValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_GeometryValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_GeometryValueList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_GeometryValueList*) addThis :(nonnull SODataV4_GeometryValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_GeometryValueList*) copy;
/// @brief An immutable empty `SODataV4_GeometryValueList`.
///
///
+ (nonnull SODataV4_GeometryValueList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GeometryValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GeometryValueList`.`length` - 1).
- (nonnull SODataV4_GeometryValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_GeometryValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GeometryValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_GeometryValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_GeometryValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GeometryValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GeometryValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_GeometryValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GeometryValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_GeometryValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GeometryValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_GeometryValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GeometryValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GeometryValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GeometryValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GeometryValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GeometryValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_GeometryValue*)item;
/// @brief Return a new `SODataV4_GeometryValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_GeometryValue` will be removed.
///
/// @return A new list of item type `SODataV4_GeometryValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_GeometryValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_GeometryValue*) single;
/// @internal
///
- (nonnull SODataV4_GeometryValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_GeometryValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_GeometryValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_GeometryValueList* empty;
@end
#endif

#ifndef imported_SODataV4__GlobalDateTimeList_public
#define imported_SODataV4__GlobalDateTimeList_public
/// @internal
///
@interface SODataV4_GlobalDateTimeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_GlobalDateTimeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_GlobalDateTimeList*) new;
/// @brief Construct a new list with `SODataV4_GlobalDateTimeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_GlobalDateTimeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_GlobalDateTime*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_GlobalDateTimeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_GlobalDateTimeList*) addThis :(nonnull SODataV4_GlobalDateTime*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_GlobalDateTimeList*) copy;
/// @brief An immutable empty `SODataV4_GlobalDateTimeList`.
///
///
+ (nonnull SODataV4_GlobalDateTimeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GlobalDateTime*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GlobalDateTimeList`.`length` - 1).
- (nonnull SODataV4_GlobalDateTime*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_GlobalDateTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GlobalDateTime`.
- (SODataV4_boolean) includes :(nonnull SODataV4_GlobalDateTime*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_GlobalDateTime*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GlobalDateTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GlobalDateTime`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_GlobalDateTime*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GlobalDateTimeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_GlobalDateTimeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GlobalDateTimeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_GlobalDateTime*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GlobalDateTime*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GlobalDateTime*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GlobalDateTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GlobalDateTime`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GlobalDateTime*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_GlobalDateTime*)item;
/// @brief Return a new `SODataV4_GlobalDateTimeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_GlobalDateTime` will be removed.
///
/// @return A new list of item type `SODataV4_GlobalDateTime`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_GlobalDateTimeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_GlobalDateTime*) single;
/// @internal
///
- (nonnull SODataV4_GlobalDateTimeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_GlobalDateTimeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_GlobalDateTimeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_GlobalDateTimeList* empty;
@end
#endif

#ifndef imported_SODataV4__GuidValueList_public
#define imported_SODataV4__GuidValueList_public
/// @internal
///
@interface SODataV4_GuidValueList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_GuidValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_GuidValueList*) new;
/// @brief Construct a new list with `SODataV4_GuidValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_GuidValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_GuidValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_GuidValueList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_GuidValueList*) addThis :(nonnull SODataV4_GuidValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_GuidValueList*) copy;
/// @brief An immutable empty `SODataV4_GuidValueList`.
///
///
+ (nonnull SODataV4_GuidValueList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GuidValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GuidValueList`.`length` - 1).
- (nonnull SODataV4_GuidValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_GuidValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GuidValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_GuidValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_GuidValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GuidValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GuidValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_GuidValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GuidValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_GuidValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_GuidValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_GuidValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_GuidValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GuidValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_GuidValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_GuidValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_GuidValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_GuidValue*)item;
/// @brief Return a new `SODataV4_GuidValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_GuidValue` will be removed.
///
/// @return A new list of item type `SODataV4_GuidValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_GuidValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_GuidValue*) single;
/// @internal
///
- (nonnull SODataV4_GuidValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_GuidValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_GuidValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_GuidValueList* empty;
@end
#endif

#ifndef imported_SODataV4__IntList_public
#define imported_SODataV4__IntList_public
/// @internal
///
@interface SODataV4_IntList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_IntList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_IntList*) new;
/// @brief Construct a new list with `SODataV4_IntList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_IntList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_int)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_IntList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_IntList*) addThis :(SODataV4_int)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_IntList*) copy;
/// @brief An immutable empty `SODataV4_IntList`.
///
///
+ (nonnull SODataV4_IntList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_int) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_IntList`.`length` - 1).
- (SODataV4_int) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_IntList`.`equality` property, which would usually be expected to match the `==` operator for item type `int`.
- (SODataV4_boolean) includes :(SODataV4_int)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_int)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_IntList`.`equality` property, which would usually be expected to match the `==` operator for item type `int`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_int)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_IntList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_IntList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_IntList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_int)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_int) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_int)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_IntList`.`equality` property, which would usually be expected to match the `==` operator for item type `int`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_int)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_int)item;
/// @brief Return a new `SODataV4_IntList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `int` will be removed.
///
/// @return A new list of item type `int`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_IntList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_int) single;
/// @internal
///
- (nonnull SODataV4_IntList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_IntList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_IntList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_IntList* empty;
@end
#endif

#ifndef imported_SODataV4__IntegerList_public
#define imported_SODataV4__IntegerList_public
/// @internal
///
@interface SODataV4_IntegerList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_IntegerList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_IntegerList*) new;
/// @brief Construct a new list with `SODataV4_IntegerList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_IntegerList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_BigInteger*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_IntegerList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_IntegerList*) addThis :(nonnull SODataV4_BigInteger*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_IntegerList*) copy;
/// @brief An immutable empty `SODataV4_IntegerList`.
///
///
+ (nonnull SODataV4_IntegerList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_BigInteger*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_IntegerList`.`length` - 1).
- (nonnull SODataV4_BigInteger*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_IntegerList`.`equality` property, which would usually be expected to match the `==` operator for item type `integer`.
- (SODataV4_boolean) includes :(nonnull SODataV4_BigInteger*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_BigInteger*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_IntegerList`.`equality` property, which would usually be expected to match the `==` operator for item type `integer`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_BigInteger*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_IntegerList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_IntegerList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_IntegerList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_BigInteger*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_BigInteger*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_BigInteger*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_IntegerList`.`equality` property, which would usually be expected to match the `==` operator for item type `integer`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_BigInteger*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_BigInteger*)item;
/// @brief Return a new `SODataV4_IntegerList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `integer` will be removed.
///
/// @return A new list of item type `integer`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_IntegerList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_BigInteger*) single;
/// @internal
///
- (nonnull SODataV4_IntegerList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_IntegerList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_IntegerList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_IntegerList* empty;
@end
#endif

#ifndef imported_SODataV4__LineStringCoordinates_public
#define imported_SODataV4__LineStringCoordinates_public
/// @brief A list of item type `SODataV4_PointCoordinates`.
///
///
@interface SODataV4_LineStringCoordinates : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_LineStringCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_LineStringCoordinates*) new;
/// @brief Construct a new list with `SODataV4_LineStringCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_LineStringCoordinates*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PointCoordinates*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_LineStringCoordinates*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_LineStringCoordinates*) addThis :(nonnull SODataV4_PointCoordinates*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_LineStringCoordinates*) copy;
/// @brief An immutable empty `SODataV4_LineStringCoordinates`.
///
///
+ (nonnull SODataV4_LineStringCoordinates*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PointCoordinates*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LineStringCoordinates`.`length` - 1).
- (nonnull SODataV4_PointCoordinates*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_LineStringCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PointCoordinates`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PointCoordinates*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PointCoordinates*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LineStringCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PointCoordinates`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PointCoordinates*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LineStringCoordinates`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_LineStringCoordinates*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LineStringCoordinates`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PointCoordinates*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PointCoordinates*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PointCoordinates*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LineStringCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PointCoordinates`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PointCoordinates*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PointCoordinates*)item;
/// @brief Return a new `SODataV4_LineStringCoordinates` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PointCoordinates` will be removed.
///
/// @return A new list of item type `SODataV4_PointCoordinates`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_LineStringCoordinates*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PointCoordinates*) single;
/// @internal
///
- (nonnull SODataV4_LineStringCoordinates*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_LineStringCoordinates*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_LineStringCoordinates`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LineStringCoordinates* empty;
@end
#endif

#ifdef import_SODataV4__LineStringCoordinates_internal
#ifndef imported_SODataV4__LineStringCoordinates_internal
#define imported_SODataV4__LineStringCoordinates_internal
@interface SODataV4_LineStringCoordinates (internal)
/// @internal
///
- (nonnull NSString*) formatWKT;
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired;
/// @internal
///
+ (nonnull SODataV4_LineStringCoordinates*) parseWKT :(nonnull NSString*)text;
+ (nonnull SODataV4_LineStringCoordinates*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)kindRequired;
@end
#endif
#endif

#ifndef imported_SODataV4__LocalDateList_public
#define imported_SODataV4__LocalDateList_public
/// @internal
///
@interface SODataV4_LocalDateList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_LocalDateList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_LocalDateList*) new;
/// @brief Construct a new list with `SODataV4_LocalDateList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_LocalDateList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_LocalDate*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_LocalDateList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_LocalDateList*) addThis :(nonnull SODataV4_LocalDate*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_LocalDateList*) copy;
/// @brief An immutable empty `SODataV4_LocalDateList`.
///
///
+ (nonnull SODataV4_LocalDateList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LocalDate*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalDateList`.`length` - 1).
- (nonnull SODataV4_LocalDate*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalDateList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalDate`.
- (SODataV4_boolean) includes :(nonnull SODataV4_LocalDate*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_LocalDate*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalDateList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalDate`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_LocalDate*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalDateList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_LocalDateList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalDateList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_LocalDate*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LocalDate*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LocalDate*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalDateList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalDate`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LocalDate*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_LocalDate*)item;
/// @brief Return a new `SODataV4_LocalDateList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_LocalDate` will be removed.
///
/// @return A new list of item type `SODataV4_LocalDate`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_LocalDateList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_LocalDate*) single;
/// @internal
///
- (nonnull SODataV4_LocalDateList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_LocalDateList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_LocalDateList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LocalDateList* empty;
@end
#endif

#ifndef imported_SODataV4__LocalDateTimeList_public
#define imported_SODataV4__LocalDateTimeList_public
/// @internal
///
@interface SODataV4_LocalDateTimeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_LocalDateTimeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_LocalDateTimeList*) new;
/// @brief Construct a new list with `SODataV4_LocalDateTimeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_LocalDateTimeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_LocalDateTime*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_LocalDateTimeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_LocalDateTimeList*) addThis :(nonnull SODataV4_LocalDateTime*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_LocalDateTimeList*) copy;
/// @brief An immutable empty `SODataV4_LocalDateTimeList`.
///
///
+ (nonnull SODataV4_LocalDateTimeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LocalDateTime*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalDateTimeList`.`length` - 1).
- (nonnull SODataV4_LocalDateTime*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalDateTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalDateTime`.
- (SODataV4_boolean) includes :(nonnull SODataV4_LocalDateTime*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_LocalDateTime*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalDateTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalDateTime`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_LocalDateTime*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalDateTimeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_LocalDateTimeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalDateTimeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_LocalDateTime*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LocalDateTime*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LocalDateTime*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalDateTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalDateTime`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LocalDateTime*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_LocalDateTime*)item;
/// @brief Return a new `SODataV4_LocalDateTimeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_LocalDateTime` will be removed.
///
/// @return A new list of item type `SODataV4_LocalDateTime`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_LocalDateTimeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_LocalDateTime*) single;
/// @internal
///
- (nonnull SODataV4_LocalDateTimeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_LocalDateTimeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_LocalDateTimeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LocalDateTimeList* empty;
@end
#endif

#ifndef imported_SODataV4__LocalTimeList_public
#define imported_SODataV4__LocalTimeList_public
/// @internal
///
@interface SODataV4_LocalTimeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_LocalTimeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_LocalTimeList*) new;
/// @brief Construct a new list with `SODataV4_LocalTimeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_LocalTimeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_LocalTime*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_LocalTimeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_LocalTimeList*) addThis :(nonnull SODataV4_LocalTime*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_LocalTimeList*) copy;
/// @brief An immutable empty `SODataV4_LocalTimeList`.
///
///
+ (nonnull SODataV4_LocalTimeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LocalTime*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalTimeList`.`length` - 1).
- (nonnull SODataV4_LocalTime*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalTime`.
- (SODataV4_boolean) includes :(nonnull SODataV4_LocalTime*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_LocalTime*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalTime`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_LocalTime*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalTimeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_LocalTimeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LocalTimeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_LocalTime*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LocalTime*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LocalTime*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LocalTimeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LocalTime`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LocalTime*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_LocalTime*)item;
/// @brief Return a new `SODataV4_LocalTimeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_LocalTime` will be removed.
///
/// @return A new list of item type `SODataV4_LocalTime`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_LocalTimeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_LocalTime*) single;
/// @internal
///
- (nonnull SODataV4_LocalTimeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_LocalTimeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_LocalTimeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LocalTimeList* empty;
@end
#endif

#ifndef imported_SODataV4__LongList_public
#define imported_SODataV4__LongList_public
/// @internal
///
@interface SODataV4_LongList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_LongList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_LongList*) new;
/// @brief Construct a new list with `SODataV4_LongList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_LongList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_long)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_LongList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_LongList*) addThis :(SODataV4_long)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_LongList*) copy;
/// @brief An immutable empty `SODataV4_LongList`.
///
///
+ (nonnull SODataV4_LongList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_long) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LongList`.`length` - 1).
- (SODataV4_long) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_LongList`.`equality` property, which would usually be expected to match the `==` operator for item type `long`.
- (SODataV4_boolean) includes :(SODataV4_long)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_long)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LongList`.`equality` property, which would usually be expected to match the `==` operator for item type `long`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_long)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LongList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_LongList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_LongList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_long)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_long) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_long)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_LongList`.`equality` property, which would usually be expected to match the `==` operator for item type `long`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_long)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_long)item;
/// @brief Return a new `SODataV4_LongList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `long` will be removed.
///
/// @return A new list of item type `long`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_LongList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_long) single;
/// @internal
///
- (nonnull SODataV4_LongList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_LongList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_LongList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_LongList* empty;
@end
#endif

#ifndef imported_SODataV4__MultiLineStringCoordinates_public
#define imported_SODataV4__MultiLineStringCoordinates_public
/// @brief A list of item type `SODataV4_LineStringCoordinates`.
///
///
@interface SODataV4_MultiLineStringCoordinates : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_MultiLineStringCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_MultiLineStringCoordinates*) new;
/// @brief Construct a new list with `SODataV4_MultiLineStringCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_MultiLineStringCoordinates*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_LineStringCoordinates*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_MultiLineStringCoordinates*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_MultiLineStringCoordinates*) addThis :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_MultiLineStringCoordinates*) copy;
/// @brief An immutable empty `SODataV4_MultiLineStringCoordinates`.
///
///
+ (nonnull SODataV4_MultiLineStringCoordinates*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LineStringCoordinates*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiLineStringCoordinates`.`length` - 1).
- (nonnull SODataV4_LineStringCoordinates*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiLineStringCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LineStringCoordinates`.
- (SODataV4_boolean) includes :(nonnull SODataV4_LineStringCoordinates*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiLineStringCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LineStringCoordinates`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_LineStringCoordinates*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiLineStringCoordinates`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_MultiLineStringCoordinates*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiLineStringCoordinates`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LineStringCoordinates*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiLineStringCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LineStringCoordinates`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LineStringCoordinates*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_LineStringCoordinates*)item;
/// @brief Return a new `SODataV4_MultiLineStringCoordinates` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_LineStringCoordinates` will be removed.
///
/// @return A new list of item type `SODataV4_LineStringCoordinates`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_MultiLineStringCoordinates*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_LineStringCoordinates*) single;
/// @internal
///
- (nonnull SODataV4_MultiLineStringCoordinates*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_MultiLineStringCoordinates*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_MultiLineStringCoordinates`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_MultiLineStringCoordinates* empty;
@end
#endif

#ifdef import_SODataV4__MultiLineStringCoordinates_internal
#ifndef imported_SODataV4__MultiLineStringCoordinates_internal
#define imported_SODataV4__MultiLineStringCoordinates_internal
@interface SODataV4_MultiLineStringCoordinates (internal)
/// @internal
///
- (nonnull NSString*) formatWKT;
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired;
/// @internal
///
+ (nonnull SODataV4_MultiLineStringCoordinates*) parseWKT :(nonnull NSString*)text;
+ (nonnull SODataV4_MultiLineStringCoordinates*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)kindRequired;
@end
#endif
#endif

#ifndef imported_SODataV4__MultiPointCoordinates_public
#define imported_SODataV4__MultiPointCoordinates_public
/// @brief A list of item type `SODataV4_PointCoordinates`.
///
///
@interface SODataV4_MultiPointCoordinates : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_MultiPointCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_MultiPointCoordinates*) new;
/// @brief Construct a new list with `SODataV4_MultiPointCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_MultiPointCoordinates*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PointCoordinates*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_MultiPointCoordinates*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_MultiPointCoordinates*) addThis :(nonnull SODataV4_PointCoordinates*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_MultiPointCoordinates*) copy;
/// @brief An immutable empty `SODataV4_MultiPointCoordinates`.
///
///
+ (nonnull SODataV4_MultiPointCoordinates*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PointCoordinates*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiPointCoordinates`.`length` - 1).
- (nonnull SODataV4_PointCoordinates*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiPointCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PointCoordinates`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PointCoordinates*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PointCoordinates*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiPointCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PointCoordinates`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PointCoordinates*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiPointCoordinates`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_MultiPointCoordinates*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiPointCoordinates`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PointCoordinates*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PointCoordinates*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PointCoordinates*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiPointCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PointCoordinates`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PointCoordinates*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PointCoordinates*)item;
/// @brief Return a new `SODataV4_MultiPointCoordinates` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PointCoordinates` will be removed.
///
/// @return A new list of item type `SODataV4_PointCoordinates`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_MultiPointCoordinates*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PointCoordinates*) single;
/// @internal
///
- (nonnull SODataV4_MultiPointCoordinates*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_MultiPointCoordinates*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_MultiPointCoordinates`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_MultiPointCoordinates* empty;
@end
#endif

#ifdef import_SODataV4__MultiPointCoordinates_internal
#ifndef imported_SODataV4__MultiPointCoordinates_internal
#define imported_SODataV4__MultiPointCoordinates_internal
@interface SODataV4_MultiPointCoordinates (internal)
/// @internal
///
- (nonnull NSString*) formatWKT;
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired;
/// @internal
///
+ (nonnull SODataV4_MultiPointCoordinates*) parseWKT :(nonnull NSString*)text;
+ (nonnull SODataV4_MultiPointCoordinates*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)kindRequired;
@end
#endif
#endif

#ifndef imported_SODataV4__MultiPolygonCoordinates_public
#define imported_SODataV4__MultiPolygonCoordinates_public
/// @brief A list of item type `SODataV4_PolygonCoordinates`.
///
///
@interface SODataV4_MultiPolygonCoordinates : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_MultiPolygonCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_MultiPolygonCoordinates*) new;
/// @brief Construct a new list with `SODataV4_MultiPolygonCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_MultiPolygonCoordinates*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PolygonCoordinates*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_MultiPolygonCoordinates*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_MultiPolygonCoordinates*) addThis :(nonnull SODataV4_PolygonCoordinates*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_MultiPolygonCoordinates*) copy;
/// @brief An immutable empty `SODataV4_MultiPolygonCoordinates`.
///
///
+ (nonnull SODataV4_MultiPolygonCoordinates*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PolygonCoordinates*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiPolygonCoordinates`.`length` - 1).
- (nonnull SODataV4_PolygonCoordinates*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiPolygonCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PolygonCoordinates`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PolygonCoordinates*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PolygonCoordinates*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiPolygonCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PolygonCoordinates`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PolygonCoordinates*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiPolygonCoordinates`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_MultiPolygonCoordinates*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_MultiPolygonCoordinates`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PolygonCoordinates*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PolygonCoordinates*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PolygonCoordinates*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_MultiPolygonCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PolygonCoordinates`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PolygonCoordinates*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PolygonCoordinates*)item;
/// @brief Return a new `SODataV4_MultiPolygonCoordinates` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PolygonCoordinates` will be removed.
///
/// @return A new list of item type `SODataV4_PolygonCoordinates`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_MultiPolygonCoordinates*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PolygonCoordinates*) single;
/// @internal
///
- (nonnull SODataV4_MultiPolygonCoordinates*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_MultiPolygonCoordinates*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_MultiPolygonCoordinates`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_MultiPolygonCoordinates* empty;
@end
#endif

#ifdef import_SODataV4__MultiPolygonCoordinates_internal
#ifndef imported_SODataV4__MultiPolygonCoordinates_internal
#define imported_SODataV4__MultiPolygonCoordinates_internal
@interface SODataV4_MultiPolygonCoordinates (internal)
/// @internal
///
- (nonnull NSString*) formatWKT;
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired;
/// @internal
///
+ (nonnull SODataV4_MultiPolygonCoordinates*) parseWKT :(nonnull NSString*)text;
+ (nonnull SODataV4_MultiPolygonCoordinates*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)kindRequired;
@end
#endif
#endif

#ifndef imported_SODataV4__ObjectList_public
#define imported_SODataV4__ObjectList_public
/// @internal
///
@interface SODataV4_ObjectList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ObjectList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ObjectList*) new;
/// @brief Construct a new list with `SODataV4_ObjectList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ObjectList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull NSObject*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ObjectList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ObjectList*) addThis :(nonnull NSObject*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ObjectList*) copy;
/// @brief An immutable empty `SODataV4_ObjectList`.
///
///
+ (nonnull SODataV4_ObjectList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull NSObject*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ObjectList`.`length` - 1).
- (nonnull NSObject*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ObjectList`.`equality` property, which would usually be expected to match the `==` operator for item type `object`.
- (SODataV4_boolean) includes :(nonnull NSObject*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull NSObject*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ObjectList`.`equality` property, which would usually be expected to match the `==` operator for item type `object`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull NSObject*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ObjectList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ObjectList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ObjectList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull NSObject*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull NSObject*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull NSObject*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ObjectList`.`equality` property, which would usually be expected to match the `==` operator for item type `object`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull NSObject*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull NSObject*)item;
/// @brief Return a new `SODataV4_ObjectList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `object` will be removed.
///
/// @return A new list of item type `object`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ObjectList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull NSObject*) single;
/// @internal
///
- (nonnull SODataV4_ObjectList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ObjectList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ObjectList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ObjectList* empty;
@end
#endif

#ifndef imported_SODataV4__ObjectMap_EntryList_public
#define imported_SODataV4__ObjectMap_EntryList_public
/// @brief A list of item type `SODataV4_ObjectMap_Entry`.
///
///
@interface SODataV4_ObjectMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ObjectMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ObjectMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_ObjectMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ObjectMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ObjectMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ObjectMap_EntryList*) addThis :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ObjectMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_ObjectMap_EntryList`.
///
///
+ (nonnull SODataV4_ObjectMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ObjectMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ObjectMap_EntryList`.`length` - 1).
- (nonnull SODataV4_ObjectMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ObjectMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ObjectMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ObjectMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ObjectMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_ObjectMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ObjectMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ObjectMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ObjectMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_ObjectMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ObjectMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_ObjectMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_ObjectMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_ObjectMap_Entry*)item;
/// @brief Return a new `SODataV4_ObjectMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_ObjectMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_ObjectMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ObjectMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_ObjectMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_ObjectMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ObjectMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_ObjectMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ObjectMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__ParameterList_public
#define imported_SODataV4__ParameterList_public
/// @brief A list of item type `SODataV4_Parameter`.
///
///
@interface SODataV4_ParameterList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ParameterList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ParameterList*) new;
/// @brief Construct a new list with `SODataV4_ParameterList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ParameterList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_Parameter*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ParameterList*)list;
/// @brief Add a formal parameter.
///
///
/// @param name Parameter name.
/// @param type Parameter type.
/// @see `SODataV4_ParameterList`.`with`.
- (void) addFormal :(nonnull NSString*)name :(nonnull SODataV4_DataType*)type;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ParameterList*) addThis :(nonnull SODataV4_Parameter*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ParameterList*) copy;
/// @brief An immutable empty `SODataV4_ParameterList`.
///
///
+ (nonnull SODataV4_ParameterList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_Parameter*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ParameterList`.`length` - 1).
- (nonnull SODataV4_Parameter*) get :(SODataV4_int)index;
/// @return the value of a required parameter, or throw `SODataV4_DataServiceException` with status 400 (Client Error) if the parameter is missing.
/// @param name Required parameter name.
- (nullable SODataV4_DataValue*) getRequired :(nonnull NSString*)name;
/// @return the value of a required parameter with list type, or throw `SODataV4_DataServiceException` with status 400 (Client Error) if the parameter is missing.
/// @param name Required parameter name.
- (nonnull SODataV4_ListBase*) getRequiredList :(nonnull NSString*)name;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ParameterList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Parameter`.
- (SODataV4_boolean) includes :(nonnull SODataV4_Parameter*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_Parameter*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ParameterList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Parameter`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_Parameter*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ParameterList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ParameterList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ParameterList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_Parameter*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_Parameter*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_Parameter*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ParameterList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Parameter`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_Parameter*)item :(SODataV4_int)start;
/// @brief Removed the parameter with the specified `name`.
///
///
/// @return `true` if a parameter with the specified name was found (and removed), otherwise false.
/// @param name Name of parameter to be removed.
- (SODataV4_boolean) remove :(nonnull NSString*)name;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_Parameter*)item;
/// @brief Return a new `SODataV4_ParameterList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_Parameter` will be removed.
///
/// @return A new list of item type `SODataV4_Parameter`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ParameterList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_Parameter*) single;
/// @internal
///
- (nonnull SODataV4_ParameterList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ParameterList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return This list after adding an actual parameter.
/// @param name Parameter name.
/// @param value Parameter value.
/// @see `SODataV4_ParameterList`.`add`.
- (nonnull SODataV4_ParameterList*) with :(nonnull NSString*)name :(nullable SODataV4_DataValue*)value;
/// @brief An immutable empty `SODataV4_ParameterList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ParameterList* empty;
@end
#endif

#ifdef import_SODataV4__ParameterList_private
#ifndef imported_SODataV4__ParameterList_private
#define imported_SODataV4__ParameterList_private
@interface SODataV4_ParameterList (private)
+ (nonnull SODataV4_Parameter*) _new1 :(nonnull NSString*)p1 :(nonnull SODataV4_DataType*)p2;
+ (nonnull SODataV4_Parameter*) _new2 :(nonnull NSString*)p1 :(nullable SODataV4_DataValue*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__PathAnnotationsList_public
#define imported_SODataV4__PathAnnotationsList_public
/// @internal
///
@interface SODataV4_PathAnnotationsList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PathAnnotationsList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PathAnnotationsList*) new;
/// @brief Construct a new list with `SODataV4_PathAnnotationsList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PathAnnotationsList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PathAnnotations*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PathAnnotationsList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PathAnnotationsList*) addThis :(nonnull SODataV4_PathAnnotations*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PathAnnotationsList*) copy;
/// @brief An immutable empty `SODataV4_PathAnnotationsList`.
///
///
+ (nonnull SODataV4_PathAnnotationsList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PathAnnotations*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PathAnnotationsList`.`length` - 1).
- (nonnull SODataV4_PathAnnotations*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PathAnnotationsList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PathAnnotations`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PathAnnotations*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PathAnnotations*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PathAnnotationsList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PathAnnotations`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PathAnnotations*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PathAnnotationsList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PathAnnotationsList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PathAnnotationsList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PathAnnotations*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PathAnnotations*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PathAnnotations*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PathAnnotationsList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PathAnnotations`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PathAnnotations*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PathAnnotations*)item;
/// @brief Return a new `SODataV4_PathAnnotationsList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PathAnnotations` will be removed.
///
/// @return A new list of item type `SODataV4_PathAnnotations`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PathAnnotationsList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PathAnnotations*) single;
/// @internal
///
- (nonnull SODataV4_PathAnnotationsList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PathAnnotationsList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_PathAnnotationsList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PathAnnotationsList* empty;
@end
#endif

#ifndef imported_SODataV4__PathAnnotationsMap_EntryList_public
#define imported_SODataV4__PathAnnotationsMap_EntryList_public
/// @brief A list of item type `SODataV4_PathAnnotationsMap_Entry`.
///
///
@interface SODataV4_PathAnnotationsMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PathAnnotationsMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PathAnnotationsMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_PathAnnotationsMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PathAnnotationsMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PathAnnotationsMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PathAnnotationsMap_EntryList*) addThis :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PathAnnotationsMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_PathAnnotationsMap_EntryList`.
///
///
+ (nonnull SODataV4_PathAnnotationsMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PathAnnotationsMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PathAnnotationsMap_EntryList`.`length` - 1).
- (nonnull SODataV4_PathAnnotationsMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PathAnnotationsMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PathAnnotationsMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PathAnnotationsMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PathAnnotationsMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PathAnnotationsMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PathAnnotationsMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PathAnnotationsMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PathAnnotationsMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PathAnnotationsMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PathAnnotationsMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PathAnnotationsMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PathAnnotationsMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PathAnnotationsMap_Entry*)item;
/// @brief Return a new `SODataV4_PathAnnotationsMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PathAnnotationsMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_PathAnnotationsMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PathAnnotationsMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PathAnnotationsMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_PathAnnotationsMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PathAnnotationsMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_PathAnnotationsMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PathAnnotationsMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__PointCoordinates_public
#define imported_SODataV4__PointCoordinates_public
/// @brief Represents an N-dimensional point.
///
/// Note that some coordinate reference systems will support only `SODataV4_PointCoordinates`.`x` and `SODataV4_PointCoordinates`.`y` dimensions.
@interface SODataV4_PointCoordinates : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PointCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PointCoordinates*) new;
/// @brief Construct a new list with `SODataV4_PointCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PointCoordinates*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_double)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PointCoordinates*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PointCoordinates*) addThis :(SODataV4_double)item;
/// @brief Synonym for `SODataV4_PointCoordinates`.`z`.
///
///
- (SODataV4_double) altitude;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PointCoordinates*) copy;
/// @brief An immutable empty `SODataV4_PointCoordinates`.
///
///
+ (nonnull SODataV4_PointCoordinates*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_double) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PointCoordinates`.`length` - 1).
- (SODataV4_double) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PointCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `double`.
- (SODataV4_boolean) includes :(SODataV4_double)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_double)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PointCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `double`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_double)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PointCoordinates`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PointCoordinates*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PointCoordinates`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_double)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_double) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_double)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PointCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `double`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_double)item :(SODataV4_int)start;
/// @brief Synonym for `SODataV4_PointCoordinates`.`y`.
///
///
- (SODataV4_double) latitude;
/// @brief Synonym for `SODataV4_PointCoordinates`.`x`.
///
///
- (SODataV4_double) longitude;
/// @brief The `M` dimension (e.g. measure). Equivalent to `this.last()`.
///
/// Use `SODataV4_PointCoordinates`.`withXYM` or `SODataV4_PointCoordinates`.`withXYZM` to obtain point coordinates with an `M` dimension.
- (SODataV4_double) m;
/// @brief Synonym for `SODataV4_PointCoordinates`.`m`.
///
///
- (SODataV4_double) measure;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_double)item;
/// @brief Synonym for `SODataV4_PointCoordinates`.`z`.
///
///
- (void) setAltitude :(SODataV4_double)value;
/// @brief Synonym for `SODataV4_PointCoordinates`.`y`.
///
///
- (void) setLatitude :(SODataV4_double)value;
/// @brief Synonym for `SODataV4_PointCoordinates`.`x`.
///
///
- (void) setLongitude :(SODataV4_double)value;
/// @brief The `X` dimension (e.g. longitude). Equivalent to `this.get(0)`.
///
///
- (void) setX :(SODataV4_double)value;
/// @brief The `Y` dimension (e.g. latitude). Equivalent to `this.get(1)`.
///
///
- (void) setY :(SODataV4_double)value;
/// @brief The `Z` dimension (e.g. altitude). Equivalent to `this.get(2)`.
///
///
- (void) setZ :(SODataV4_double)value;
/// @brief Return a new `SODataV4_PointCoordinates` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `double` will be removed.
///
/// @return A new list of item type `double`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PointCoordinates*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_double) single;
/// @internal
///
- (nonnull SODataV4_PointCoordinates*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PointCoordinates*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return 2D point coordinates.
/// @param latitude Latitude (Y-coordinate).
/// @param longitude Longitude (X-coordinate).
+ (nonnull SODataV4_PointCoordinates*) withLatitudeLongitude :(SODataV4_double)latitude :(SODataV4_double)longitude;
/// @return 2D point coordinates.
/// @param x X-coordinate (longitude for geography points).
/// @param y Y-coordinate (latitude for geography points).
+ (nonnull SODataV4_PointCoordinates*) withXY :(SODataV4_double)x :(SODataV4_double)y;
/// @return 2D point coordinates with measure.
/// @param x X-coordinate (longitude for geography points).
/// @param y Y-coordinate (latitude for geography points).
/// @param m M-coordinate (measure).
+ (nonnull SODataV4_PointCoordinates*) withXYM :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)m;
/// @return 3D point coordinates.
/// @param x X-coordinate (longitude for geography points).
/// @param y Y-coordinate (latitude for geography points).
/// @param z Z-coordinate (altitude for geography points).
+ (nonnull SODataV4_PointCoordinates*) withXYZ :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)z;
/// @return 3D point coordinates with measure.
/// @param x X-coordinate (longitude for geography points).
/// @param y Y-coordinate (latitude for geography points).
/// @param z Z-coordinate (altitude for geography points).
/// @param m M-coordinate (measure).
+ (nonnull SODataV4_PointCoordinates*) withXYZM :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)z :(SODataV4_double)m;
/// @brief The `X` dimension (e.g. longitude). Equivalent to `this.get(0)`.
///
///
- (SODataV4_double) x;
/// @brief The `Y` dimension (e.g. latitude). Equivalent to `this.get(1)`.
///
///
- (SODataV4_double) y;
/// @brief The `Z` dimension (e.g. altitude). Equivalent to `this.get(2)`.
///
///
- (SODataV4_double) z;
/// @brief Synonym for `SODataV4_PointCoordinates`.`z`.
///
///
@property (nonatomic, readwrite) SODataV4_double altitude;
/// @brief An immutable empty `SODataV4_PointCoordinates`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PointCoordinates* empty;
/// @brief Synonym for `SODataV4_PointCoordinates`.`y`.
///
///
@property (nonatomic, readwrite) SODataV4_double latitude;
/// @brief Synonym for `SODataV4_PointCoordinates`.`x`.
///
///
@property (nonatomic, readwrite) SODataV4_double longitude;
/// @brief The `M` dimension (e.g. measure). Equivalent to `this.last()`.
///
/// Use `SODataV4_PointCoordinates`.`withXYM` or `SODataV4_PointCoordinates`.`withXYZM` to obtain point coordinates with an `M` dimension.
@property (nonatomic, readonly) SODataV4_double m;
/// @brief Synonym for `SODataV4_PointCoordinates`.`m`.
///
///
@property (nonatomic, readonly) SODataV4_double measure;
/// @brief The `X` dimension (e.g. longitude). Equivalent to `this.get(0)`.
///
///
@property (nonatomic, readwrite) SODataV4_double x;
/// @brief The `Y` dimension (e.g. latitude). Equivalent to `this.get(1)`.
///
///
@property (nonatomic, readwrite) SODataV4_double y;
/// @brief The `Z` dimension (e.g. altitude). Equivalent to `this.get(2)`.
///
///
@property (nonatomic, readwrite) SODataV4_double z;
@end
#endif

#ifdef import_SODataV4__PointCoordinates_internal
#ifndef imported_SODataV4__PointCoordinates_internal
#define imported_SODataV4__PointCoordinates_internal
@interface SODataV4_PointCoordinates (internal)
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @internal
///
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired;
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired :(SODataV4_boolean)parenthesesRequired;
/// @internal
///
+ (nonnull SODataV4_PointCoordinates*) parseWKT :(nonnull NSString*)text;
+ (nonnull SODataV4_PointCoordinates*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)kindRequired;
@end
#endif
#endif

#ifndef imported_SODataV4__PolygonCoordinates_public
#define imported_SODataV4__PolygonCoordinates_public
/// @brief A list of item type `SODataV4_LineStringCoordinates`.
///
///
@interface SODataV4_PolygonCoordinates : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PolygonCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PolygonCoordinates*) new;
/// @brief Construct a new list with `SODataV4_PolygonCoordinates`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PolygonCoordinates*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_LineStringCoordinates*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PolygonCoordinates*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PolygonCoordinates*) addThis :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PolygonCoordinates*) copy;
/// @brief An immutable empty `SODataV4_PolygonCoordinates`.
///
///
+ (nonnull SODataV4_PolygonCoordinates*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LineStringCoordinates*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PolygonCoordinates`.`length` - 1).
- (nonnull SODataV4_LineStringCoordinates*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PolygonCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LineStringCoordinates`.
- (SODataV4_boolean) includes :(nonnull SODataV4_LineStringCoordinates*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PolygonCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LineStringCoordinates`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_LineStringCoordinates*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PolygonCoordinates`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PolygonCoordinates*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PolygonCoordinates`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_LineStringCoordinates*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LineStringCoordinates*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PolygonCoordinates`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_LineStringCoordinates`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_LineStringCoordinates*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_LineStringCoordinates*)item;
/// @brief Return a new `SODataV4_PolygonCoordinates` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_LineStringCoordinates` will be removed.
///
/// @return A new list of item type `SODataV4_LineStringCoordinates`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PolygonCoordinates*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_LineStringCoordinates*) single;
/// @internal
///
- (nonnull SODataV4_PolygonCoordinates*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PolygonCoordinates*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_PolygonCoordinates`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PolygonCoordinates* empty;
@end
#endif

#ifdef import_SODataV4__PolygonCoordinates_internal
#ifndef imported_SODataV4__PolygonCoordinates_internal
#define imported_SODataV4__PolygonCoordinates_internal
@interface SODataV4_PolygonCoordinates (internal)
/// @internal
///
- (nonnull NSString*) formatWKT;
- (nonnull NSString*) formatWKT :(SODataV4_boolean)kindRequired;
/// @internal
///
+ (nonnull SODataV4_PolygonCoordinates*) parseWKT :(nonnull NSString*)text;
+ (nonnull SODataV4_PolygonCoordinates*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)kindRequired;
@end
#endif
#endif

#ifndef imported_SODataV4__PropertyList_public
#define imported_SODataV4__PropertyList_public
/// @brief A list of item type `SODataV4_Property`.
///
///
@interface SODataV4_PropertyList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PropertyList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PropertyList*) new;
/// @brief Construct a new list with `SODataV4_PropertyList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PropertyList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_Property*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PropertyList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PropertyList*) addThis :(nonnull SODataV4_Property*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PropertyList*) copy;
/// @brief An immutable empty `SODataV4_PropertyList`.
///
///
+ (nonnull SODataV4_PropertyList*) empty;
/// @brief An equality function for the item type of this list.
///
///
- (nonnull SODataV4_Equality*) equality;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_Property*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyList`.`length` - 1).
- (nonnull SODataV4_Property*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Property`.
- (SODataV4_boolean) includes :(nonnull SODataV4_Property*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_Property*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Property`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_Property*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PropertyList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_Property*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_Property*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_Property*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_Property`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_Property*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_Property*)item;
/// @brief Return a new `SODataV4_PropertyList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_Property` will be removed.
///
/// @return A new list of item type `SODataV4_Property`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PropertyList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_Property*) single;
/// @internal
///
- (nonnull SODataV4_PropertyList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PropertyList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_PropertyList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PropertyList* empty;
/// @brief An equality function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Equality* equality;
@end
#endif

#ifndef imported_SODataV4__PropertyMap_EntryList_public
#define imported_SODataV4__PropertyMap_EntryList_public
/// @brief A list of item type `SODataV4_PropertyMap_Entry`.
///
///
@interface SODataV4_PropertyMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PropertyMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PropertyMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_PropertyMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PropertyMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PropertyMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PropertyMap_EntryList*) addThis :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PropertyMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_PropertyMap_EntryList`.
///
///
+ (nonnull SODataV4_PropertyMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PropertyMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyMap_EntryList`.`length` - 1).
- (nonnull SODataV4_PropertyMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PropertyMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PropertyMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PropertyMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PropertyMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PropertyMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PropertyMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PropertyMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PropertyMap_Entry*)item;
/// @brief Return a new `SODataV4_PropertyMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PropertyMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_PropertyMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PropertyMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PropertyMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_PropertyMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PropertyMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_PropertyMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PropertyMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__PropertyPath_public
#define imported_SODataV4__PropertyPath_public
/// @brief Abstract base class for `SODataV4_Property` and `SODataV4_DataPath`.
///
/// Values of type `PropertyPath` are typically used in query construction.
///
/// @see `SODataV4_DataQuery`.`select`, `SODataV4_DataQuery`.`expand`, `SODataV4_DataQuery`.`orderBy`.
@interface SODataV4_PropertyPath : SODataV4_QueryValue
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_PropertyPath*) new;
/// @internal
///
- (void) _init;
/// @return this property or path, expressed as a `DataPath`.
///
- (nonnull SODataV4_DataPath*) toPath;
@end
#endif

#ifndef imported_SODataV4__PropertyPathList_public
#define imported_SODataV4__PropertyPathList_public
/// @brief A list of item type `SODataV4_PropertyPath`.
///
///
@interface SODataV4_PropertyPathList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_PropertyPathList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_PropertyPathList*) new;
/// @brief Construct a new list with `SODataV4_PropertyPathList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_PropertyPathList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_PropertyPath*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_PropertyPathList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_PropertyPathList*) addThis :(nonnull SODataV4_PropertyPath*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_PropertyPathList*) copy;
/// @brief An immutable empty `SODataV4_PropertyPathList`.
///
///
+ (nonnull SODataV4_PropertyPathList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PropertyPath*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyPathList`.`length` - 1).
- (nonnull SODataV4_PropertyPath*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyPathList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PropertyPath`.
- (SODataV4_boolean) includes :(nonnull SODataV4_PropertyPath*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_PropertyPath*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyPathList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PropertyPath`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_PropertyPath*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyPathList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_PropertyPathList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_PropertyPathList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_PropertyPath*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_PropertyPath*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PropertyPath*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_PropertyPathList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_PropertyPath`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_PropertyPath*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_PropertyPath*)item;
/// @brief Return a new `SODataV4_PropertyPathList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_PropertyPath` will be removed.
///
/// @return A new list of item type `SODataV4_PropertyPath`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_PropertyPathList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_PropertyPath*) single;
/// @internal
///
- (nonnull SODataV4_PropertyPathList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_PropertyPathList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_PropertyPathList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_PropertyPathList* empty;
@end
#endif

#ifndef imported_SODataV4__QueryFunctionList_public
#define imported_SODataV4__QueryFunctionList_public
/// @internal
///
@interface SODataV4_QueryFunctionList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_QueryFunctionList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_QueryFunctionList*) new;
/// @brief Construct a new list with `SODataV4_QueryFunctionList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_QueryFunctionList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_QueryFunction*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_QueryFunctionList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_QueryFunctionList*) addThis :(nonnull SODataV4_QueryFunction*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_QueryFunctionList*) copy;
/// @brief An immutable empty `SODataV4_QueryFunctionList`.
///
///
+ (nonnull SODataV4_QueryFunctionList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryFunction*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryFunctionList`.`length` - 1).
- (nonnull SODataV4_QueryFunction*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryFunctionList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryFunction`.
- (SODataV4_boolean) includes :(nonnull SODataV4_QueryFunction*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryFunction*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryFunctionList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryFunction`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryFunction*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryFunctionList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_QueryFunctionList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryFunctionList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_QueryFunction*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryFunction*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryFunction*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryFunctionList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryFunction`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryFunction*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_QueryFunction*)item;
/// @brief Return a new `SODataV4_QueryFunctionList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_QueryFunction` will be removed.
///
/// @return A new list of item type `SODataV4_QueryFunction`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_QueryFunctionList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_QueryFunction*) single;
/// @internal
///
- (nonnull SODataV4_QueryFunctionList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_QueryFunctionList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_QueryFunctionList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryFunctionList* empty;
@end
#endif

#ifndef imported_SODataV4__QueryFunctionMap_EntryList_public
#define imported_SODataV4__QueryFunctionMap_EntryList_public
/// @brief A list of item type `SODataV4_QueryFunctionMap_Entry`.
///
///
@interface SODataV4_QueryFunctionMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_QueryFunctionMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_QueryFunctionMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_QueryFunctionMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_QueryFunctionMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_QueryFunctionMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_QueryFunctionMap_EntryList*) addThis :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_QueryFunctionMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_QueryFunctionMap_EntryList`.
///
///
+ (nonnull SODataV4_QueryFunctionMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryFunctionMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryFunctionMap_EntryList`.`length` - 1).
- (nonnull SODataV4_QueryFunctionMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryFunctionMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryFunctionMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryFunctionMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryFunctionMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryFunctionMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryFunctionMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_QueryFunctionMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryFunctionMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryFunctionMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryFunctionMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryFunctionMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryFunctionMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_QueryFunctionMap_Entry*)item;
/// @brief Return a new `SODataV4_QueryFunctionMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_QueryFunctionMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_QueryFunctionMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_QueryFunctionMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_QueryFunctionMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_QueryFunctionMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_QueryFunctionMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_QueryFunctionMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryFunctionMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__QueryOperatorList_public
#define imported_SODataV4__QueryOperatorList_public
/// @internal
///
@interface SODataV4_QueryOperatorList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_QueryOperatorList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_QueryOperatorList*) new;
/// @brief Construct a new list with `SODataV4_QueryOperatorList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_QueryOperatorList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_QueryOperator*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_QueryOperatorList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_QueryOperatorList*) addThis :(nonnull SODataV4_QueryOperator*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_QueryOperatorList*) copy;
/// @brief An immutable empty `SODataV4_QueryOperatorList`.
///
///
+ (nonnull SODataV4_QueryOperatorList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryOperator*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryOperatorList`.`length` - 1).
- (nonnull SODataV4_QueryOperator*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryOperatorList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryOperator`.
- (SODataV4_boolean) includes :(nonnull SODataV4_QueryOperator*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryOperator*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryOperatorList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryOperator`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryOperator*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryOperatorList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_QueryOperatorList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryOperatorList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_QueryOperator*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryOperator*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryOperator*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryOperatorList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryOperator`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryOperator*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_QueryOperator*)item;
/// @brief Return a new `SODataV4_QueryOperatorList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_QueryOperator` will be removed.
///
/// @return A new list of item type `SODataV4_QueryOperator`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_QueryOperatorList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_QueryOperator*) single;
/// @internal
///
- (nonnull SODataV4_QueryOperatorList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_QueryOperatorList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_QueryOperatorList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryOperatorList* empty;
@end
#endif

#ifndef imported_SODataV4__QueryOperatorMap_EntryList_public
#define imported_SODataV4__QueryOperatorMap_EntryList_public
/// @brief A list of item type `SODataV4_QueryOperatorMap_Entry`.
///
///
@interface SODataV4_QueryOperatorMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_QueryOperatorMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_QueryOperatorMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_QueryOperatorMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_QueryOperatorMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_QueryOperatorMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_QueryOperatorMap_EntryList*) addThis :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_QueryOperatorMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_QueryOperatorMap_EntryList`.
///
///
+ (nonnull SODataV4_QueryOperatorMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryOperatorMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryOperatorMap_EntryList`.`length` - 1).
- (nonnull SODataV4_QueryOperatorMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryOperatorMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryOperatorMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryOperatorMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryOperatorMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_QueryOperatorMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryOperatorMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_QueryOperatorMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_QueryOperatorMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_QueryOperatorMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_QueryOperatorMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_QueryOperatorMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_QueryOperatorMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_QueryOperatorMap_Entry*)item;
/// @brief Return a new `SODataV4_QueryOperatorMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_QueryOperatorMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_QueryOperatorMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_QueryOperatorMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_QueryOperatorMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_QueryOperatorMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_QueryOperatorMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_QueryOperatorMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_QueryOperatorMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__SelectItemList_public
#define imported_SODataV4__SelectItemList_public
/// @internal
///
@interface SODataV4_SelectItemList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_SelectItemList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_SelectItemList*) new;
/// @brief Construct a new list with `SODataV4_SelectItemList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_SelectItemList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_SelectItem*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_SelectItemList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_SelectItemList*) addThis :(nonnull SODataV4_SelectItem*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_SelectItemList*) copy;
/// @brief An immutable empty `SODataV4_SelectItemList`.
///
///
+ (nonnull SODataV4_SelectItemList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SelectItem*) first;
/// @return The first item (if any) for `property`, otherwise `nil`.
/// @param property Property to be search for in items.
- (nullable SODataV4_SelectItem*) forProperty :(nonnull SODataV4_Property*)property;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SelectItemList`.`length` - 1).
- (nonnull SODataV4_SelectItem*) get :(SODataV4_int)index;
/// @return `true` if this list has an item for `property`.
/// @param property Property to be search for in items.
- (SODataV4_boolean) hasProperty :(nonnull SODataV4_Property*)property;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_SelectItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SelectItem`.
- (SODataV4_boolean) includes :(nonnull SODataV4_SelectItem*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_SelectItem*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SelectItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SelectItem`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_SelectItem*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SelectItemList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_SelectItemList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SelectItemList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_SelectItem*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SelectItem*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SelectItem*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SelectItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SelectItem`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SelectItem*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_SelectItem*)item;
/// @brief Return a new `SODataV4_SelectItemList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_SelectItem` will be removed.
///
/// @return A new list of item type `SODataV4_SelectItem`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_SelectItemList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_SelectItem*) single;
/// @internal
///
- (nonnull SODataV4_SelectItemList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_SelectItemList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_SelectItemList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_SelectItemList* empty;
@end
#endif

#ifndef imported_SODataV4__ShortList_public
#define imported_SODataV4__ShortList_public
/// @internal
///
@interface SODataV4_ShortList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_ShortList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_ShortList*) new;
/// @brief Construct a new list with `SODataV4_ShortList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_ShortList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_short)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_ShortList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_ShortList*) addThis :(SODataV4_short)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_ShortList*) copy;
/// @brief An immutable empty `SODataV4_ShortList`.
///
///
+ (nonnull SODataV4_ShortList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_short) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ShortList`.`length` - 1).
- (SODataV4_short) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_ShortList`.`equality` property, which would usually be expected to match the `==` operator for item type `short`.
- (SODataV4_boolean) includes :(SODataV4_short)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_short)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ShortList`.`equality` property, which would usually be expected to match the `==` operator for item type `short`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_short)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ShortList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_ShortList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_ShortList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_short)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_short) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_short)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_ShortList`.`equality` property, which would usually be expected to match the `==` operator for item type `short`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_short)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_short)item;
/// @brief Return a new `SODataV4_ShortList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `short` will be removed.
///
/// @return A new list of item type `short`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_ShortList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_short) single;
/// @internal
///
- (nonnull SODataV4_ShortList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_ShortList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_ShortList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_ShortList* empty;
@end
#endif

#ifndef imported_SODataV4__SimpleTypeList_public
#define imported_SODataV4__SimpleTypeList_public
/// @internal
///
@interface SODataV4_SimpleTypeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_SimpleTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_SimpleTypeList*) new;
/// @brief Construct a new list with `SODataV4_SimpleTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_SimpleTypeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_SimpleType*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_SimpleTypeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_SimpleTypeList*) addThis :(nonnull SODataV4_SimpleType*)item;
/// @brief An ordering function for the item type of this list.
///
///
- (nonnull SODataV4_Comparer*) comparer;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_SimpleTypeList*) copy;
/// @brief An immutable empty `SODataV4_SimpleTypeList`.
///
///
+ (nonnull SODataV4_SimpleTypeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SimpleType*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SimpleTypeList`.`length` - 1).
- (nonnull SODataV4_SimpleType*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_SimpleTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SimpleType`.
- (SODataV4_boolean) includes :(nonnull SODataV4_SimpleType*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_SimpleType*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SimpleTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SimpleType`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_SimpleType*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SimpleTypeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_SimpleTypeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SimpleTypeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_SimpleType*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SimpleType*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SimpleType*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SimpleTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SimpleType`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SimpleType*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_SimpleType*)item;
/// @brief Return a new `SODataV4_SimpleTypeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_SimpleType` will be removed.
///
/// @return A new list of item type `SODataV4_SimpleType`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_SimpleTypeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_SimpleType*) single;
/// @internal
///
- (nonnull SODataV4_SimpleTypeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_SimpleTypeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An ordering function for the item type of this list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_Comparer* comparer;
/// @brief An immutable empty `SODataV4_SimpleTypeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_SimpleTypeList* empty;
@end
#endif

#ifndef imported_SODataV4__SimpleTypeMap_EntryList_public
#define imported_SODataV4__SimpleTypeMap_EntryList_public
/// @brief A list of item type `SODataV4_SimpleTypeMap_Entry`.
///
///
@interface SODataV4_SimpleTypeMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_SimpleTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_SimpleTypeMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_SimpleTypeMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_SimpleTypeMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_SimpleTypeMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_SimpleTypeMap_EntryList*) addThis :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_SimpleTypeMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_SimpleTypeMap_EntryList`.
///
///
+ (nonnull SODataV4_SimpleTypeMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SimpleTypeMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SimpleTypeMap_EntryList`.`length` - 1).
- (nonnull SODataV4_SimpleTypeMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_SimpleTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SimpleTypeMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SimpleTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SimpleTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_SimpleTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SimpleTypeMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_SimpleTypeMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SimpleTypeMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SimpleTypeMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SimpleTypeMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SimpleTypeMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SimpleTypeMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_SimpleTypeMap_Entry*)item;
/// @brief Return a new `SODataV4_SimpleTypeMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_SimpleTypeMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_SimpleTypeMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_SimpleTypeMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_SimpleTypeMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_SimpleTypeMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_SimpleTypeMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_SimpleTypeMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_SimpleTypeMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__SortItemList_public
#define imported_SODataV4__SortItemList_public
/// @internal
///
@interface SODataV4_SortItemList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_SortItemList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_SortItemList*) new;
/// @brief Construct a new list with `SODataV4_SortItemList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_SortItemList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_SortItem*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_SortItemList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_SortItemList*) addThis :(nonnull SODataV4_SortItem*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_SortItemList*) copy;
/// @brief An immutable empty `SODataV4_SortItemList`.
///
///
+ (nonnull SODataV4_SortItemList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SortItem*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SortItemList`.`length` - 1).
- (nonnull SODataV4_SortItem*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_SortItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SortItem`.
- (SODataV4_boolean) includes :(nonnull SODataV4_SortItem*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_SortItem*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SortItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SortItem`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_SortItem*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SortItemList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_SortItemList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_SortItemList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_SortItem*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_SortItem*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SortItem*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_SortItemList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_SortItem`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_SortItem*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_SortItem*)item;
/// @brief Return a new `SODataV4_SortItemList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_SortItem` will be removed.
///
/// @return A new list of item type `SODataV4_SortItem`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_SortItemList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_SortItem*) single;
/// @internal
///
- (nonnull SODataV4_SortItemList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_SortItemList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_SortItemList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_SortItemList* empty;
@end
#endif

#ifndef imported_SODataV4__StringList_public
#define imported_SODataV4__StringList_public
/// @brief A list of item type `string`.
///
///
@interface SODataV4_StringList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_StringList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_StringList*) new;
/// @brief Construct a new list with `SODataV4_StringList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_StringList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull NSString*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_StringList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_StringList*) addThis :(nonnull NSString*)item;
/// @return a concatenation of all the string items in this list into a single string value.
///
- (nonnull NSString*) concat;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_StringList*) copy;
/// @return A new list with the items of this list, excluding empty items.
///
- (nonnull SODataV4_StringList*) dropEmpty;
/// @brief An immutable empty `SODataV4_StringList`.
///
///
+ (nonnull SODataV4_StringList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull NSString*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StringList`.`length` - 1).
- (nonnull NSString*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_StringList`.`equality` property, which would usually be expected to match the `==` operator for item type `string`.
- (SODataV4_boolean) includes :(nonnull NSString*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull NSString*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_StringList`.`equality` property, which would usually be expected to match the `==` operator for item type `string`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull NSString*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StringList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_StringList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StringList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull NSString*)item;
/// @return a concatenation of all the string items in this list into a single string value, with the specified `separator` between items.
/// @param separator The separator string value.
- (nonnull NSString*) join :(nonnull NSString*)separator;
/// @return `this.join("\n")` plus a final newline (if list is non-empty).
///
- (nonnull NSString*) joinLines;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull NSString*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull NSString*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_StringList`.`equality` property, which would usually be expected to match the `==` operator for item type `string`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull NSString*)item :(SODataV4_int)start;
/// @return A list of the lines in this string.
/// @param value Text where each line is terminated by the newline character (optionally preceeded by carriage return). The final newline character can be omitted.
+ (nonnull SODataV4_StringList*) lines :(nonnull NSString*)value;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull NSString*)item;
/// @brief Return a new `SODataV4_StringList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `string` will be removed.
///
/// @return A new list of item type `string`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_StringList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull NSString*) single;
/// @internal
///
- (nonnull SODataV4_StringList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_StringList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief Sort this list (in place) with a case-insensitive ordering.
///
///
/// @return This list.
- (nonnull SODataV4_StringList*) sortIgnoreCase;
/// @internal
///
+ (nonnull SODataV4_StringList*) split :(nonnull NSString*)value :(nonnull NSString*)separator;
/// @brief Split a string value into a list of string values, divided by the specified separator.
///
///
/// @return String list.
/// @param value The string value to be split.
/// @param separator The separator value.
/// @param limit (optional) separator Maximum number of string values to return. The separator can appear (possibly multiple times) in the final string value.
+ (nonnull SODataV4_StringList*) split :(nonnull NSString*)value :(nonnull NSString*)separator :(SODataV4_int)limit;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @return A new list where each item is the corresponding trimmed item from this list.
///
- (nonnull SODataV4_StringList*) trimAll;
/// @brief An immutable empty `SODataV4_StringList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_StringList* empty;
@end
#endif

#ifndef imported_SODataV4__StringMap_EntryList_public
#define imported_SODataV4__StringMap_EntryList_public
/// @brief A list of item type `SODataV4_StringMap_Entry`.
///
///
@interface SODataV4_StringMap_EntryList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_StringMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_StringMap_EntryList*) new;
/// @brief Construct a new list with `SODataV4_StringMap_EntryList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_StringMap_EntryList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_StringMap_Entry*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_StringMap_EntryList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_StringMap_EntryList*) addThis :(nonnull SODataV4_StringMap_Entry*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_StringMap_EntryList*) copy;
/// @brief An immutable empty `SODataV4_StringMap_EntryList`.
///
///
+ (nonnull SODataV4_StringMap_EntryList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_StringMap_Entry*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StringMap_EntryList`.`length` - 1).
- (nonnull SODataV4_StringMap_Entry*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_StringMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_StringMap_Entry`.
- (SODataV4_boolean) includes :(nonnull SODataV4_StringMap_Entry*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_StringMap_Entry*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_StringMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_StringMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_StringMap_Entry*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StringMap_EntryList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_StringMap_EntryList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StringMap_EntryList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_StringMap_Entry*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_StringMap_Entry*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_StringMap_Entry*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_StringMap_EntryList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_StringMap_Entry`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_StringMap_Entry*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_StringMap_Entry*)item;
/// @brief Return a new `SODataV4_StringMap_EntryList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_StringMap_Entry` will be removed.
///
/// @return A new list of item type `SODataV4_StringMap_Entry`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_StringMap_EntryList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_StringMap_Entry*) single;
/// @internal
///
- (nonnull SODataV4_StringMap_EntryList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_StringMap_EntryList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_StringMap_EntryList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_StringMap_EntryList* empty;
@end
#endif

#ifndef imported_SODataV4__StructureTypeList_public
#define imported_SODataV4__StructureTypeList_public
/// @brief A list of item type `SODataV4_StructureType`.
///
///
@interface SODataV4_StructureTypeList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_StructureTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_StructureTypeList*) new;
/// @brief Construct a new list with `SODataV4_StructureTypeList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_StructureTypeList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_StructureType*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_StructureTypeList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_StructureTypeList*) addThis :(nonnull SODataV4_StructureType*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_StructureTypeList*) copy;
/// @brief An immutable empty `SODataV4_StructureTypeList`.
///
///
+ (nonnull SODataV4_StructureTypeList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_StructureType*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StructureTypeList`.`length` - 1).
- (nonnull SODataV4_StructureType*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_StructureTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_StructureType`.
- (SODataV4_boolean) includes :(nonnull SODataV4_StructureType*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_StructureType*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_StructureTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_StructureType`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_StructureType*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StructureTypeList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_StructureTypeList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_StructureTypeList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_StructureType*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_StructureType*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_StructureType*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_StructureTypeList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_StructureType`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_StructureType*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_StructureType*)item;
/// @brief Return a new `SODataV4_StructureTypeList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_StructureType` will be removed.
///
/// @return A new list of item type `SODataV4_StructureType`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_StructureTypeList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_StructureType*) single;
/// @internal
///
- (nonnull SODataV4_StructureTypeList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_StructureTypeList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_StructureTypeList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_StructureTypeList* empty;
@end
#endif

#ifndef imported_SODataV4__TransformValue_public
#define imported_SODataV4__TransformValue_public
/// @brief Encapsulates an [OData](http://odata.org) transformation item defined in OData Data Aggregation.
///
/// A TransformValue indicates an expression that is used in the $apply system query option.
@interface SODataV4_TransformValue : SODataV4_QueryValue
{
    @private SODataV4_TransformValueList* _Nonnull items_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_TransformValue*) new;
/// @internal
///
- (void) _init;
/// @brief Adds a new transformation item to be executed after the current one. It will be separated by a '/' in the query url.
///
///
/// @return The current transform value.
/// @param item The transform value to be executed after the current one.
- (nonnull SODataV4_TransformValue*) chain :(nonnull SODataV4_TransformValue*)item;
/// @brief Child transform items to be executed after the current transform value is executed.
///
///
- (nonnull SODataV4_TransformValueList*) items;
/// @brief Child transform items to be executed after the current transform value is executed.
///
///
- (void) setItems :(nonnull SODataV4_TransformValueList*)value;
/// @brief Child transform items to be executed after the current transform value is executed.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_TransformValueList* items;
@end
#endif

#ifndef imported_SODataV4__TransformValueList_public
#define imported_SODataV4__TransformValueList_public
/// @brief A list of transformation items.
///
///
@interface SODataV4_TransformValueList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_TransformValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_TransformValueList*) new;
/// @brief Construct a new list with `SODataV4_TransformValueList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_TransformValueList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_TransformValue*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_TransformValueList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_TransformValueList*) addThis :(nonnull SODataV4_TransformValue*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_TransformValueList*) copy;
/// @brief An immutable empty `SODataV4_TransformValueList`.
///
///
+ (nonnull SODataV4_TransformValueList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_TransformValue*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_TransformValueList`.`length` - 1).
- (nonnull SODataV4_TransformValue*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_TransformValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_TransformValue`.
- (SODataV4_boolean) includes :(nonnull SODataV4_TransformValue*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_TransformValue*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_TransformValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_TransformValue`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_TransformValue*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_TransformValueList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_TransformValueList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_TransformValueList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_TransformValue*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_TransformValue*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_TransformValue*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_TransformValueList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_TransformValue`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_TransformValue*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_TransformValue*)item;
/// @brief Return a new `SODataV4_TransformValueList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_TransformValue` will be removed.
///
/// @return A new list of item type `SODataV4_TransformValue`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_TransformValueList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_TransformValue*) single;
/// @internal
///
- (nonnull SODataV4_TransformValueList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_TransformValueList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @brief An immutable empty `SODataV4_TransformValueList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_TransformValueList* empty;
@end
#endif

#ifndef imported_SODataV4__UnsignedByteList_public
#define imported_SODataV4__UnsignedByteList_public
/// @internal
///
@interface SODataV4_UnsignedByteList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_UnsignedByteList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_UnsignedByteList*) new;
/// @brief Construct a new list with `SODataV4_UnsignedByteList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_UnsignedByteList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_int)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_UnsignedByteList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_UnsignedByteList*) addThis :(SODataV4_int)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_UnsignedByteList*) copy;
/// @brief An immutable empty `SODataV4_UnsignedByteList`.
///
///
+ (nonnull SODataV4_UnsignedByteList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_int) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_UnsignedByteList`.`length` - 1).
- (SODataV4_int) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_UnsignedByteList`.`equality` property, which would usually be expected to match the `==` operator for item type `unsignedByte`.
- (SODataV4_boolean) includes :(SODataV4_int)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_int)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_UnsignedByteList`.`equality` property, which would usually be expected to match the `==` operator for item type `unsignedByte`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_int)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_UnsignedByteList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_UnsignedByteList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_UnsignedByteList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_int)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_int) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_int)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_UnsignedByteList`.`equality` property, which would usually be expected to match the `==` operator for item type `unsignedByte`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_int)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_int)item;
/// @brief Return a new `SODataV4_UnsignedByteList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `unsignedByte` will be removed.
///
/// @return A new list of item type `unsignedByte`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_UnsignedByteList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_int) single;
/// @internal
///
- (nonnull SODataV4_UnsignedByteList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_UnsignedByteList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_UnsignedByteList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_UnsignedByteList* empty;
@end
#endif

#ifndef imported_SODataV4__UnsignedShortList_public
#define imported_SODataV4__UnsignedShortList_public
/// @internal
///
@interface SODataV4_UnsignedShortList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_UnsignedShortList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_UnsignedShortList*) new;
/// @brief Construct a new list with `SODataV4_UnsignedShortList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_UnsignedShortList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(SODataV4_int)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_UnsignedShortList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_UnsignedShortList*) addThis :(SODataV4_int)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_UnsignedShortList*) copy;
/// @brief An immutable empty `SODataV4_UnsignedShortList`.
///
///
+ (nonnull SODataV4_UnsignedShortList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_int) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_UnsignedShortList`.`length` - 1).
- (SODataV4_int) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_UnsignedShortList`.`equality` property, which would usually be expected to match the `==` operator for item type `unsignedShort`.
- (SODataV4_boolean) includes :(SODataV4_int)item;
/// @internal
///
- (SODataV4_int) indexOf :(SODataV4_int)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_UnsignedShortList`.`equality` property, which would usually be expected to match the `==` operator for item type `unsignedShort`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(SODataV4_int)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_UnsignedShortList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_UnsignedShortList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_UnsignedShortList`.`length`).
- (void) insertAt :(SODataV4_int)index :(SODataV4_int)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (SODataV4_int) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(SODataV4_int)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_UnsignedShortList`.`equality` property, which would usually be expected to match the `==` operator for item type `unsignedShort`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(SODataV4_int)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(SODataV4_int)item;
/// @brief Return a new `SODataV4_UnsignedShortList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `unsignedShort` will be removed.
///
/// @return A new list of item type `unsignedShort`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_UnsignedShortList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (SODataV4_int) single;
/// @internal
///
- (nonnull SODataV4_UnsignedShortList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_UnsignedShortList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_UnsignedShortList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_UnsignedShortList* empty;
@end
#endif

#ifndef imported_SODataV4__YearMonthDurationList_public
#define imported_SODataV4__YearMonthDurationList_public
/// @internal
///
@interface SODataV4_YearMonthDurationList : SODataV4_ListBase
{
}
+ (void) initialize;
- (nonnull id) init;
/// @brief Construct a new list with `SODataV4_YearMonthDurationList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
+ (nonnull SODataV4_YearMonthDurationList*) new;
/// @brief Construct a new list with `SODataV4_YearMonthDurationList`.`length` of zero and optional initial `capacity`.
///
/// A list can expand in length beyond its initial capacity, but best performance
/// will be obtained if the initial capacity is close to the list's maximum length.
///
/// @param capacity Optional initial capacity.
+ (nonnull SODataV4_YearMonthDurationList*) new :(SODataV4_int)capacity;
/// @internal
///
- (void) _init :(SODataV4_int)capacity;
/// @brief Add `item` to the end of this list.
///
///
/// @param item Item to be added.
- (void) add :(nonnull SODataV4_YearMonthDuration*)item;
/// @brief Add all the items of `list` to the end of this list.
///
///
/// @param list Items to be added.
- (void) addAll :(nonnull SODataV4_YearMonthDurationList*)list;
/// @brief Add `item` to the end of this list.
///
///
/// @return This list.
/// @param item Item to be added.
- (nonnull SODataV4_YearMonthDurationList*) addThis :(nonnull SODataV4_YearMonthDuration*)item;
/// @return A [shallow copy](https://en.wikipedia.org/wiki/Object_copying#Shallow_copy) of this list.
///
- (nonnull SODataV4_YearMonthDurationList*) copy;
/// @brief An immutable empty `SODataV4_YearMonthDurationList`.
///
///
+ (nonnull SODataV4_YearMonthDurationList*) empty;
/// @return The first item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_YearMonthDuration*) first;
/// @return The item in this list at the specified `index`.
/// @param index Zero-based index.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_YearMonthDurationList`.`length` - 1).
- (nonnull SODataV4_YearMonthDuration*) get :(SODataV4_int)index;
/// @return `true` if this list contains `item`.
/// @param item Item for comparison. Comparison uses the `SODataV4_YearMonthDurationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_YearMonthDuration`.
- (SODataV4_boolean) includes :(nonnull SODataV4_YearMonthDuration*)item;
/// @internal
///
- (SODataV4_int) indexOf :(nonnull SODataV4_YearMonthDuration*)item;
/// @return First index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_YearMonthDurationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_YearMonthDuration`.
/// @param start (optional) Zero-based starting index (search moves forwards from this index).
- (SODataV4_int) indexOf :(nonnull SODataV4_YearMonthDuration*)item :(SODataV4_int)start;
/// @brief Insert all items of `list` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param list List of items to be inserted.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_YearMonthDurationList`.`length`).
- (void) insertAll :(SODataV4_int)index :(nonnull SODataV4_YearMonthDurationList*)list;
/// @brief Insert `item` into this list, before the item (if any) at `index`.
///
///
/// @param index Zero-based index.
/// @param item Item to be added.
/// @throw `SODataV4_ListIndexException` if `index` is out of range (0 to `SODataV4_YearMonthDurationList`.`length`).
- (void) insertAt :(SODataV4_int)index :(nonnull SODataV4_YearMonthDuration*)item;
/// @return The last item in this list.
/// @throw `SODataV4_EmptyListException` if the list is empty.
- (nonnull SODataV4_YearMonthDuration*) last;
/// @internal
///
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_YearMonthDuration*)item;
/// @return Last index in this list of `item`, or `-1` if not found.
/// @param item Item for comparison. Comparison uses the `SODataV4_YearMonthDurationList`.`equality` property, which would usually be expected to match the `==` operator for item type `SODataV4_YearMonthDuration`.
/// @param start (optional) Zero-based starting index (search moves backwards from this index).
- (SODataV4_int) lastIndexOf :(nonnull SODataV4_YearMonthDuration*)item :(SODataV4_int)start;
/// @brief Set the item in this list at the specified `index`.
///
///
/// @param index Zero-based index.
/// @param item Item value.
- (void) set :(SODataV4_int)index :(nonnull SODataV4_YearMonthDuration*)item;
/// @brief Return a new `SODataV4_YearMonthDurationList` that shares the `SODataV4_ListBase`.`untypedList` as the `list` parameter.
///
/// To ensure type safety, items in `list` that do not have the item type `SODataV4_YearMonthDuration` will be removed.
///
/// @return A new list of item type `SODataV4_YearMonthDuration`, sharing the same items as `list`.
/// @param list List whose items will be shared by the resulting list.
+ (nonnull SODataV4_YearMonthDurationList*) share :(nonnull SODataV4_ListBase*)list;
/// @return A single item from this list.
/// @throw `SODataV4_EmptyListException` if the list has no items, `SODataV4_NotUniqueException` if the list has multiple items.
- (nonnull SODataV4_YearMonthDuration*) single;
/// @internal
///
- (nonnull SODataV4_YearMonthDurationList*) slice :(SODataV4_int)start;
/// @return A slice of this list from index `start` (inclusive) to index `end` (exclusive).
/// @param start Zero-based starting index (inclusive), or negative for starting index relative to the end of this list.
/// @param end (optional) Zero-based ending index (exclusive), or negative for ending index relative to the end of this list.
- (nonnull SODataV4_YearMonthDurationList*) slice :(SODataV4_int)start :(SODataV4_int)end;
/// @return a dynamic representation of this list (`SODataV4_DataValueList`, `SODataV4_ComplexValueList`, or `SODataV4_EntityValueList`), or `nil` if there is no dynamic representation available.
///
- (nullable SODataV4_ListBase*) toDynamic;
/// @brief An immutable empty `SODataV4_YearMonthDurationList`.
///
///
@property (nonatomic, readonly, class, strong, nonnull) SODataV4_YearMonthDurationList* empty;
@end
#endif

#ifndef imported_SODataV4__AggregateValue_public
#define imported_SODataV4__AggregateValue_public
/// @brief Encapsulates an [OData](http://odata.org) aggregate transformation item.
///
///
@interface SODataV4_AggregateValue : SODataV4_TransformValue
{
    @private SODataV4_AggregateExpressionList* _Nonnull aggregateExpressionList_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief The list of aggregate expressions
///
///
- (nonnull SODataV4_AggregateExpressionList*) aggregateExpressionList;
/// @brief Creates a $count aggregate transformation item.
///
///
/// @return The aggregate transformation value.
/// @param alias The alias for the aggregate item.
+ (nonnull SODataV4_AggregateValue*) count :(nonnull NSString*)alias;
/// @brief Creates an aggregate transformation item.
///
///
/// @return The aggregate transformation value.
/// @param value The value to be aggregated.
/// @param method The aggregate method to be used for aggregating.
/// @param alias The alias for the returned result property.
+ (nonnull SODataV4_AggregateValue*) create :(nullable SODataV4_DataValue*)value :(nullable SODataV4_AggregateMethod*)method :(nullable NSString*)alias;
/// @brief Creates an aggregate transformation item with an AggregateExpressionList
///
///
/// @return The aggregate transformation value.
/// @param aggregateExpressionList The list of aggregate expressions.
+ (nonnull SODataV4_AggregateValue*) createWithExpressionList :(nonnull SODataV4_AggregateExpressionList*)aggregateExpressionList;
/// @brief The list of aggregate expressions
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AggregateExpressionList* aggregateExpressionList;
@end
#endif

#ifdef import_SODataV4__AggregateValue_private
#ifndef imported_SODataV4__AggregateValue_private
#define imported_SODataV4__AggregateValue_private
@interface SODataV4_AggregateValue (private)
+ (nonnull SODataV4_AggregateValue*) new;
+ (nonnull SODataV4_AggregateValue*) _new1 :(nonnull SODataV4_AggregateExpressionList*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__AmountTransform_public
#define imported_SODataV4__AmountTransform_public
/// @brief Abstract base class for top and bottom transformation items.
///
///
@interface SODataV4_AmountTransform : SODataV4_TransformValue
{
    @private NSString* _Nonnull _name_;
    @private SODataV4_DataValue* _Nonnull _amount_;
    @private SODataV4_DataValue* _Nonnull _compareValue_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init :(nonnull NSString*)name :(nonnull SODataV4_DataValue*)amount :(nonnull SODataV4_DataValue*)value;
/// @brief The numeric value to be applied in the transformation.
///
///
- (nonnull SODataV4_DataValue*) amount;
/// @brief The name of the transformation item.
///
///
- (nonnull NSString*) name;
/// @brief The value by which the transformation will compare the instances in the entity set.
///
///
- (nonnull SODataV4_DataValue*) value;
/// @brief The numeric value to be applied in the transformation.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataValue* amount;
/// @brief The name of the transformation item.
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* name;
/// @brief The value by which the transformation will compare the instances in the entity set.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataValue* value;
@end
#endif

#ifdef import_SODataV4__AmountTransform_internal
#ifndef imported_SODataV4__AmountTransform_internal
#define imported_SODataV4__AmountTransform_internal
@interface SODataV4_AmountTransform (internal)
+ (nonnull SODataV4_AmountTransform*) new :(nonnull NSString*)name :(nonnull SODataV4_DataValue*)amount :(nonnull SODataV4_DataValue*)value;
- (nonnull SODataV4_DataValue*) _amount;
- (nonnull SODataV4_DataValue*) _compareValue;
- (nonnull NSString*) _name;
- (void) set_amount :(nonnull SODataV4_DataValue*)value;
- (void) set_compareValue :(nonnull SODataV4_DataValue*)value;
- (void) set_name :(nonnull NSString*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValue* _amount;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataValue* _compareValue;
@property (nonatomic, readwrite, strong, nonnull) NSString* _name;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamFromBinary_internal
#ifndef imported_SODataV4__ByteStreamFromBinary_internal
#define imported_SODataV4__ByteStreamFromBinary_public
/* internal */
@interface SODataV4_ByteStreamFromBinary : SODataV4_ByteStream
{
    @private NSData* _Nonnull _binary;
    @private SODataV4_int _offset;
    @private SODataV4_int _length;
}
- (nonnull id) init;
+ (nonnull SODataV4_ByteStreamFromBinary*) new :(nonnull NSData*)data :(SODataV4_int)offset :(SODataV4_int)length;
/// @internal
///
- (void) _init :(nonnull NSData*)data :(SODataV4_int)offset :(SODataV4_int)length;
/// @brief Does this stream support `SODataV4_ByteStreamFromBinary`.`undoRead`?
///
///
/// @see `SODataV4_ByteStreamFromBinary`.`withUndo`.
- (SODataV4_boolean) canUndo;
/// @brief Read a single byte from this stream.
///
///
/// @return Unsigned integer equivalent of the byte read, or `-1` at end of stream.
- (SODataV4_int) readByte;
/// @brief Undo read of one byte.
///
///
/// @throw `SODataV4_DataStreamException` if undo is not supported by this stream.
/// @param value Byte value that was previously read by the caller and is to be made available to read again.
- (void) undoRead :(SODataV4_byte)value;
/// @brief Does this stream support `SODataV4_ByteStreamFromBinary`.`undoRead`?
///
///
/// @see `SODataV4_ByteStreamFromBinary`.`withUndo`.
@property (nonatomic, readonly) SODataV4_boolean canUndo;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamFromChars_internal
#ifndef imported_SODataV4__ByteStreamFromChars_internal
#define imported_SODataV4__ByteStreamFromChars_public
/* internal */
/// @brief Convert CharStream to UTF-8 ByteStream (for reading).
///
///
@interface SODataV4_ByteStreamFromChars : SODataV4_ByteStream
{
    @private SODataV4_CharStream* _Nonnull stream;
    @private SODataV4_ByteBuffer* _Nonnull buffer;
    @private SODataV4_int offset;
    @private SODataV4_int maxLen;
}
- (nonnull id) init;
/// @internal
///
- (void) _init :(nonnull SODataV4_CharStream*)stream;
/// @brief Close this stream. Automatically calls `SODataV4_ByteStreamFromChars`.`flush` before closing.
///
/// This function can be safely called if the stream is already closed.
- (void) close;
/// @brief Read up to `length` bytes from this stream (may read less, even if the end of stream is not reached).
///
///
/// @return Binary value with at most `length` bytes, or `nil` if there is no remaining data in the stream.
/// @param length Maximum number of bytes to read (must be greater than zero). Defaults to 20,000.
- (nullable NSData*) readBinary :(SODataV4_int)length;
/// @brief Read a single byte from this stream.
///
///
/// @return Unsigned integer equivalent of the byte read, or `-1` at end of stream.
- (SODataV4_int) readByte;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamFromChars_private
#ifndef imported_SODataV4__ByteStreamFromChars_private
#define imported_SODataV4__ByteStreamFromChars_private
@interface SODataV4_ByteStreamFromChars (private)
- (SODataV4_boolean) readMore :(SODataV4_int)length;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamFromChars_internal
#ifndef imported_SODataV4__ByteStreamFromChars_internal
#define imported_SODataV4__ByteStreamFromChars_internal
@interface SODataV4_ByteStreamFromChars (internal)
+ (nonnull SODataV4_ByteStreamFromChars*) new :(nonnull SODataV4_CharStream*)stream;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamToBuffer_internal
#ifndef imported_SODataV4__ByteStreamToBuffer_internal
#define imported_SODataV4__ByteStreamToBuffer_public
/* internal */
/// @brief Subclass of `SODataV4_ByteStream` that writes content to the `SODataV4_ByteStreamToBuffer`.`buffer` property.
///
///
@interface SODataV4_ByteStreamToBuffer : SODataV4_ByteStream
{
    @private SODataV4_ByteBuffer* _Nonnull buffer_;
}
- (nonnull id) init;
+ (nonnull SODataV4_ByteStreamToBuffer*) new :(nonnull SODataV4_ByteBuffer*)buffer;
/// @internal
///
- (void) _init :(nonnull SODataV4_ByteBuffer*)buffer;
/// @brief Buffer into which streamed content will be written.
///
///
- (nonnull SODataV4_ByteBuffer*) buffer;
/// @brief Buffer into which streamed content will be written.
///
///
- (void) setBuffer :(nonnull SODataV4_ByteBuffer*)value;
/// @brief Write to this stream the portion of `data` from the specified `offset` with the specified `length`.
///
///
/// @param data Source data.
- (void) writeBinary :(nonnull NSData*)data;
/// @brief Write a single byte to this stream.
///
///
/// @param value Byte value to be written.
- (void) writeByte :(SODataV4_byte)value;
/// @brief Buffer into which streamed content will be written.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ByteBuffer* buffer;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamWithUndo_internal
#ifndef imported_SODataV4__ByteStreamWithUndo_internal
#define imported_SODataV4__ByteStreamWithUndo_public
/* internal */
@interface SODataV4_ByteStreamWithUndo : SODataV4_ByteStream
{
    @private SODataV4_ByteStream* _Nonnull _stream_;
    @private SODataV4_int _undoCount;
    @private SODataV4_ByteBuffer* _Nonnull _undoStack;
}
- (nonnull id) init;
+ (nonnull SODataV4_ByteStreamWithUndo*) new :(nonnull SODataV4_ByteStream*)stream;
/// @internal
///
- (void) _init :(nonnull SODataV4_ByteStream*)stream;
/// @brief Does this stream support `SODataV4_ByteStreamWithUndo`.`undoRead`?
///
///
/// @see `SODataV4_ByteStreamWithUndo`.`withUndo`.
- (SODataV4_boolean) canUndo;
/// @brief Close this stream. Automatically calls `SODataV4_ByteStreamWithUndo`.`flush` before closing.
///
/// This function can be safely called if the stream is already closed.
- (void) close;
/// @brief Read a single byte from this stream.
///
///
/// @return Unsigned integer equivalent of the byte read, or `-1` at end of stream.
- (SODataV4_int) readByte;
/// @brief Undo read of one byte.
///
///
/// @throw `SODataV4_DataStreamException` if undo is not supported by this stream.
/// @param value Byte value that was previously read by the caller and is to be made available to read again.
- (void) undoRead :(SODataV4_byte)value;
/// @brief Does this stream support `SODataV4_ByteStreamWithUndo`.`undoRead`?
///
///
/// @see `SODataV4_ByteStreamWithUndo`.`withUndo`.
@property (nonatomic, readonly) SODataV4_boolean canUndo;
@end
#endif
#endif

#ifdef import_SODataV4__ByteStreamWithUndo_private
#ifndef imported_SODataV4__ByteStreamWithUndo_private
#define imported_SODataV4__ByteStreamWithUndo_private
@interface SODataV4_ByteStreamWithUndo (private)
- (nonnull SODataV4_ByteStream*) _stream;
- (void) set_stream :(nonnull SODataV4_ByteStream*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_ByteStream* _stream;
@end
#endif
#endif

#ifdef import_SODataV4__CharStreamFromBytes_internal
#ifndef imported_SODataV4__CharStreamFromBytes_internal
#define imported_SODataV4__CharStreamFromBytes_public
/* internal */
/// @brief Convert UTF-8 ByteStream to CharStream (for reading).
///
///
@interface SODataV4_CharStreamFromBytes : SODataV4_CharStream
{
    @private SODataV4_ByteStream* _Nonnull _input;
    @private SODataV4_ByteBuffer* _Nonnull _bytes;
    @private SODataV4_CharBuffer* _Nonnull _chars;
    @private SODataV4_int _index;
}
- (nonnull id) init;
/// @internal
///
- (void) _init :(nonnull SODataV4_ByteStream*)stream;
/// @brief Close this stream. Automatically calls `SODataV4_CharStreamFromBytes`.`flush` before closing.
///
/// This function can be safely called if the stream is already closed.
- (void) close;
/// @brief Read a single character (UTF-16 code unit) from this stream.
///
///
/// @return Unsigned integer equivalent of the character read (a UTF-16 code unit), or `-1` at end of stream.
- (SODataV4_int) readChar;
@end
#endif
#endif

#ifdef import_SODataV4__CharStreamFromBytes_internal
#ifndef imported_SODataV4__CharStreamFromBytes_internal
#define imported_SODataV4__CharStreamFromBytes_internal
@interface SODataV4_CharStreamFromBytes (internal)
+ (nonnull SODataV4_CharStreamFromBytes*) new :(nonnull SODataV4_ByteStream*)stream;
@end
#endif
#endif

#ifdef import_SODataV4__CharStreamFromString_internal
#ifndef imported_SODataV4__CharStreamFromString_internal
#define imported_SODataV4__CharStreamFromString_public
/* internal */
@interface SODataV4_CharStreamFromString : SODataV4_CharStream
{
    @private NSString* _Nonnull _string;
    @private SODataV4_int _offset;
    @private SODataV4_int _length;
}
- (nonnull id) init;
+ (nonnull SODataV4_CharStreamFromString*) new :(nonnull NSString*)text :(SODataV4_int)offset :(SODataV4_int)length;
/// @internal
///
- (void) _init :(nonnull NSString*)text :(SODataV4_int)offset :(SODataV4_int)length;
/// @brief Does this stream support `SODataV4_CharStreamFromString`.`undoRead`?
///
///
/// @see `SODataV4_CharStreamFromString`.`withUndo`.
- (SODataV4_boolean) canUndo;
/// @brief Read a single character (UTF-16 code unit) from this stream.
///
///
/// @return Unsigned integer equivalent of the character read (a UTF-16 code unit), or `-1` at end of stream.
- (SODataV4_int) readChar;
/// @brief Undo read of one character.
///
///
/// @throw `SODataV4_DataStreamException` if undo is not supported by this stream.
/// @param value Character value that was previously read by the caller and is to be made available to read again.
- (void) undoRead :(SODataV4_char)value;
/// @brief Does this stream support `SODataV4_CharStreamFromString`.`undoRead`?
///
///
/// @see `SODataV4_CharStreamFromString`.`withUndo`.
@property (nonatomic, readonly) SODataV4_boolean canUndo;
@end
#endif
#endif

#ifdef import_SODataV4__CharStreamToBuffer_internal
#ifndef imported_SODataV4__CharStreamToBuffer_internal
#define imported_SODataV4__CharStreamToBuffer_public
/* internal */
/// @brief Subclass of `SODataV4_CharStream` that writes content to the `SODataV4_CharStreamToBuffer`.`buffer` property.
///
///
@interface SODataV4_CharStreamToBuffer : SODataV4_CharStream
{
    @private SODataV4_CharBuffer* _Nonnull buffer_;
}
- (nonnull id) init;
+ (nonnull SODataV4_CharStreamToBuffer*) new :(nonnull SODataV4_CharBuffer*)buffer;
/// @internal
///
- (void) _init :(nonnull SODataV4_CharBuffer*)buffer;
/// @brief Buffer into which streamed content will be written.
///
///
- (nonnull SODataV4_CharBuffer*) buffer;
/// @brief Buffer into which streamed content will be written.
///
///
- (void) setBuffer :(nonnull SODataV4_CharBuffer*)value;
/// @brief Write a single character to this stream.
///
///
/// @param value Character value to be written.
- (void) writeChar :(SODataV4_char)value;
/// @brief Write to this stream the portion of `text` from the specified `offset` with the specified `length`.
///
///
/// @param text Source text.
- (void) writeString :(nonnull NSString*)text;
/// @brief Buffer into which streamed content will be written.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_CharBuffer* buffer;
@end
#endif
#endif

#ifdef import_SODataV4__CharStreamWithUndo_internal
#ifndef imported_SODataV4__CharStreamWithUndo_internal
#define imported_SODataV4__CharStreamWithUndo_public
/* internal */
@interface SODataV4_CharStreamWithUndo : SODataV4_CharStream
{
    @private SODataV4_CharStream* _Nonnull _stream_;
    @private SODataV4_int _undoCount;
    @private SODataV4_CharBuffer* _Nonnull _undoStack;
}
- (nonnull id) init;
+ (nonnull SODataV4_CharStreamWithUndo*) new :(nonnull SODataV4_CharStream*)stream;
/// @internal
///
- (void) _init :(nonnull SODataV4_CharStream*)stream;
/// @brief Does this stream support `SODataV4_CharStreamWithUndo`.`undoRead`?
///
///
/// @see `SODataV4_CharStreamWithUndo`.`withUndo`.
- (SODataV4_boolean) canUndo;
/// @brief Close this stream. Automatically calls `SODataV4_CharStreamWithUndo`.`flush` before closing.
///
/// This function can be safely called if the stream is already closed.
- (void) close;
/// @brief Read a single character (UTF-16 code unit) from this stream.
///
///
/// @return Unsigned integer equivalent of the character read (a UTF-16 code unit), or `-1` at end of stream.
- (SODataV4_int) readChar;
/// @brief Undo read of one character.
///
///
/// @throw `SODataV4_DataStreamException` if undo is not supported by this stream.
/// @param value Character value that was previously read by the caller and is to be made available to read again.
- (void) undoRead :(SODataV4_char)value;
/// @brief Does this stream support `SODataV4_CharStreamWithUndo`.`undoRead`?
///
///
/// @see `SODataV4_CharStreamWithUndo`.`withUndo`.
@property (nonatomic, readonly) SODataV4_boolean canUndo;
@end
#endif
#endif

#ifdef import_SODataV4__CharStreamWithUndo_private
#ifndef imported_SODataV4__CharStreamWithUndo_private
#define imported_SODataV4__CharStreamWithUndo_private
@interface SODataV4_CharStreamWithUndo (private)
- (nonnull SODataV4_CharStream*) _stream;
- (void) set_stream :(nonnull SODataV4_CharStream*)value;
@property (nonatomic, readwrite, strong, nonnull) SODataV4_CharStream* _stream;
@end
#endif
#endif

#ifndef imported_SODataV4__DataFormatException_public
#define imported_SODataV4__DataFormatException_public
/// @brief Exception thrown when data does not match the expected format.
///
///
@interface SODataV4_DataFormatException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataFormatException*) new;
/// @internal
///
- (void) _init;
@end
#endif

#ifndef imported_SODataV4__DataNetworkException_public
#define imported_SODataV4__DataNetworkException_public
/// @brief Exception thrown when a request fails due to a data network issue.
///
///
@interface SODataV4_DataNetworkException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataNetworkException*) new;
/// @internal
///
- (void) _init;
@end
#endif

#ifndef imported_SODataV4__DataPath_public
#define imported_SODataV4__DataPath_public
/// @brief Used together with `SODataV4_DataQuery` to represent a select, expand or sort item which is a single-part or multi-part path expression.
///
/// For example, a path whose OData URL representation is "Address/City" might be used to access the "City" property in a complex-typed "Address" property.
/// Also used to represent paths in OData CSDL.
@interface SODataV4_DataPath : SODataV4_PropertyPath
{
    @private SODataV4_int _type;
    @private SODataV4_DataPath* _Nullable _parent;
    @private SODataV4_StringList* _Nullable _segments;
    @private SODataV4_nullable_int _itemIndex;
    @private SODataV4_EntityKey* _Nullable _entityKey;
    @private NSString* _Nullable lambdaVariable_;
    @private SODataV4_Property* _Nullable definedProperty_;
    @private NSString* _Nullable dynamicProperty_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Sets the item index to address an element of a collection typed property.
///
///
/// @return This data path.
/// @param itemIndex Zero-based index of the element in the collection.
- (nonnull SODataV4_DataPath*) atIndex :(SODataV4_int)itemIndex;
/// @internal
///
+ (nullable SODataV4_DataPath*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_DataPath*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.PATH, DataType.PATH_EXPRESSION, DataType.ANNOTATION_PATH, DataType.NAVIGATION_PATH, DataType.STRUCTURAL_PATH, or DataType.DYNAMIC_PATH.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @brief The defined property for a single-part path or the terminating defined property for a multi-part path.
///
///
/// @see `SODataV4_DataPath`.`of`, `SODataV4_DataPath`.`path`.
- (nullable SODataV4_Property*) definedProperty;
/// @brief Construct a new multi-part path, with this path as the `SODataV4_DataPath`.`parentPath`.
///
///
/// @return A new multi-part path.
/// @param child Value for `SODataV4_DataPath`.`dynamicProperty` in the new path.
- (nonnull SODataV4_DataPath*) dynamicPath :(nonnull NSString*)child;
/// @brief The dynamic property for a single-part path or the terminating dynamic property for a multi-part path.
///
///
/// @see `SODataV4_DataPath`.`ofDynamic`, `SODataV4_DataPath`.`dynamicPath`.
- (nullable NSString*) dynamicProperty;
/// @brief The entity key of the element in an entity collection.
///
///
- (nullable SODataV4_EntityKey*) entityKey;
/// @return `true` if this path has segments.
///
- (SODataV4_boolean) hasSegments;
/// @brief `true` if this path has type DataType.NAVIGATION_PATH.
///
///
- (SODataV4_boolean) isNavigation;
/// @return `true` if this path is simply for the specified target `property`.
/// @param property Specified target property.
- (SODataV4_boolean) isProperty :(nonnull SODataV4_Property*)property;
/// @brief `true` if this path has type DataType.STRUCTURAL_PATH.
///
///
- (SODataV4_boolean) isStructural;
/// @brief The index of an element in a collection.
///
///
- (SODataV4_nullable_int) itemIndex;
/// @brief Construct a lambda variable path (for use with 'any' and 'all' lambda operators).
///
///
/// @return A new lambda-variable path.
/// @param name Lambda variable name.
+ (nonnull SODataV4_DataPath*) lambda :(nonnull NSString*)name;
/// @brief The lambda variable name for a lambda variable path.
///
///
/// @see `SODataV4_DataPath`.`lambda`.
- (nullable NSString*) lambdaVariable;
/// @brief Construct a new single-part path.
///
///
/// @return A new single-part path.
/// @param start Value for `SODataV4_DataPath`.`definedProperty` in the new path.
+ (nonnull SODataV4_DataPath*) of :(nonnull SODataV4_Property*)start;
/// @brief Construct a new single-part path.
///
///
/// @return A new single-part path.
/// @param start Value for `SODataV4_DataPath`.`dynamicProperty` in the new path.
+ (nonnull SODataV4_DataPath*) ofDynamic :(nonnull NSString*)start;
/// @brief The parent path for a multi-part path; `nil` for a single-part path.
///
///
/// @see `SODataV4_DataPath`.`path`.
- (nullable SODataV4_DataPath*) parentPath;
/// @brief Construct a new multi-part path, with this path as the `SODataV4_DataPath`.`parentPath`.
///
///
/// @return A new multi-part path.
/// @param child Value for `SODataV4_DataPath`.`definedProperty` in the new path.
- (nonnull SODataV4_DataPath*) path :(nonnull SODataV4_Property*)child;
/// @brief The '/'-separated segments in this path, as a list.
///
///
- (nonnull SODataV4_StringList*) pathSegments;
/// @brief Data type code of DataType.PATH, DataType.PATH_EXPRESSION, DataType.ANNOTATION_PATH, DataType.NAVIGATION_PATH, DataType.STRUCTURAL_PATH, or DataType.DYNAMIC_PATH.
///
///
- (SODataV4_int) pathType;
/// @brief The `SODataV4_DataPath`.`definedProperty` from the topmost `SODataV4_DataPath`.`parentPath` in this path, or `nil` if unknown.
///
///
- (nullable SODataV4_Property*) rootProperty;
/// @brief The number of segments in this path.
///
///
- (SODataV4_int) segmentCount;
/// @return this property or path, expressed as a `DataPath`.
///
- (nonnull SODataV4_DataPath*) toPath;
/// @brief Return the OData CSDL path expression syntax for this path ('/'-separated segments).
///
///
- (nonnull NSString*) toString;
/// @return The path, property, constant value or query function/operator call which is wrapped by this object.
///
- (nonnull SODataV4_DataValue*) unwrap;
/// @brief Sets the entity key to address an element of an entity collection.
///
///
/// @return This data path.
/// @param entityKey Entity key of the element in the entity collection.
- (nonnull SODataV4_DataPath*) withKey :(nonnull SODataV4_EntityKey*)entityKey;
/// @return A new data path with the specified `type` and `segments`.
/// @param type Value for `SODataV4_DataPath`.`pathType`.
/// @param segments Value for `SODataV4_DataPath`.`pathSegments`.
+ (nonnull SODataV4_DataPath*) withSegments :(SODataV4_int)type :(nonnull SODataV4_StringList*)segments;
/// @brief Data type with a `SODataV4_DataType`.`code` of DataType.PATH, DataType.PATH_EXPRESSION, DataType.ANNOTATION_PATH, DataType.NAVIGATION_PATH, DataType.STRUCTURAL_PATH, or DataType.DYNAMIC_PATH.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief The defined property for a single-part path or the terminating defined property for a multi-part path.
///
///
/// @see `SODataV4_DataPath`.`of`, `SODataV4_DataPath`.`path`.
@property (nonatomic, readonly, strong, nullable) SODataV4_Property* definedProperty;
/// @brief The dynamic property for a single-part path or the terminating dynamic property for a multi-part path.
///
///
/// @see `SODataV4_DataPath`.`ofDynamic`, `SODataV4_DataPath`.`dynamicPath`.
@property (nonatomic, readonly, strong, nullable) NSString* dynamicProperty;
/// @brief The entity key of the element in an entity collection.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_EntityKey* entityKey;
/// @brief `true` if this path has type DataType.NAVIGATION_PATH.
///
///
@property (nonatomic, readonly) SODataV4_boolean isNavigation;
/// @brief `true` if this path has type DataType.STRUCTURAL_PATH.
///
///
@property (nonatomic, readonly) SODataV4_boolean isStructural;
/// @brief The index of an element in a collection.
///
///
@property (nonatomic, readonly) SODataV4_nullable_int itemIndex;
/// @brief The lambda variable name for a lambda variable path.
///
///
/// @see `SODataV4_DataPath`.`lambda`.
@property (nonatomic, readonly, strong, nullable) NSString* lambdaVariable;
/// @brief The parent path for a multi-part path; `nil` for a single-part path.
///
///
/// @see `SODataV4_DataPath`.`path`.
@property (nonatomic, readonly, strong, nullable) SODataV4_DataPath* parentPath;
/// @brief The '/'-separated segments in this path, as a list.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_StringList* pathSegments;
/// @brief Data type code of DataType.PATH, DataType.PATH_EXPRESSION, DataType.ANNOTATION_PATH, DataType.NAVIGATION_PATH, DataType.STRUCTURAL_PATH, or DataType.DYNAMIC_PATH.
///
///
@property (nonatomic, readonly) SODataV4_int pathType;
/// @brief The `SODataV4_DataPath`.`definedProperty` from the topmost `SODataV4_DataPath`.`parentPath` in this path, or `nil` if unknown.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_Property* rootProperty;
/// @brief The number of segments in this path.
///
///
@property (nonatomic, readonly) SODataV4_int segmentCount;
@end
#endif

#ifdef import_SODataV4__DataPath_private
#ifndef imported_SODataV4__DataPath_private
#define imported_SODataV4__DataPath_private
@interface SODataV4_DataPath (private)
+ (nonnull SODataV4_DataPath*) new;
+ (nonnull SODataV4_DataPath*) _new1 :(nullable SODataV4_DataPath*)p1 :(nullable NSString*)p2;
+ (nonnull SODataV4_DataPath*) _new2 :(nullable NSString*)p1;
+ (nonnull SODataV4_DataPath*) _new3 :(nullable SODataV4_Property*)p1;
+ (nonnull SODataV4_DataPath*) _new4 :(nullable NSString*)p1;
+ (nonnull SODataV4_DataPath*) _new5 :(nullable SODataV4_DataPath*)p1 :(nullable SODataV4_Property*)p2;
+ (nonnull SODataV4_DataPath*) _new6 :(SODataV4_int)p1 :(nullable SODataV4_StringList*)p2;
@end
#endif
#endif

#ifdef import_SODataV4__DataPath_internal
#ifndef imported_SODataV4__DataPath_internal
#define imported_SODataV4__DataPath_internal
@interface SODataV4_DataPath (internal)
- (void) clearParentPath;
@end
#endif
#endif

#ifndef imported_SODataV4__DataQueryException_public
#define imported_SODataV4__DataQueryException_public
/// @brief Exception thrown when a query cannot be parsed or evaluated.
///
///
@interface SODataV4_DataQueryException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataQueryException*) new;
/// @internal
///
- (void) _init;
/// @return a new exception to be thrown when a value cannot be parsed from a query URL.
/// @param value Text of value that could not be parsed.
/// @param type Name of expected data type.
+ (nonnull SODataV4_DataQueryException*) cannotParse :(nonnull NSString*)value :(nonnull NSString*)type;
/// @return A new exception with the specified root cause.
/// @param cause Root cause.
+ (nonnull SODataV4_DataQueryException*) withCause :(nullable NSException*)cause;
/// @return A new exception with the specified message text.
/// @param message Message text.
+ (nonnull SODataV4_DataQueryException*) withMessage :(nullable NSString*)message;
@end
#endif

#ifdef import_SODataV4__DataQueryException_private
#ifndef imported_SODataV4__DataQueryException_private
#define imported_SODataV4__DataQueryException_private
@interface SODataV4_DataQueryException (private)
+ (nonnull SODataV4_DataQueryException*) _new1 :(nullable NSException*)p1;
+ (nonnull SODataV4_DataQueryException*) _new2 :(nullable NSString*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__DataSchemaException_public
#define imported_SODataV4__DataSchemaException_public
/// @brief Exception thrown when a problem is detected with a data schema.
///
///
@interface SODataV4_DataSchemaException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataSchemaException*) new;
/// @internal
///
- (void) _init;
@end
#endif

#ifndef imported_SODataV4__DataServiceException_public
#define imported_SODataV4__DataServiceException_public
/// @brief Exception thrown when a `DataService` request fails due to a data service issue.
///
///
@interface SODataV4_DataServiceException : SODataV4_DataException
{
    @private SODataV4_int status_;
    @private SODataV4_ErrorResponse* _Nullable response_;
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataServiceException*) new;
/// @internal
///
- (void) _init;
/// @brief If the data service request returned on OData error response, then this holds the parsed error response. Otherwise `nil`.
///
///
- (nullable SODataV4_ErrorResponse*) response;
/// @brief If the data service request returned on OData error response, then this holds the parsed error response. Otherwise `nil`.
///
///
- (void) setResponse :(nullable SODataV4_ErrorResponse*)value;
/// @brief If the data service request failed with an HTTP error code, then `status` holds the error code. Otherwise zero.
///
///
- (void) setStatus :(SODataV4_int)value;
/// @brief If the data service request failed with an HTTP error code, then `status` holds the error code. Otherwise zero.
///
///
- (SODataV4_int) status;
/// @brief Text describing `status` code.
///
///
/// @see <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html>.
- (nonnull NSString*) statusText;
/// @return A new exception with the specified root cause.
/// @param cause Root cause.
+ (nonnull SODataV4_DataServiceException*) withCause :(nullable NSException*)cause;
/// @return A new exception with the specified root cause and message text.
/// @param cause Root cause.
/// @param message Message text.
+ (nonnull SODataV4_DataServiceException*) withCauseAndMessage :(nullable NSException*)cause :(nullable NSString*)message;
/// @return A new exception with the specified message text.
/// @param message Message text.
+ (nonnull SODataV4_DataServiceException*) withMessage :(nullable NSString*)message;
/// @return A new exception with the specified error code, message text and error response.
/// @param status Error code.
/// @param message Message text.
/// @param response Error response.
+ (nonnull SODataV4_DataServiceException*) withResponse :(SODataV4_int)status :(nullable NSString*)message :(nullable SODataV4_ErrorResponse*)response;
/// @internal
///
+ (nonnull SODataV4_DataServiceException*) withStatus :(SODataV4_int)status;
/// @return A new exception with the specified error code and message text.
/// @param status Error code.
/// @param message (optional) Message text.
+ (nonnull SODataV4_DataServiceException*) withStatus :(SODataV4_int)status :(nullable NSString*)message;
/// @brief If the data service request returned on OData error response, then this holds the parsed error response. Otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_ErrorResponse* response;
/// @brief If the data service request failed with an HTTP error code, then `status` holds the error code. Otherwise zero.
///
///
@property (nonatomic, readwrite) SODataV4_int status;
/// @brief Text describing `status` code.
///
///
/// @see <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html>.
@property (nonatomic, readonly, strong, nonnull) NSString* statusText;
@end
#endif

#ifdef import_SODataV4__DataServiceException_private
#ifndef imported_SODataV4__DataServiceException_private
#define imported_SODataV4__DataServiceException_private
@interface SODataV4_DataServiceException (private)
+ (nonnull NSString*) httpStatusText :(SODataV4_int)status;
+ (nonnull SODataV4_DataServiceException*) _new1 :(nullable NSException*)p1;
+ (nonnull SODataV4_DataServiceException*) _new2 :(nullable NSException*)p1 :(nullable NSString*)p2;
+ (nonnull SODataV4_DataServiceException*) _new3 :(nullable NSString*)p1;
+ (nonnull SODataV4_DataServiceException*) _new4 :(nullable NSString*)p1 :(SODataV4_int)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__DataStorageException_public
#define imported_SODataV4__DataStorageException_public
/// @brief Exception thrown when a `DataService` request fails due to a data storage issue.
///
///
@interface SODataV4_DataStorageException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataStorageException*) new;
/// @internal
///
- (void) _init;
@end
#endif

#ifndef imported_SODataV4__DataStreamException_public
#define imported_SODataV4__DataStreamException_public
/// @internal
///
@interface SODataV4_DataStreamException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_DataStreamException*) new;
/// @internal
///
- (void) _init;
/// @return A new exception with the specified root cause.
/// @param cause Root cause.
+ (nonnull SODataV4_DataStreamException*) withCause :(nullable NSException*)cause;
/// @return A new exception with the specified message text.
/// @param message Message text.
+ (nonnull SODataV4_DataStreamException*) withMessage :(nullable NSString*)message;
@end
#endif

#ifdef import_SODataV4__DataStreamException_private
#ifndef imported_SODataV4__DataStreamException_private
#define imported_SODataV4__DataStreamException_private
@interface SODataV4_DataStreamException (private)
+ (nonnull SODataV4_DataStreamException*) _new1 :(nullable NSException*)p1;
+ (nonnull SODataV4_DataStreamException*) _new2 :(nullable NSString*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__EmptyByteStream_internal
#ifndef imported_SODataV4__EmptyByteStream_internal
#define imported_SODataV4__EmptyByteStream_public
/* internal */
@interface SODataV4_EmptyByteStream : SODataV4_ByteStream
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EmptyByteStream*) new;
/// @internal
///
- (void) _init;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
- (nullable NSString*) entityTag;
/// @brief File name if known, otherwise `nil`.
///
///
- (nullable NSString*) fileName;
- (nonnull SODataV4_ImmutableException*) immutable;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (nullable NSString*) mediaType;
/// @brief Read a single byte from this stream.
///
///
/// @return Unsigned integer equivalent of the byte read, or `-1` at end of stream.
- (SODataV4_int) readByte;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
- (void) setEntityTag :(nullable NSString*)value;
/// @brief File name if known, otherwise `nil`.
///
///
- (void) setFileName :(nullable NSString*)value;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (void) setMediaType :(nullable NSString*)value;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
@property (nonatomic, readwrite, strong, nullable) NSString* entityTag;
/// @brief File name if known, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* fileName;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
@property (nonatomic, readwrite, strong, nullable) NSString* mediaType;
@end
#endif
#endif

#ifdef import_SODataV4__EmptyCharStream_internal
#ifndef imported_SODataV4__EmptyCharStream_internal
#define imported_SODataV4__EmptyCharStream_public
/* internal */
@interface SODataV4_EmptyCharStream : SODataV4_CharStream
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_EmptyCharStream*) new;
/// @internal
///
- (void) _init;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
- (nullable NSString*) entityTag;
/// @brief File name if known, otherwise `nil`.
///
///
- (nullable NSString*) fileName;
- (nonnull SODataV4_ImmutableException*) immutable;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (nullable NSString*) mediaType;
/// @brief Read a single character (UTF-16 code unit) from this stream.
///
///
/// @return Unsigned integer equivalent of the character read (a UTF-16 code unit), or `-1` at end of stream.
- (SODataV4_int) readChar;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
- (void) setEntityTag :(nullable NSString*)value;
/// @brief File name if known, otherwise `nil`.
///
///
- (void) setFileName :(nullable NSString*)value;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
- (void) setMediaType :(nullable NSString*)value;
/// @brief Entity tag if known, otherwise `nil`.
///
///
/// @see [HTTP ETag](http://en.wikipedia.org/wiki/HTTP_ETag).
@property (nonatomic, readwrite, strong, nullable) NSString* entityTag;
/// @brief File name if known, otherwise `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* fileName;
/// @brief Media type if known, otherwise `nil`.
///
///
/// @see [Internet media type](http://en.wikipedia.org/wiki/Mime_type).
@property (nonatomic, readwrite, strong, nullable) NSString* mediaType;
@end
#endif
#endif

#ifndef imported_SODataV4__ExpandTransform_public
#define imported_SODataV4__ExpandTransform_public
/// @brief Represents an expand transform item.
///
///
@interface SODataV4_ExpandTransform : SODataV4_TransformValue
{
    @private SODataV4_PropertyPath* _Nonnull propertyPath_;
    @private SODataV4_FilterTransform* _Nullable filter_;
    @private SODataV4_ExpandTransform* _Nullable expandItem_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Creates an expand transformation item.
///
///
/// @return The expand transformation item.
/// @param propertyPath The property path of the navigation property to be expanded in the expand transformation.
+ (nonnull SODataV4_ExpandTransform*) create :(nonnull SODataV4_PropertyPath*)propertyPath;
/// @brief The child expand item to be applied.
///
///
- (nullable SODataV4_ExpandTransform*) expandItem;
/// @brief The filter transform to be applied for the expand transformation.
///
///
- (nullable SODataV4_FilterTransform*) filter;
/// @brief The path of the navigation property to expand.
///
///
- (nonnull SODataV4_PropertyPath*) propertyPath;
/// @brief Creates an expand transformation item with a child expand transformation item.
///
///
/// @return The expand transformation item.
/// @param propertyPath The property path of the navigation property to be expanded in the expand transformation.
/// @param expandItem The child expand transformation item of the expand transformation item to be created.
+ (nonnull SODataV4_ExpandTransform*) withExpand :(nonnull SODataV4_PropertyPath*)propertyPath :(nonnull SODataV4_ExpandTransform*)expandItem;
/// @brief Creates an expand transformation item with a filter transformation.
///
///
/// @return The expand transformation item.
/// @param propertyPath The property path of the navigation property to be expanded in the expand transformation.
/// @param filter The filter transform of the expand transformation item to be created.
+ (nonnull SODataV4_ExpandTransform*) withFilter :(nonnull SODataV4_PropertyPath*)propertyPath :(nonnull SODataV4_FilterTransform*)filter;
/// @brief The child expand item to be applied.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_ExpandTransform* expandItem;
/// @brief The filter transform to be applied for the expand transformation.
///
///
@property (nonatomic, readonly, strong, nullable) SODataV4_FilterTransform* filter;
/// @brief The path of the navigation property to expand.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_PropertyPath* propertyPath;
@end
#endif

#ifdef import_SODataV4__ExpandTransform_private
#ifndef imported_SODataV4__ExpandTransform_private
#define imported_SODataV4__ExpandTransform_private
@interface SODataV4_ExpandTransform (private)
+ (nonnull SODataV4_ExpandTransform*) new;
+ (nonnull SODataV4_ExpandTransform*) _new1 :(nonnull SODataV4_PropertyPath*)p1;
+ (nonnull SODataV4_ExpandTransform*) _new2 :(nonnull SODataV4_PropertyPath*)p1 :(nullable SODataV4_ExpandTransform*)p2;
+ (nonnull SODataV4_ExpandTransform*) _new3 :(nonnull SODataV4_PropertyPath*)p1 :(nullable SODataV4_FilterTransform*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__FilterTransform_public
#define imported_SODataV4__FilterTransform_public
/// @brief Represents a filter transform item.
///
///
@interface SODataV4_FilterTransform : SODataV4_TransformValue
{
    @private SODataV4_QueryFilter* _Nonnull queryFilter_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Creates a filter transform by wrapping a query filter.
///
///
/// @return The filter transform.
/// @param queryFilter The query filter value.
+ (nonnull SODataV4_FilterTransform*) of :(nonnull SODataV4_QueryFilter*)queryFilter;
/// @brief The query filter of the filter transform.
///
///
- (nonnull SODataV4_QueryFilter*) queryFilter;
/// @brief The query filter of the filter transform.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_QueryFilter* queryFilter;
@end
#endif

#ifdef import_SODataV4__FilterTransform_private
#ifndef imported_SODataV4__FilterTransform_private
#define imported_SODataV4__FilterTransform_private
@interface SODataV4_FilterTransform (private)
+ (nonnull SODataV4_FilterTransform*) new;
+ (nonnull SODataV4_FilterTransform*) _new1 :(nonnull SODataV4_QueryFilter*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyCollection_public
#define imported_SODataV4__GeographyCollection_public
/// @brief A collection of geography values.
///
///
@interface SODataV4_GeographyCollection : SODataV4_GeographyValue
{
    @private SODataV4_GeographyValueList* _Nonnull geographies_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyCollection*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyCollection*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyCollection*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @brief List of geography values.
///
///
- (nonnull SODataV4_GeographyValueList*) geographies;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyCollection*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyCollection*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyCollection*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief List of geography values.
///
///
- (void) setGeographies :(nonnull SODataV4_GeographyValueList*)value;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief List of geography values.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_GeographyValueList* geographies;
@end
#endif

#ifdef import_SODataV4__GeographyCollection_private
#ifndef imported_SODataV4__GeographyCollection_private
#define imported_SODataV4__GeographyCollection_private
@interface SODataV4_GeographyCollection (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyCollection*) _new2 :(nonnull SODataV4_GeographyValueList*)p1 :(SODataV4_int)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyLineString_public
#define imported_SODataV4__GeographyLineString_public
/// @brief A sequence of geography points which represents a joined string of lines.
///
///
@interface SODataV4_GeographyLineString : SODataV4_GeographyValue
{
    @private SODataV4_LineStringCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyLineString*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyLineString*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyLineString*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_LineStringCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyLineString*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyLineString*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyLineString*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_LineStringCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_LineStringCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeographyLineString_private
#ifndef imported_SODataV4__GeographyLineString_private
#define imported_SODataV4__GeographyLineString_private
@interface SODataV4_GeographyLineString (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyLineString*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_LineStringCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyMultiLineString_public
#define imported_SODataV4__GeographyMultiLineString_public
/// @brief A sequence of geography line strings.
///
///
@interface SODataV4_GeographyMultiLineString : SODataV4_GeographyValue
{
    @private SODataV4_MultiLineStringCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyMultiLineString*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyMultiLineString*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyMultiLineString*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_MultiLineStringCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyMultiLineString*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyMultiLineString*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyMultiLineString*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_MultiLineStringCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MultiLineStringCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeographyMultiLineString_private
#ifndef imported_SODataV4__GeographyMultiLineString_private
#define imported_SODataV4__GeographyMultiLineString_private
@interface SODataV4_GeographyMultiLineString (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyMultiLineString*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiLineStringCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyMultiPoint_public
#define imported_SODataV4__GeographyMultiPoint_public
/// @brief A sequence of geography points.
///
///
@interface SODataV4_GeographyMultiPoint : SODataV4_GeographyValue
{
    @private SODataV4_MultiPointCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyMultiPoint*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyMultiPoint*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyMultiPoint*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_MultiPointCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyMultiPoint*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyMultiPoint*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyMultiPoint*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_MultiPointCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MultiPointCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeographyMultiPoint_private
#ifndef imported_SODataV4__GeographyMultiPoint_private
#define imported_SODataV4__GeographyMultiPoint_private
@interface SODataV4_GeographyMultiPoint (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyMultiPoint*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPointCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyMultiPolygon_public
#define imported_SODataV4__GeographyMultiPolygon_public
/// @brief A sequence of geography polygons.
///
///
@interface SODataV4_GeographyMultiPolygon : SODataV4_GeographyValue
{
    @private SODataV4_MultiPolygonCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyMultiPolygon*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyMultiPolygon*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyMultiPolygon*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_MultiPolygonCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyMultiPolygon*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyMultiPolygon*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyMultiPolygon*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_MultiPolygonCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MultiPolygonCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeographyMultiPolygon_private
#ifndef imported_SODataV4__GeographyMultiPolygon_private
#define imported_SODataV4__GeographyMultiPolygon_private
@interface SODataV4_GeographyMultiPolygon (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyMultiPolygon*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPolygonCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyPoint_public
#define imported_SODataV4__GeographyPoint_public
/// @brief A geography point.
///
///
@interface SODataV4_GeographyPoint : SODataV4_GeographyValue
{
    @private SODataV4_PointCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyPoint*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyPoint*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyPoint*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_PointCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyPoint*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyPoint*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyPoint*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_PointCoordinates*)value;
/// @return 2D geography point.
/// @param latitude Y-coordinate.
/// @param longitude X-coordinate.
+ (nonnull SODataV4_GeographyPoint*) withLatitudeLongitude :(SODataV4_double)latitude :(SODataV4_double)longitude;
/// @return 2D geography point.
/// @param x X-coordinate (longitude).
/// @param y Y-coordinate (latitude).
+ (nonnull SODataV4_GeographyPoint*) withXY :(SODataV4_double)x :(SODataV4_double)y;
/// @return 2D geography point with measure.
/// @param x X-coordinate (longitude).
/// @param y Y-coordinate (latitude).
/// @param m M-coordinate (measure).
+ (nonnull SODataV4_GeographyPoint*) withXYM :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)m;
/// @return 3D geography point.
/// @param x X-coordinate (longitude).
/// @param y Y-coordinate (latitude).
/// @param z Z-coordinate (altitude).
+ (nonnull SODataV4_GeographyPoint*) withXYZ :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)z;
/// @return 3D geography point with measure.
/// @param x X-coordinate (longitude).
/// @param y Y-coordinate (latitude).
/// @param z Z-coordinate (altitude).
/// @param m M-coordinate (measure).
+ (nonnull SODataV4_GeographyPoint*) withXYZM :(SODataV4_double)x :(SODataV4_double)y :(SODataV4_double)z :(SODataV4_double)m;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PointCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeographyPoint_private
#ifndef imported_SODataV4__GeographyPoint_private
#define imported_SODataV4__GeographyPoint_private
@interface SODataV4_GeographyPoint (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyPoint*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_PointCoordinates*)p2;
+ (nonnull SODataV4_GeographyPoint*) _new3 :(nonnull SODataV4_PointCoordinates*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__GeographyPolygon_public
#define imported_SODataV4__GeographyPolygon_public
/// @brief A sequence of geography multi-points which represents a polygon.
///
/// The first multi-point coordinate is the exterior ring, any others are interior rings.
@interface SODataV4_GeographyPolygon : SODataV4_GeographyValue
{
    @private SODataV4_PolygonCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeographyPolygon*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeographyPolygon*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeographyPolygon*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_PolygonCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeographyPolygon*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeographyPolygon*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeographyPolygon*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_PolygonCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PolygonCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeographyPolygon_private
#ifndef imported_SODataV4__GeographyPolygon_private
#define imported_SODataV4__GeographyPolygon_private
@interface SODataV4_GeographyPolygon (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeographyPolygon*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_PolygonCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryCollection_public
#define imported_SODataV4__GeometryCollection_public
/// @brief A collection of geometry values.
///
///
@interface SODataV4_GeometryCollection : SODataV4_GeometryValue
{
    @private SODataV4_GeometryValueList* _Nonnull geometries_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryCollection*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryCollection*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryCollection*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @brief List of geometry values.
///
///
- (nonnull SODataV4_GeometryValueList*) geometries;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryCollection*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryCollection*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryCollection*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief List of geometry values.
///
///
- (void) setGeometries :(nonnull SODataV4_GeometryValueList*)value;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief List of geometry values.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_GeometryValueList* geometries;
@end
#endif

#ifdef import_SODataV4__GeometryCollection_private
#ifndef imported_SODataV4__GeometryCollection_private
#define imported_SODataV4__GeometryCollection_private
@interface SODataV4_GeometryCollection (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryCollection*) _new2 :(nonnull SODataV4_GeometryValueList*)p1 :(SODataV4_int)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryLineString_public
#define imported_SODataV4__GeometryLineString_public
/// @brief A sequence of geometry points which represents a joined string of lines.
///
///
@interface SODataV4_GeometryLineString : SODataV4_GeometryValue
{
    @private SODataV4_LineStringCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryLineString*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryLineString*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryLineString*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_LineStringCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryLineString*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryLineString*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryLineString*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_LineStringCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_LineStringCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeometryLineString_private
#ifndef imported_SODataV4__GeometryLineString_private
#define imported_SODataV4__GeometryLineString_private
@interface SODataV4_GeometryLineString (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryLineString*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_LineStringCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryMultiLineString_public
#define imported_SODataV4__GeometryMultiLineString_public
/// @brief A sequence of geometry line strings.
///
///
@interface SODataV4_GeometryMultiLineString : SODataV4_GeometryValue
{
    @private SODataV4_MultiLineStringCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryMultiLineString*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryMultiLineString*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryMultiLineString*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_MultiLineStringCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryMultiLineString*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryMultiLineString*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryMultiLineString*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_MultiLineStringCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MultiLineStringCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeometryMultiLineString_private
#ifndef imported_SODataV4__GeometryMultiLineString_private
#define imported_SODataV4__GeometryMultiLineString_private
@interface SODataV4_GeometryMultiLineString (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryMultiLineString*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiLineStringCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryMultiPoint_public
#define imported_SODataV4__GeometryMultiPoint_public
/// @brief A sequence of geometry points.
///
///
@interface SODataV4_GeometryMultiPoint : SODataV4_GeometryValue
{
    @private SODataV4_MultiPointCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryMultiPoint*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryMultiPoint*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryMultiPoint*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_MultiPointCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryMultiPoint*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryMultiPoint*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryMultiPoint*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_MultiPointCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MultiPointCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeometryMultiPoint_private
#ifndef imported_SODataV4__GeometryMultiPoint_private
#define imported_SODataV4__GeometryMultiPoint_private
@interface SODataV4_GeometryMultiPoint (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryMultiPoint*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPointCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryMultiPolygon_public
#define imported_SODataV4__GeometryMultiPolygon_public
/// @brief A sequence of geometry polygons.
///
///
@interface SODataV4_GeometryMultiPolygon : SODataV4_GeometryValue
{
    @private SODataV4_MultiPolygonCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryMultiPolygon*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryMultiPolygon*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryMultiPolygon*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_MultiPolygonCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryMultiPolygon*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryMultiPolygon*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryMultiPolygon*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_MultiPolygonCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_MultiPolygonCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeometryMultiPolygon_private
#ifndef imported_SODataV4__GeometryMultiPolygon_private
#define imported_SODataV4__GeometryMultiPolygon_private
@interface SODataV4_GeometryMultiPolygon (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryMultiPolygon*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_MultiPolygonCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryPoint_public
#define imported_SODataV4__GeometryPoint_public
/// @brief A geometry point.
///
///
@interface SODataV4_GeometryPoint : SODataV4_GeometryValue
{
    @private SODataV4_PointCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryPoint*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryPoint*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryPoint*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_PointCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryPoint*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryPoint*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryPoint*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_PointCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PointCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeometryPoint_private
#ifndef imported_SODataV4__GeometryPoint_private
#define imported_SODataV4__GeometryPoint_private
@interface SODataV4_GeometryPoint (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryPoint*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_PointCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GeometryPolygon_public
#define imported_SODataV4__GeometryPolygon_public
/// @brief A sequence of geometry multi-points which represents a polygon.
///
///
@interface SODataV4_GeometryPolygon : SODataV4_GeometryValue
{
    @private SODataV4_PolygonCoordinates* _Nonnull coordinates_;
}
- (nonnull id) init;
/// @brief Constructor
///
///
+ (nonnull SODataV4_GeometryPolygon*) new;
/// @internal
///
- (void) _init;
/// @internal
///
+ (nullable SODataV4_GeometryPolygon*) castOptional :(nullable SODataV4_DataValue*)value;
/// @internal
///
+ (nonnull SODataV4_GeometryPolygon*) castRequired :(nullable SODataV4_DataValue*)value;
/// @brief The coordinates of this value.
///
///
- (nonnull SODataV4_PolygonCoordinates*) coordinates;
/// @brief Data type of the wrapped value.
///
///
- (nonnull SODataV4_DataType*) dataType;
/// @internal
///
- (nonnull NSString*) formatWKT;
/// @return This value formatted in OData WKT (well-known text) format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
- (nonnull NSString*) formatWKT :(SODataV4_boolean)sridRequired;
/// @return A value parsed from text in [GeoJSON](http://geojson.org) format.
/// @param text A value in GeoJSON format.
+ (nonnull SODataV4_GeometryPolygon*) parse :(nonnull NSString*)text;
/// @internal
///
+ (nonnull SODataV4_GeometryPolygon*) parseWKT :(nonnull NSString*)text;
/// @return A value parsed from OData WKT (well-known-text) format.
/// @param text A value in OData WKT format.
/// @param sridRequired (optional) Is SRID prefix required?
/// @see <https://en.wikipedia.org/wiki/Well-known_text>, [OData ABNF](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/abnf/odata-abnf-construction-rules.txt).
+ (nonnull SODataV4_GeometryPolygon*) parseWKT :(nonnull NSString*)text :(SODataV4_boolean)sridRequired;
/// @brief The coordinates of this value.
///
///
- (void) setCoordinates :(nonnull SODataV4_PolygonCoordinates*)value;
/// @brief The coordinates of this value.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_PolygonCoordinates* coordinates;
/// @brief Data type of the wrapped value.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
@end
#endif

#ifdef import_SODataV4__GeometryPolygon_private
#ifndef imported_SODataV4__GeometryPolygon_private
#define imported_SODataV4__GeometryPolygon_private
@interface SODataV4_GeometryPolygon (private)
+ (nonnull SODataV4_MutableInt*) _new1 :(SODataV4_int)p1;
+ (nonnull SODataV4_GeometryPolygon*) _new2 :(SODataV4_int)p1 :(nonnull SODataV4_PolygonCoordinates*)p2;
@end
#endif
#endif

#ifndef imported_SODataV4__GroupTransform_public
#define imported_SODataV4__GroupTransform_public
/// @brief Represents a group transform item.
///
///
@interface SODataV4_GroupTransform : SODataV4_TransformValue
{
    @private SODataV4_PropertyPathList* _Nonnull groupingPaths_;
    @private SODataV4_TransformValueList* _Nullable transformValues_;
}
- (nonnull id) init;
/// @internal
///
- (void) _init;
/// @brief Adds new aggregate items to the GroupTransform.
///
///
/// @return The group transform.
/// @param items The transform items to be added.
- (nonnull SODataV4_GroupTransform*) aggregate :(nonnull NSArray<SODataV4_AggregateValue*>*)items;
/// @brief Adds new aggregate itemlist to the GroupTransform.
///
///
/// @return The group transform.
/// @param items The transform items to be added.
- (nonnull SODataV4_GroupTransform*) aggregateList :(nonnull SODataV4_AggregateValueList*)items;
/// @brief Creates a GroupTransform item with the given properties.
///
///
/// @return The created item.
/// @param items The properties for grouping.
+ (nonnull SODataV4_GroupTransform*) groupBy :(nonnull NSArray<SODataV4_PropertyPath*>*)items;
/// @brief Creates a GroupTransform item with the given propertylist.
///
///
/// @return The created item.
/// @param items The properties for grouping.
+ (nonnull SODataV4_GroupTransform*) groupByList :(nonnull SODataV4_PropertyPathList*)items;
/// @brief The list of property paths for the group transform item.
///
///
- (nonnull SODataV4_PropertyPathList*) groupingPaths;
/// @brief The list of transform items to be applied for the property paths.
///
///
- (void) setTransformValues :(nullable SODataV4_TransformValueList*)value;
/// @brief Adds new transform items to the GroupTransform.
///
///
/// @return The group transform.
/// @param items The transform items to be added.
- (nonnull SODataV4_GroupTransform*) transform :(nonnull NSArray<SODataV4_TransformValue*>*)items;
/// @brief Adds new transform itemlist to the GroupTransform.
///
///
/// @return The group transform.
/// @param items The transform items to be added.
- (nonnull SODataV4_GroupTransform*) transformList :(nonnull SODataV4_TransformValueList*)items;
/// @brief The list of transform items to be applied for the property paths.
///
///
- (nullable SODataV4_TransformValueList*) transformValues;
/// @brief The list of property paths for the group transform item.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_PropertyPathList* groupingPaths;
/// @brief The list of transform items to be applied for the property paths.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_TransformValueList* transformValues;
@end
#endif

#ifdef import_SODataV4__GroupTransform_private
#ifndef imported_SODataV4__GroupTransform_private
#define imported_SODataV4__GroupTransform_private
@interface SODataV4_GroupTransform (private)
+ (nonnull SODataV4_GroupTransform*) new;
- (nonnull SODataV4_GroupTransform*) addApply :(nonnull SODataV4_TransformValue*)item;
+ (nonnull SODataV4_GroupTransform*) _new1 :(nonnull SODataV4_PropertyPathList*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__Property_public
#define imported_SODataV4__Property_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) structural or navigation property.
///
/// Used for properties of complex and entity types.
@interface SODataV4_Property : SODataV4_PropertyPath
{
    @private SODataV4_boolean _isImmutable;
    @private SODataV4_boolean canBeRemoved_;
    @private SODataV4_boolean isRemoved_;
    @private SODataV4_int id_;
    @private NSString* _Nonnull name_;
    @private SODataV4_DataType* _Nonnull type_;
    @private NSString* _Nonnull owningType_;
    @private SODataV4_AnnotationMap* _Nullable _annotations;
    @private SODataV4_CustomPath* _Nullable customPath_;
    @private NSString* _Nullable column_;
    @private NSString* _Nullable columnType_;
    @private SODataV4_int systemFlags_;
    @private SODataV4_boolean isKey_;
    @private SODataV4_boolean isForeignKey_;
    @private SODataV4_boolean isExtension_;
    @private SODataV4_boolean isOptimistic_;
    @private SODataV4_boolean isUnicode_;
    @private SODataV4_int minLength_;
    @private SODataV4_int maxLength_;
    @private SODataV4_int precision_;
    @private SODataV4_int scale_;
    @private SODataV4_int srid_;
    @private SODataV4_DataValue* _Nullable defaultValue_;
    @private SODataV4_boolean isNullable_;
    @private SODataV4_EntitySet* _Nullable offlineLinks_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_Property*) new;
/// @internal
///
- (void) _init;
/// @brief Obsolete. Use `SODataV4_Property`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationList*) annotationList;
/// @brief Obsolete. Use `SODataV4_Property`.`annotations`.
///
///
- (nonnull SODataV4_AnnotationMap*) annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
- (nonnull SODataV4_AnnotationMap*) annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_Property`.`isRemoved`.
- (SODataV4_boolean) canBeRemoved;
/// @brief Database column name for this property.
///
///
- (nullable NSString*) column;
/// @brief Database column type for this property.
///
///
- (nullable NSString*) columnType;
/// @brief If this property has a complex type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isComplex`.
- (nonnull SODataV4_ComplexType*) complexType;
/// @brief If this property is a navigation property, then does it contain its target?
///
///
- (SODataV4_boolean) containsTarget;
/// @brief Path for customized property-to-element mapping.
///
///
- (nullable SODataV4_CustomPath*) customPath;
/// @brief Data type of the property.
///
///
/// @see `SODataV4_Property`.`type` for detailed usage information and example code.
- (nonnull SODataV4_DataType*) dataType;
/// @brief Default value for this item. May be `nil`.
///
///
- (nullable SODataV4_DataValue*) defaultValue;
/// @brief If this property has an entity type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isEntity`.
- (nonnull SODataV4_EntityType*) entityType;
/// @brief If this property has an enum type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isEnum`.
- (nonnull SODataV4_EnumType*) enumType;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_Property`.`minLength`, `SODataV4_Property`.`maxLength`.
- (SODataV4_boolean) fixedLength;
/// @brief Lookup an existing annotation by term name, or throw an exception if the annotation is not found.
///
///
/// @return The annotation.
/// @param term The term name.
/// @see `SODataV4_Property`.`annotations` and `SODataV4_AnnotationMap`.`get`, for looking up annotations that might not exist.
- (nonnull SODataV4_Annotation*) getAnnotation :(nonnull NSString*)term;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_DataValueList*) getBasicList :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull NSData*) getBinary :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_boolean) getBoolean :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_byte) getByte :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_ComplexValue*) getComplex :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_ComplexValueList*) getComplexList :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_BigDecimal*) getDecimal :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_double) getDouble :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_EntityValue*) getEntity :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_EntityValueList*) getEntityList :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_EnumValue*) getEnum :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_float) getFloat :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_GuidValue*) getGuid :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_int) getInt :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull SODataV4_BigInteger*) getInteger :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_long) getLong :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable NSData*) getNullableBinary :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_boolean) getNullableBoolean :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_byte) getNullableByte :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_ComplexValue*) getNullableComplex :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_BigDecimal*) getNullableDecimal :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_double) getNullableDouble :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_EntityValue*) getNullableEntity :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_EnumValue*) getNullableEnum :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_float) getNullableFloat :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_GuidValue*) getNullableGuid :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_int) getNullableInt :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_BigInteger*) getNullableInteger :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_long) getNullableLong :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_short) getNullableShort :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nullable NSString*) getNullableString :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_nullable_int) getNullableUnsignedByte :(nonnull SODataV4_StructureBase*)source;
/// @internal
///
- (nullable SODataV4_DataValue*) getOptionalValue :(nonnull SODataV4_StructureBase*)source;
/// @internal
///
- (nullable SODataV4_DataValue*) getRequiredValue :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_short) getShort :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the stream link for this property from a structure.
///
///
/// @return Stream link.
/// @param source Source structure.
- (nonnull SODataV4_StreamLink*) getStreamLink :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (nonnull NSString*) getString :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set, `SODataV4_CastException` if the value does not have the expected type for this property.
/// @return Property value.
/// @param source Source structure.
- (SODataV4_int) getUnsignedByte :(nonnull SODataV4_StructureBase*)source;
/// @brief Get the value of this property from a structure.
///
///
/// @throw `SODataV4_UndefinedException` if the property value was not previously set.
/// @return Property value.
/// @param source Source structure.
- (nullable SODataV4_DataValue*) getValue :(nonnull SODataV4_StructureBase*)source;
/// @brief If this property is a navigation property, then where are foreign keys found.
///
///
/// @see constants.
- (SODataV4_int) hasForeignKeys;
/// @brief Zero-based index for this property within its parent type definition.
///
///
- (SODataV4_int) id_;
/// @brief `true` if this is a collection-typed property. Equivalent to `type.isList`.
///
///
- (SODataV4_boolean) isCollection;
/// @brief `true` if this property was added since metadata was originally loaded.
///
///
- (SODataV4_boolean) isExtension;
/// @brief `true` if this property is a primary key, or part of a composite foreign key.
///
///
- (SODataV4_boolean) isForeignKey;
/// @brief `true` if this property is immutable (non-updatable after insert).
///
///
- (SODataV4_boolean) isImmutable;
/// @brief `true` if this property is the primary key, or part of a composite primary key.
///
///
- (SODataV4_boolean) isKey;
/// @brief `true` if this is a navigation property.
///
///
- (SODataV4_boolean) isNavigation;
/// @brief `true` if this item is nullable.
///
///
- (SODataV4_boolean) isNullable;
/// @brief `true` if this property is used for optimistic concurrency control (part of entity tag).
///
/// For OData V3, this relates to a ConcurrencyMode of "Fixed".
/// For OData V4, this relates to the use of Org.OData.Core.V1.OptimisticConcurrency in
/// one or more entity sets using the entity type containing this property.
- (SODataV4_boolean) isOptimistic;
/// @brief `true` if this property is persistent (stored in the local database when offline).
///
///
- (SODataV4_boolean) isPersistent;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_Property`.`canBeRemoved`.
- (SODataV4_boolean) isRemoved;
/// @brief `true` if this property has a stream type.
///
///
- (SODataV4_boolean) isStream;
/// @brief `true` if this is a structural property.
///
///
- (SODataV4_boolean) isStructural;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (SODataV4_boolean) isUnicode;
/// @brief If this property is a list with complex item type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isComplexList`.
- (nonnull SODataV4_ComplexType*) itemComplexType;
/// @brief If this property is a list with entity item type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isEntityList`.
- (nonnull SODataV4_EntityType*) itemEntityType;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (SODataV4_int) minLength;
/// @brief Name of the property.
///
///
- (nonnull NSString*) name;
/// @brief If this property is a navigation property, then the action upon deletion of the source entity. Zero indicates an undefined action.
///
///
/// @see ON_DELETE_* constants.
- (SODataV4_int) onDeleteAction;
/// @brief Name of type that owns this property.
///
///
- (nonnull NSString*) owningType;
/// @brief If this property is a navigation property with a defined partner property, then the path of the partner.
///
///
- (nullable NSString*) partnerPath;
/// @return A new data path from this property to a `child` property.
/// @param child Child property.
- (nonnull SODataV4_DataPath*) path :(nonnull SODataV4_Property*)child;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (SODataV4_int) precision;
/// @brief Owning type name, forward slash, then property name, e.g. "MySchema.MyEntityType/MyPropertyName".
///
///
- (nonnull NSString*) qualifiedName;
/// @brief If this property is a navigation property with referential constraints, then a map of constraints (from property name in the dependent entity to property name in the principal entity).
///
///
- (nonnull SODataV4_StringMap*) referentialConstraints;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (SODataV4_int) scale;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setBasicList :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_DataValueList*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setBinary :(nonnull SODataV4_StructureBase*)target :(nonnull NSData*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setBoolean :(nonnull SODataV4_StructureBase*)target :(SODataV4_boolean)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setByte :(nonnull SODataV4_StructureBase*)target :(SODataV4_byte)value;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_Property`.`isRemoved`.
- (void) setCanBeRemoved :(SODataV4_boolean)value;
/// @brief Database column name for this property.
///
///
- (void) setColumn :(nullable NSString*)value;
/// @brief Database column type for this property.
///
///
- (void) setColumnType :(nullable NSString*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setComplex :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_ComplexValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setComplexList :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_ComplexValueList*)value;
/// @brief If this property is a navigation property, then does it contain its target?
///
///
- (void) setContainsTarget :(SODataV4_boolean)value;
/// @brief Path for customized property-to-element mapping.
///
///
- (void) setCustomPath :(nullable SODataV4_CustomPath*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setDecimal :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_BigDecimal*)value;
/// @brief Default value for this item. May be `nil`.
///
///
- (void) setDefaultValue :(nullable SODataV4_DataValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setDouble :(nonnull SODataV4_StructureBase*)target :(SODataV4_double)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setEntity :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_EntityValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setEntityList :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_EntityValueList*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setEnum :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_EnumValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setFloat :(nonnull SODataV4_StructureBase*)target :(SODataV4_float)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setGuid :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_GuidValue*)value;
/// @brief If this property is a navigation property, then where are foreign keys found.
///
///
/// @see constants.
- (void) setHasForeignKeys :(SODataV4_int)value;
/// @brief Zero-based index for this property within its parent type definition.
///
///
- (void) setId_ :(SODataV4_int)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setInt :(nonnull SODataV4_StructureBase*)target :(SODataV4_int)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setInteger :(nonnull SODataV4_StructureBase*)target :(nonnull SODataV4_BigInteger*)value;
/// @brief `true` if this property was added since metadata was originally loaded.
///
///
- (void) setIsExtension :(SODataV4_boolean)value;
/// @brief `true` if this property is a primary key, or part of a composite foreign key.
///
///
- (void) setIsForeignKey :(SODataV4_boolean)value;
/// @brief `true` if this property is immutable (non-updatable after insert).
///
///
- (void) setIsImmutable :(SODataV4_boolean)value;
/// @brief `true` if this property is the primary key, or part of a composite primary key.
///
///
- (void) setIsKey :(SODataV4_boolean)value;
/// @brief `true` if this item is nullable.
///
///
- (void) setIsNullable :(SODataV4_boolean)value;
/// @brief `true` if this property is used for optimistic concurrency control (part of entity tag).
///
/// For OData V3, this relates to a ConcurrencyMode of "Fixed".
/// For OData V4, this relates to the use of Org.OData.Core.V1.OptimisticConcurrency in
/// one or more entity sets using the entity type containing this property.
- (void) setIsOptimistic :(SODataV4_boolean)value;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_Property`.`canBeRemoved`.
- (void) setIsRemoved :(SODataV4_boolean)value;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
- (void) setIsUnicode :(SODataV4_boolean)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setLong :(nonnull SODataV4_StructureBase*)target :(SODataV4_long)value;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMaxLength :(SODataV4_int)value;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
- (void) setMinLength :(SODataV4_int)value;
/// @brief Name of the property.
///
///
- (void) setName :(nonnull NSString*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableBinary :(nonnull SODataV4_StructureBase*)target :(nullable NSData*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableBoolean :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_boolean)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableByte :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_byte)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableComplex :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_ComplexValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableDecimal :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_BigDecimal*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableDouble :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_double)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableEntity :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_EntityValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableEnum :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_EnumValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableFloat :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_float)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableGuid :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_GuidValue*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableInt :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_int)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableInteger :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_BigInteger*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableLong :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_long)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableShort :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_short)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableString :(nonnull SODataV4_StructureBase*)target :(nullable NSString*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setNullableUnsignedByte :(nonnull SODataV4_StructureBase*)target :(SODataV4_nullable_int)value;
/// @brief If this property is a navigation property, then the action upon deletion of the source entity. Zero indicates an undefined action.
///
///
/// @see ON_DELETE_* constants.
- (void) setOnDeleteAction :(SODataV4_int)value;
/// @brief Name of type that owns this property.
///
///
- (void) setOwningType :(nonnull NSString*)value;
/// @brief If this property is a navigation property with a defined partner property, then the path of the partner.
///
///
- (void) setPartnerPath :(nullable NSString*)value;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
- (void) setPrecision :(SODataV4_int)value;
/// @brief If this property is a navigation property with referential constraints, then a map of constraints (from property name in the dependent entity to property name in the principal entity).
///
///
- (void) setReferentialConstraints :(nonnull SODataV4_StringMap*)value;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
- (void) setScale :(SODataV4_int)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setShort :(nonnull SODataV4_StructureBase*)target :(SODataV4_short)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (void) setSrid :(SODataV4_int)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setString :(nonnull SODataV4_StructureBase*)target :(nonnull NSString*)value;
/// @internal
///
- (void) setSystemFlags :(SODataV4_int)value;
/// @brief Synonym for `SODataV4_Property`.`dataType`.
///
/// If this property has a basic type, then `type.isBasic` will be `true`.
/// If this property has a basic list type, then `type.isBasicList` will be `true`.
/// If this property has a complex type, then `type.isComplex` will be `true` and `type` will be an instance of `SODataV4_ComplexType`.
/// If this property has a complex list type, then `type.isComplexList` will be `true` and `type.itemType` will be an instance of `SODataV4_ComplexType`.
/// If this property has an entity type, then `type.isEntity` will be `true` and `type` will be an instance of `SODataV4_EntityType`.
/// If this property has an entity list type, then `type.isEntityList` will be `true` and `type.itemType` will be an instance of `SODataV4_EntityType`.
///
/// @see `SODataV4_DataType`.`isBasic`, `SODataV4_DataType`.`isBasicList`, `SODataV4_DataType`.`isComplex`, `SODataV4_DataType`.`isComplexList`, `SODataV4_DataType`.`isEntity`, `SODataV4_DataType`.`isEntityList`.
- (void) setType :(nonnull SODataV4_DataType*)value;
/// @brief Set the value of this property in a structure.
///
///
/// @throw `SODataV4_CastException` if the value does not have the expected type for this property.
/// @param target Target structure.
/// @param value Property value.
- (void) setUnsignedByte :(nonnull SODataV4_StructureBase*)target :(SODataV4_int)value;
/// @brief Set the value of this property in a structure.
///
///
/// @param target Target structure.
/// @param value Property value.
- (void) setValue :(nonnull SODataV4_StructureBase*)target :(nullable SODataV4_DataValue*)value;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
- (SODataV4_int) srid;
/// @brief If this property has a structure (complex/entity) type, then return it. Otherwise throw  `SODataV4_UsageException`.
///
///
- (nonnull SODataV4_StructureType*) structureType;
/// @internal
///
- (SODataV4_int) systemFlags;
/// @return this property or path, expressed as a `DataPath`.
///
- (nonnull SODataV4_DataPath*) toPath;
/// @brief Convert this data value to a string.
///
/// If the `SODataV4_Property`.`dataType` is defined by [XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema11-2/), then the corresponding lexical format is used.
/// [JSON](http://json.org) format is used for structured values (arrays and objects).
///
/// @return Lexical representation of this data value.
- (nonnull NSString*) toString;
/// @brief Synonym for `SODataV4_Property`.`dataType`.
///
/// If this property has a basic type, then `type.isBasic` will be `true`.
/// If this property has a basic list type, then `type.isBasicList` will be `true`.
/// If this property has a complex type, then `type.isComplex` will be `true` and `type` will be an instance of `SODataV4_ComplexType`.
/// If this property has a complex list type, then `type.isComplexList` will be `true` and `type.itemType` will be an instance of `SODataV4_ComplexType`.
/// If this property has an entity type, then `type.isEntity` will be `true` and `type` will be an instance of `SODataV4_EntityType`.
/// If this property has an entity list type, then `type.isEntityList` will be `true` and `type.itemType` will be an instance of `SODataV4_EntityType`.
///
/// @see `SODataV4_DataType`.`isBasic`, `SODataV4_DataType`.`isBasicList`, `SODataV4_DataType`.`isComplex`, `SODataV4_DataType`.`isComplexList`, `SODataV4_DataType`.`isEntity`, `SODataV4_DataType`.`isEntityList`.
- (nonnull SODataV4_DataType*) type;
/// @return The path, property, constant value or query function/operator call which is wrapped by this object.
///
- (nonnull SODataV4_DataValue*) unwrap;
/// @return The name of this property, percent-encoded for use in a URL.
///
- (nonnull NSString*) urlString;
#define SODataV4_Property_ON_DELETE_CASCADE 1
#define SODataV4_Property_ON_DELETE_RESTRICT 2
#define SODataV4_Property_ON_DELETE_SET_DEFAULT 3
#define SODataV4_Property_ON_DELETE_SET_NULL 4
#define SODataV4_Property_HAS_NO_FOREIGN_KEYS 0
#define SODataV4_Property_HAS_FOREIGN_KEYS_IN_SOURCE 1
#define SODataV4_Property_HAS_FOREIGN_KEYS_IN_TARGET 2
/// @brief Obsolete. Use `SODataV4_Property`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationList* annotationList;
/// @brief Obsolete. Use `SODataV4_Property`.`annotations`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotationMap;
/// @brief Map of annotations for this model element.
///
/// For annotations without qualifiers, the entry key is the annotation term name.
/// For annotations with qualifiers, the entry key is the annotation term name, then "#", then the annotation qualifier.
///
/// @see `SODataV4_Annotation`, `SODataV4_AnnotationTerm`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_AnnotationMap* annotations;
/// @brief Can this model element be removed by `DataService.refreshMetadata`. Defaults to `false`.
///
/// Set this to `true` to indicate that the application is coded to be able able to function correctly without this model element.
///
/// @see `SODataV4_Property`.`isRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean canBeRemoved;
/// @brief Database column name for this property.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* column;
/// @brief Database column type for this property.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* columnType;
/// @brief If this property has a complex type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isComplex`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_ComplexType* complexType;
/// @brief If this property is a navigation property, then does it contain its target?
///
///
@property (nonatomic, readwrite) SODataV4_boolean containsTarget;
/// @brief Path for customized property-to-element mapping.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_CustomPath* customPath;
/// @brief Data type of the property.
///
///
/// @see `SODataV4_Property`.`type` for detailed usage information and example code.
@property (nonatomic, readonly, strong, nonnull) SODataV4_DataType* dataType;
/// @brief Default value for this item. May be `nil`.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_DataValue* defaultValue;
/// @brief If this property has an entity type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isEntity`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntityType* entityType;
/// @brief If this property has an enum type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isEnum`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_EnumType* enumType;
/// @brief `true` if this item has fixed length for `string` and `binary` values.
///
///
/// @see `SODataV4_Property`.`minLength`, `SODataV4_Property`.`maxLength`.
@property (nonatomic, readonly) SODataV4_boolean fixedLength;
/// @brief If this property is a navigation property, then where are foreign keys found.
///
///
/// @see constants.
@property (nonatomic, readwrite) SODataV4_int hasForeignKeys;
/// @brief Zero-based index for this property within its parent type definition.
///
///
@property (nonatomic, readwrite) SODataV4_int id_;
/// @brief `true` if this is a collection-typed property. Equivalent to `type.isList`.
///
///
@property (nonatomic, readonly) SODataV4_boolean isCollection;
/// @brief `true` if this property was added since metadata was originally loaded.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isExtension;
/// @brief `true` if this property is a primary key, or part of a composite foreign key.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isForeignKey;
/// @brief `true` if this property is immutable (non-updatable after insert).
///
///
@property (nonatomic, readwrite) SODataV4_boolean isImmutable;
/// @brief `true` if this property is the primary key, or part of a composite primary key.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isKey;
/// @brief `true` if this is a navigation property.
///
///
@property (nonatomic, readonly) SODataV4_boolean isNavigation;
/// @brief `true` if this item is nullable.
///
///
@property (nonatomic, readwrite) SODataV4_boolean isNullable;
/// @brief `true` if this property is used for optimistic concurrency control (part of entity tag).
///
/// For OData V3, this relates to a ConcurrencyMode of "Fixed".
/// For OData V4, this relates to the use of Org.OData.Core.V1.OptimisticConcurrency in
/// one or more entity sets using the entity type containing this property.
@property (nonatomic, readwrite) SODataV4_boolean isOptimistic;
/// @brief `true` if this property is persistent (stored in the local database when offline).
///
///
@property (nonatomic, readonly) SODataV4_boolean isPersistent;
/// @brief Has this model element been removed by a successful call to `DataService.refreshMetadata`?
///
/// If `isRemoved == true, that implies that the old metadata (before refreshMetadata was called) did include this model element,
/// and that the new metadata (after refreshMetadata was called) does not include this model element.
///
/// @see `SODataV4_Property`.`canBeRemoved`.
@property (nonatomic, readwrite) SODataV4_boolean isRemoved;
/// @brief `true` if this property has a stream type.
///
///
@property (nonatomic, readonly) SODataV4_boolean isStream;
/// @brief `true` if this is a structural property.
///
///
@property (nonatomic, readonly) SODataV4_boolean isStructural;
/// @brief `true` if this item allows Unicode content.
///
/// If `isUnicode` is `false`, then this item only allows ASCII content.
@property (nonatomic, readwrite) SODataV4_boolean isUnicode;
/// @brief If this property is a list with complex item type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isComplexList`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_ComplexType* itemComplexType;
/// @brief If this property is a list with entity item type, then return it. Otherwise throw `SODataV4_UsageException`.
///
///
/// @see `SODataV4_DataType`.`isEntityList`.
@property (nonatomic, readonly, strong, nonnull) SODataV4_EntityType* itemEntityType;
/// @brief Maximum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int maxLength;
/// @brief Minimum length for `string` and `binary` values.
///
///
/// @see TypeFacets.ANY_LENGTH.
@property (nonatomic, readwrite) SODataV4_int minLength;
/// @brief Name of the property.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* name;
/// @brief If this property is a navigation property, then the action upon deletion of the source entity. Zero indicates an undefined action.
///
///
/// @see ON_DELETE_* constants.
@property (nonatomic, readwrite) SODataV4_int onDeleteAction;
/// @brief Name of type that owns this property.
///
///
@property (nonatomic, readwrite, strong, nonnull) NSString* owningType;
/// @brief If this property is a navigation property with a defined partner property, then the path of the partner.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* partnerPath;
/// @brief Precision for `decimal` and `integer` values.
///
///
/// @see TypeFacets.ANY_PRECISION.
@property (nonatomic, readwrite) SODataV4_int precision;
/// @brief Owning type name, forward slash, then property name, e.g. "MySchema.MyEntityType/MyPropertyName".
///
///
@property (nonatomic, readonly, strong, nonnull) NSString* qualifiedName;
/// @brief If this property is a navigation property with referential constraints, then a map of constraints (from property name in the dependent entity to property name in the principal entity).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StringMap* referentialConstraints;
/// @brief Scale for `decimal` values.
///
///
/// @see TypeFacets.FLOATING_SCALE, TypeFacets.VARIABLE_SCALE.
@property (nonatomic, readwrite) SODataV4_int scale;
/// @brief [EPSG](http://www.epsg.org/Geodetic.html) Spatial Reference System Identifier (SRID) for the associated value.
///
///
/// @see TypeFacets.VARIABLE_SRID.
@property (nonatomic, readwrite) SODataV4_int srid;
/// @brief If this property has a structure (complex/entity) type, then return it. Otherwise throw  `SODataV4_UsageException`.
///
///
@property (nonatomic, readonly, strong, nonnull) SODataV4_StructureType* structureType;
/// @internal
///
@property (nonatomic, readwrite) SODataV4_int systemFlags;
/// @brief Synonym for `SODataV4_Property`.`dataType`.
///
/// If this property has a basic type, then `type.isBasic` will be `true`.
/// If this property has a basic list type, then `type.isBasicList` will be `true`.
/// If this property has a complex type, then `type.isComplex` will be `true` and `type` will be an instance of `SODataV4_ComplexType`.
/// If this property has a complex list type, then `type.isComplexList` will be `true` and `type.itemType` will be an instance of `SODataV4_ComplexType`.
/// If this property has an entity type, then `type.isEntity` will be `true` and `type` will be an instance of `SODataV4_EntityType`.
/// If this property has an entity list type, then `type.isEntityList` will be `true` and `type.itemType` will be an instance of `SODataV4_EntityType`.
///
/// @see `SODataV4_DataType`.`isBasic`, `SODataV4_DataType`.`isBasicList`, `SODataV4_DataType`.`isComplex`, `SODataV4_DataType`.`isComplexList`, `SODataV4_DataType`.`isEntity`, `SODataV4_DataType`.`isEntityList`.
@property (nonatomic, readwrite, strong, nonnull) SODataV4_DataType* type;
@end
#endif

#ifdef import_SODataV4__Property_internal
#ifndef imported_SODataV4__Property_internal
#define imported_SODataV4__Property_internal
@interface SODataV4_Property (internal)
/// @brief If storage of offline links is enabled, then an internal entity set.
///
///
- (nullable SODataV4_EntitySet*) offlineLinks;
/// @brief If storage of offline links is enabled, then an internal entity set.
///
///
- (void) setOfflineLinks :(nullable SODataV4_EntitySet*)value;
/// @brief If storage of offline links is enabled, then an internal entity set.
///
///
@property (nonatomic, readwrite, strong, nullable) SODataV4_EntitySet* offlineLinks;
@end
#endif
#endif

#ifndef imported_SODataV4__QueryResultException_public
#define imported_SODataV4__QueryResultException_public
/// @brief Exception thrown when a query result cannot be converted to the expected type.
///
///
@interface SODataV4_QueryResultException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_QueryResultException*) new;
/// @internal
///
- (void) _init;
/// @return A new exception with the specified root cause.
/// @param cause Root cause.
+ (nonnull SODataV4_QueryResultException*) withCause :(nullable NSException*)cause;
/// @return A new exception with the specified message text.
/// @param message Message text.
+ (nonnull SODataV4_QueryResultException*) withMessage :(nullable NSString*)message;
@end
#endif

#ifdef import_SODataV4__QueryResultException_private
#ifndef imported_SODataV4__QueryResultException_private
#define imported_SODataV4__QueryResultException_private
@interface SODataV4_QueryResultException (private)
+ (nonnull SODataV4_QueryResultException*) _new1 :(nullable NSException*)p1;
+ (nonnull SODataV4_QueryResultException*) _new2 :(nullable NSString*)p1;
@end
#endif
#endif

#ifndef imported_SODataV4__RequestCancelledException_public
#define imported_SODataV4__RequestCancelledException_public
/// @brief Exception thrown when an asynchronous request is cancelled.
///
///
@interface SODataV4_RequestCancelledException : SODataV4_DataException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_RequestCancelledException*) new;
/// @internal
///
- (void) _init;
@end
#endif

#ifndef imported_SODataV4__BottomTransform_public
#define imported_SODataV4__BottomTransform_public
/// @brief Represents the Bottom* transformation items.
///
///
@interface SODataV4_BottomTransform : SODataV4_AmountTransform
{
}
- (nonnull id) init;
/// @internal
///
- (void) _init :(nonnull NSString*)name :(nonnull SODataV4_DataValue*)amount :(nonnull SODataV4_DataValue*)value;
/// @brief Creates a "bottomcount" transformation item.
///
///
/// @return The BottomTransform item.
/// @param amount The amount to be applied.
/// @param value The value by which the transformation will compare the instances in the entity set.
+ (nonnull SODataV4_BottomTransform*) count :(SODataV4_int)amount :(nonnull SODataV4_DataValue*)value;
/// @brief Creates a "bottompercent" transformation item.
///
///
/// @return The BottomTransform item.
/// @param amount The amount to be applied.
/// @param value The value by which the transformation will compare the instances in the entity set.
+ (nonnull SODataV4_BottomTransform*) percent :(SODataV4_double)amount :(nonnull SODataV4_DataValue*)value;
/// @brief Creates a "bottomsum" transformation item.
///
///
/// @return The BottomTransform item.
/// @param amount The amount to be applied.
/// @param value The value by which the transformation will compare the instances in the entity set.
+ (nonnull SODataV4_BottomTransform*) sum :(SODataV4_double)amount :(nonnull SODataV4_DataValue*)value;
@end
#endif

#ifdef import_SODataV4__BottomTransform_private
#ifndef imported_SODataV4__BottomTransform_private
#define imported_SODataV4__BottomTransform_private
@interface SODataV4_BottomTransform (private)
+ (nonnull SODataV4_BottomTransform*) new :(nonnull NSString*)name :(nonnull SODataV4_DataValue*)amount :(nonnull SODataV4_DataValue*)value;
@end
#endif
#endif

#ifndef imported_SODataV4__NavigationProperty_public
#define imported_SODataV4__NavigationProperty_public
/// @brief Represents an OData navigation property.
///
///
@interface SODataV4_NavigationProperty : SODataV4_Property
{
    @private SODataV4_boolean _ct;
    @private SODataV4_int _fk;
    @private SODataV4_int _od;
    @private NSString* _Nullable _pp;
    @private SODataV4_StringMap* _Nonnull _rc;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_NavigationProperty*) new;
/// @internal
///
- (void) _init;
/// @brief If this property is a navigation property, then does it contain its target?
///
///
- (SODataV4_boolean) containsTarget;
/// @brief If this property is a navigation property, then where are foreign keys found.
///
///
/// @see constants.
- (SODataV4_int) hasForeignKeys;
/// @brief If this property is a navigation property, then the action upon deletion of the source entity. Zero indicates an undefined action.
///
///
/// @see ON_DELETE_* constants.
- (SODataV4_int) onDeleteAction;
/// @brief If this property is a navigation property with a defined partner property, then the path of the partner.
///
///
- (nullable NSString*) partnerPath;
/// @brief If this property is a navigation property with referential constraints, then a map of constraints (from property name in the dependent entity to property name in the principal entity).
///
///
- (nonnull SODataV4_StringMap*) referentialConstraints;
/// @brief If this property is a navigation property, then does it contain its target?
///
///
- (void) setContainsTarget :(SODataV4_boolean)value;
/// @brief If this property is a navigation property, then where are foreign keys found.
///
///
/// @see constants.
- (void) setHasForeignKeys :(SODataV4_int)value;
/// @brief If this property is a navigation property, then the action upon deletion of the source entity. Zero indicates an undefined action.
///
///
/// @see ON_DELETE_* constants.
- (void) setOnDeleteAction :(SODataV4_int)value;
/// @brief If this property is a navigation property with a defined partner property, then the path of the partner.
///
///
- (void) setPartnerPath :(nullable NSString*)value;
/// @brief If this property is a navigation property with referential constraints, then a map of constraints (from property name in the dependent entity to property name in the principal entity).
///
///
- (void) setReferentialConstraints :(nonnull SODataV4_StringMap*)value;
/// @brief If this property is a navigation property, then does it contain its target?
///
///
@property (nonatomic, readwrite) SODataV4_boolean containsTarget;
/// @brief If this property is a navigation property, then where are foreign keys found.
///
///
/// @see constants.
@property (nonatomic, readwrite) SODataV4_int hasForeignKeys;
/// @brief If this property is a navigation property, then the action upon deletion of the source entity. Zero indicates an undefined action.
///
///
/// @see ON_DELETE_* constants.
@property (nonatomic, readwrite) SODataV4_int onDeleteAction;
/// @brief If this property is a navigation property with a defined partner property, then the path of the partner.
///
///
@property (nonatomic, readwrite, strong, nullable) NSString* partnerPath;
/// @brief If this property is a navigation property with referential constraints, then a map of constraints (from property name in the dependent entity to property name in the principal entity).
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_StringMap* referentialConstraints;
@end
#endif

#ifndef imported_SODataV4__StreamProperty_public
#define imported_SODataV4__StreamProperty_public
/// @brief Encapsulates the metadata of an [OData](http://odata.org) stream property.
///
///
@interface SODataV4_StreamProperty : SODataV4_Property
{
    @private SODataV4_Property* _Nonnull entityTag_;
    @private SODataV4_Property* _Nonnull mediaType_;
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StreamProperty*) new;
/// @internal
///
- (void) _init;
/// @brief A pseudo-property to reference the entity tag of a stream property.
///
///
- (nonnull SODataV4_Property*) entityTag;
/// @brief A pseudo-property to reference the media type of a stream property.
///
///
- (nonnull SODataV4_Property*) mediaType;
/// @brief A pseudo-property to reference the entity tag of a stream property.
///
///
- (void) setEntityTag :(nonnull SODataV4_Property*)value;
/// @brief A pseudo-property to reference the media type of a stream property.
///
///
- (void) setMediaType :(nonnull SODataV4_Property*)value;
/// @brief A pseudo-property to reference the entity tag of a stream property.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Property* entityTag;
/// @brief A pseudo-property to reference the media type of a stream property.
///
///
@property (nonatomic, readwrite, strong, nonnull) SODataV4_Property* mediaType;
@end
#endif

#ifndef imported_SODataV4__StructuralProperty_public
#define imported_SODataV4__StructuralProperty_public
/// @brief Represents an OData structural property.
///
///
@interface SODataV4_StructuralProperty : SODataV4_Property
{
}
- (nonnull id) init;
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_StructuralProperty*) new;
/// @internal
///
- (void) _init;
@end
#endif

#ifndef imported_SODataV4__TopTransform_public
#define imported_SODataV4__TopTransform_public
/// @brief Represents the Top* transformation items.
///
///
@interface SODataV4_TopTransform : SODataV4_AmountTransform
{
}
- (nonnull id) init;
/// @internal
///
- (void) _init :(nonnull NSString*)name :(nonnull SODataV4_DataValue*)amount :(nonnull SODataV4_DataValue*)value;
/// @brief Creates a "topcount" transformation item.
///
///
/// @return The TopTransform item.
/// @param amount The amount to be applied.
/// @param value The value by which the transformation will compare the instances in the entity set.
+ (nonnull SODataV4_TopTransform*) count :(SODataV4_int)amount :(nonnull SODataV4_DataValue*)value;
/// @brief Creates a "toppercent" transformation item.
///
///
/// @return The TopTransform item.
/// @param amount The amount to be applied.
/// @param value The value by which the transformation will compare the instances in the entity set.
+ (nonnull SODataV4_TopTransform*) percent :(SODataV4_double)amount :(nonnull SODataV4_DataValue*)value;
/// @brief Creates a "topsum" transformation item.
///
///
/// @return The TopTransform item.
/// @param amount The amount to be applied.
/// @param value The value by which the transformation will compare the instances in the entity set.
+ (nonnull SODataV4_TopTransform*) sum :(SODataV4_double)amount :(nonnull SODataV4_DataValue*)value;
@end
#endif

#ifdef import_SODataV4__TopTransform_private
#ifndef imported_SODataV4__TopTransform_private
#define imported_SODataV4__TopTransform_private
@interface SODataV4_TopTransform (private)
+ (nonnull SODataV4_TopTransform*) new :(nonnull NSString*)name :(nonnull SODataV4_DataValue*)amount :(nonnull SODataV4_DataValue*)value;
@end
#endif
#endif

#ifdef import_SODataV4__WellKnownTextException_internal
#ifndef imported_SODataV4__WellKnownTextException_internal
#define imported_SODataV4__WellKnownTextException_public
/* internal */
@interface SODataV4_WellKnownTextException : SODataV4_DataFormatException
{
}
/// @brief Default initializer.
///
///
+ (nonnull SODataV4_WellKnownTextException*) new;
/// @internal
///
- (void) _init;
/// @return A new exception with the specified message text.
/// @param message Message text.
+ (nonnull SODataV4_WellKnownTextException*) withMessage :(nonnull NSString*)message;
@end
#endif
#endif

#ifdef import_SODataV4__WellKnownTextException_private
#ifndef imported_SODataV4__WellKnownTextException_private
#define imported_SODataV4__WellKnownTextException_private
@interface SODataV4_WellKnownTextException (private)
+ (nonnull SODataV4_WellKnownTextException*) _new1 :(nullable NSString*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_ComplexValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_ComplexValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_ComplexValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_ComplexValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_ComplexValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_ComplexValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_DataPath_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_DataPath_in_data_internal
#define imported_SODataV4__Any_asNullable_data_DataPath_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_DataPath_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_DataPath`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_DataPath*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_DataValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_DataValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_DataValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_DataValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_DataValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_DataValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_DayTimeDuration_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_DayTimeDuration_in_data_internal
#define imported_SODataV4__Any_asNullable_data_DayTimeDuration_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_DayTimeDuration_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_DayTimeDuration`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_DayTimeDuration*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_EntityValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_EntityValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_EntityValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_EntityValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_EntityValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_EntityValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_EnumValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_EnumValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_EnumValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_EnumValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_EnumValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_EnumValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyCollection_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyCollection_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyCollection_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyCollection_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyCollection`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyCollection*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyLineString_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyLineString_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyLineString`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyMultiLineString_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyMultiLineString_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyMultiLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyMultiLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyMultiLineString`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyMultiLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyMultiPoint_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyMultiPoint_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyMultiPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyMultiPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyMultiPoint`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyMultiPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyMultiPolygon_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyMultiPolygon_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyMultiPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyMultiPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyMultiPolygon`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyMultiPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyPoint_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyPoint_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyPoint`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyPolygon_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyPolygon_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyPolygon`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeographyValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeographyValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeographyValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeographyValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeographyValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeographyValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryCollection_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryCollection_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryCollection_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryCollection_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryCollection`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryCollection*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryLineString_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryLineString_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryLineString`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryMultiLineString_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryMultiLineString_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryMultiLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryMultiLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryMultiLineString`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryMultiLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryMultiPoint_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryMultiPoint_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryMultiPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryMultiPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryMultiPoint`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryMultiPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryMultiPolygon_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryMultiPolygon_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryMultiPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryMultiPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryMultiPolygon`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryMultiPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryPoint_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryPoint_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryPoint`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryPolygon_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryPolygon_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryPolygon`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GeometryValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GeometryValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GeometryValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GeometryValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GeometryValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GeometryValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GlobalDateTime_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GlobalDateTime_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GlobalDateTime_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GlobalDateTime_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GlobalDateTime`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GlobalDateTime*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_GuidValue_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_GuidValue_in_data_internal
#define imported_SODataV4__Any_asNullable_data_GuidValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_GuidValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_GuidValue`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_GuidValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_LocalDateTime_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_LocalDateTime_in_data_internal
#define imported_SODataV4__Any_asNullable_data_LocalDateTime_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_LocalDateTime_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_LocalDateTime`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_LocalDateTime*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_LocalDate_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_LocalDate_in_data_internal
#define imported_SODataV4__Any_asNullable_data_LocalDate_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_LocalDate_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_LocalDate`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_LocalDate*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_LocalTime_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_LocalTime_in_data_internal
#define imported_SODataV4__Any_asNullable_data_LocalTime_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_LocalTime_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_LocalTime`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_LocalTime*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_asNullable_data_YearMonthDuration_in_data_internal
#ifndef imported_SODataV4__Any_asNullable_data_YearMonthDuration_in_data_internal
#define imported_SODataV4__Any_asNullable_data_YearMonthDuration_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to nullable target type.
///
///
@interface SODataV4_Any_asNullable_data_YearMonthDuration_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to `SODataV4_YearMonthDuration`?, or `nil` if `value` is `nil`.
/// @throw `SODataV4_CastException` if `value` is not of type `AsType`.
+ (nullable SODataV4_YearMonthDuration*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_core_MapFromString_in_data_internal
#ifndef imported_SODataV4__Any_as_core_MapFromString_in_data_internal
#define imported_SODataV4__Any_as_core_MapFromString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_core_MapFromString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_MapFromString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_core_UntypedSet_in_data_internal
#ifndef imported_SODataV4__Any_as_core_UntypedSet_in_data_internal
#define imported_SODataV4__Any_as_core_UntypedSet_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_core_UntypedSet_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_UntypedSet*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AggregateExpression_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AggregateExpression_in_data_internal
#define imported_SODataV4__Any_as_data_AggregateExpression_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AggregateExpression_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AggregateExpression*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AggregateFrom_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AggregateFrom_in_data_internal
#define imported_SODataV4__Any_as_data_AggregateFrom_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AggregateFrom_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AggregateFrom*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AggregateValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AggregateValue_in_data_internal
#define imported_SODataV4__Any_as_data_AggregateValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AggregateValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AggregateValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AnnotationMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AnnotationMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_AnnotationMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AnnotationMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AnnotationMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AnnotationTermMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AnnotationTermMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_AnnotationTermMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AnnotationTermMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AnnotationTermMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AnnotationTerm_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AnnotationTerm_in_data_internal
#define imported_SODataV4__Any_as_data_AnnotationTerm_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AnnotationTerm_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AnnotationTerm*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_Annotation_in_data_internal
#ifndef imported_SODataV4__Any_as_data_Annotation_in_data_internal
#define imported_SODataV4__Any_as_data_Annotation_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_Annotation_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_Annotation*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_AnyMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_AnyMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_AnyMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_AnyMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_AnyMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_BinaryValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_BinaryValue_in_data_internal
#define imported_SODataV4__Any_as_data_BinaryValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_BinaryValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_BinaryValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_BooleanValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_BooleanValue_in_data_internal
#define imported_SODataV4__Any_as_data_BooleanValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_BooleanValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_BooleanValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ByteValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ByteValue_in_data_internal
#define imported_SODataV4__Any_as_data_ByteValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ByteValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ByteValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_CancellationListener_in_data_internal
#ifndef imported_SODataV4__Any_as_data_CancellationListener_in_data_internal
#define imported_SODataV4__Any_as_data_CancellationListener_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_CancellationListener_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_CancellationListener*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ChangedLink_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ChangedLink_in_data_internal
#define imported_SODataV4__Any_as_data_ChangedLink_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ChangedLink_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ChangedLink*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_CharStream_in_data_internal
#ifndef imported_SODataV4__Any_as_data_CharStream_in_data_internal
#define imported_SODataV4__Any_as_data_CharStream_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_CharStream_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_CharStream*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_CharValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_CharValue_in_data_internal
#define imported_SODataV4__Any_as_data_CharValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_CharValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_CharValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ComplexTypeMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ComplexTypeMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_ComplexTypeMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ComplexTypeMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ComplexTypeMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ComplexType_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ComplexType_in_data_internal
#define imported_SODataV4__Any_as_data_ComplexType_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ComplexType_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ComplexType*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ComplexValueList_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ComplexValueList_in_data_internal
#define imported_SODataV4__Any_as_data_ComplexValueList_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ComplexValueList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ComplexValueList*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ComplexValueMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ComplexValueMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_ComplexValueMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ComplexValueMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ComplexValueMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ComplexValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ComplexValue_in_data_internal
#define imported_SODataV4__Any_as_data_ComplexValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ComplexValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ComplexValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_CustomPath_in_data_internal
#ifndef imported_SODataV4__Any_as_data_CustomPath_in_data_internal
#define imported_SODataV4__Any_as_data_CustomPath_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_CustomPath_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_CustomPath*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataMethodMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataMethodMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_DataMethodMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataMethodMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataMethodMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataMethod_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataMethod_in_data_internal
#define imported_SODataV4__Any_as_data_DataMethod_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataMethod_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataMethod*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataMetricMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataMetricMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_DataMetricMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataMetricMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataMetricMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataMetric_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataMetric_in_data_internal
#define imported_SODataV4__Any_as_data_DataMetric_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataMetric_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataMetric*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataPath_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataPath_in_data_internal
#define imported_SODataV4__Any_as_data_DataPath_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataPath_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataPath*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataSchemaMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataSchemaMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_DataSchemaMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataSchemaMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataSchemaMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataSchema_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataSchema_in_data_internal
#define imported_SODataV4__Any_as_data_DataSchema_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataSchema_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataSchema*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataTypeMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataTypeMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_DataTypeMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataTypeMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataTypeMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataType_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataType_in_data_internal
#define imported_SODataV4__Any_as_data_DataType_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataType_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataType*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataValueList_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataValueList_in_data_internal
#define imported_SODataV4__Any_as_data_DataValueList_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataValueList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataValueList*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataValueMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataValueMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_DataValueMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataValueMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataValueMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DataValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DataValue_in_data_internal
#define imported_SODataV4__Any_as_data_DataValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DataValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DataValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DayTimeDuration_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DayTimeDuration_in_data_internal
#define imported_SODataV4__Any_as_data_DayTimeDuration_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DayTimeDuration_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DayTimeDuration*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DecimalValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DecimalValue_in_data_internal
#define imported_SODataV4__Any_as_data_DecimalValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DecimalValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DecimalValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_DoubleValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_DoubleValue_in_data_internal
#define imported_SODataV4__Any_as_data_DoubleValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_DoubleValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_DoubleValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityContainerMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityContainerMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_EntityContainerMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityContainerMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityContainerMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityContainer_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityContainer_in_data_internal
#define imported_SODataV4__Any_as_data_EntityContainer_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityContainer_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityContainer*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntitySetMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntitySetMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_EntitySetMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntitySetMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntitySetMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntitySet_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntitySet_in_data_internal
#define imported_SODataV4__Any_as_data_EntitySet_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntitySet_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntitySet*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityTypeMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityTypeMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_EntityTypeMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityTypeMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityTypeMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityType_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityType_in_data_internal
#define imported_SODataV4__Any_as_data_EntityType_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityType_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityType*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityValueList_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityValueList_in_data_internal
#define imported_SODataV4__Any_as_data_EntityValueList_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityValueList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityValueList*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityValueMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityValueMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_EntityValueMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityValueMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityValueMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EntityValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EntityValue_in_data_internal
#define imported_SODataV4__Any_as_data_EntityValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EntityValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EntityValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EnumTypeMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EnumTypeMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_EnumTypeMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EnumTypeMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EnumTypeMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EnumType_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EnumType_in_data_internal
#define imported_SODataV4__Any_as_data_EnumType_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EnumType_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EnumType*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EnumValueMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EnumValueMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_EnumValueMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EnumValueMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EnumValueMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_EnumValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_EnumValue_in_data_internal
#define imported_SODataV4__Any_as_data_EnumValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_EnumValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_EnumValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ErrorResponse_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ErrorResponse_in_data_internal
#define imported_SODataV4__Any_as_data_ErrorResponse_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ErrorResponse_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ErrorResponse*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ExpandItem_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ExpandItem_in_data_internal
#define imported_SODataV4__Any_as_data_ExpandItem_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ExpandItem_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ExpandItem*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_FloatValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_FloatValue_in_data_internal
#define imported_SODataV4__Any_as_data_FloatValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_FloatValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_FloatValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyCollection_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyCollection_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyCollection_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyCollection_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyCollection*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyLineString_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyLineString_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyMultiLineString_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyMultiLineString_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyMultiLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyMultiLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyMultiLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyMultiPoint_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyMultiPoint_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyMultiPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyMultiPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyMultiPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyMultiPolygon_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyMultiPolygon_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyMultiPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyMultiPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyMultiPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyPoint_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyPoint_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyPolygon_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyPolygon_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeographyValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeographyValue_in_data_internal
#define imported_SODataV4__Any_as_data_GeographyValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeographyValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeographyValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryCollection_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryCollection_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryCollection_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryCollection_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryCollection*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryLineString_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryLineString_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryMultiLineString_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryMultiLineString_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryMultiLineString_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryMultiLineString_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryMultiLineString*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryMultiPoint_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryMultiPoint_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryMultiPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryMultiPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryMultiPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryMultiPolygon_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryMultiPolygon_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryMultiPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryMultiPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryMultiPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryPoint_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryPoint_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryPoint_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryPoint_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryPoint*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryPolygon_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryPolygon_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryPolygon_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryPolygon_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryPolygon*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GeometryValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GeometryValue_in_data_internal
#define imported_SODataV4__Any_as_data_GeometryValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GeometryValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GeometryValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GlobalDateTime_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GlobalDateTime_in_data_internal
#define imported_SODataV4__Any_as_data_GlobalDateTime_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GlobalDateTime_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GlobalDateTime*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_GuidValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_GuidValue_in_data_internal
#define imported_SODataV4__Any_as_data_GuidValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_GuidValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_GuidValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_IntValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_IntValue_in_data_internal
#define imported_SODataV4__Any_as_data_IntValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_IntValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_IntValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_IntegerValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_IntegerValue_in_data_internal
#define imported_SODataV4__Any_as_data_IntegerValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_IntegerValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_IntegerValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_LineStringCoordinates_in_data_internal
#ifndef imported_SODataV4__Any_as_data_LineStringCoordinates_in_data_internal
#define imported_SODataV4__Any_as_data_LineStringCoordinates_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_LineStringCoordinates_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_LineStringCoordinates*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ListBase_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ListBase_in_data_internal
#define imported_SODataV4__Any_as_data_ListBase_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ListBase_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ListBase*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_LocalDateTime_in_data_internal
#ifndef imported_SODataV4__Any_as_data_LocalDateTime_in_data_internal
#define imported_SODataV4__Any_as_data_LocalDateTime_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_LocalDateTime_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_LocalDateTime*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_LocalDate_in_data_internal
#ifndef imported_SODataV4__Any_as_data_LocalDate_in_data_internal
#define imported_SODataV4__Any_as_data_LocalDate_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_LocalDate_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_LocalDate*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_LocalTime_in_data_internal
#ifndef imported_SODataV4__Any_as_data_LocalTime_in_data_internal
#define imported_SODataV4__Any_as_data_LocalTime_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_LocalTime_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_LocalTime*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_LongValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_LongValue_in_data_internal
#define imported_SODataV4__Any_as_data_LongValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_LongValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_LongValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ObjectMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ObjectMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_ObjectMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ObjectMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ObjectMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_Parameter_in_data_internal
#ifndef imported_SODataV4__Any_as_data_Parameter_in_data_internal
#define imported_SODataV4__Any_as_data_Parameter_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_Parameter_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_Parameter*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_PathAnnotationsMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_PathAnnotationsMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_PathAnnotationsMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_PathAnnotationsMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_PathAnnotationsMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_PathAnnotations_in_data_internal
#ifndef imported_SODataV4__Any_as_data_PathAnnotations_in_data_internal
#define imported_SODataV4__Any_as_data_PathAnnotations_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_PathAnnotations_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_PathAnnotations*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_PointCoordinates_in_data_internal
#ifndef imported_SODataV4__Any_as_data_PointCoordinates_in_data_internal
#define imported_SODataV4__Any_as_data_PointCoordinates_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_PointCoordinates_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_PointCoordinates*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_PolygonCoordinates_in_data_internal
#ifndef imported_SODataV4__Any_as_data_PolygonCoordinates_in_data_internal
#define imported_SODataV4__Any_as_data_PolygonCoordinates_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_PolygonCoordinates_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_PolygonCoordinates*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_PropertyMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_PropertyMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_PropertyMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_PropertyMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_PropertyMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_PropertyPath_in_data_internal
#ifndef imported_SODataV4__Any_as_data_PropertyPath_in_data_internal
#define imported_SODataV4__Any_as_data_PropertyPath_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_PropertyPath_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_PropertyPath*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_Property_in_data_internal
#ifndef imported_SODataV4__Any_as_data_Property_in_data_internal
#define imported_SODataV4__Any_as_data_Property_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_Property_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_Property*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryFilter_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryFilter_in_data_internal
#define imported_SODataV4__Any_as_data_QueryFilter_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryFilter_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryFilter*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryFunctionCall_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryFunctionCall_in_data_internal
#define imported_SODataV4__Any_as_data_QueryFunctionCall_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryFunctionCall_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryFunctionCall*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryFunctionMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryFunctionMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_QueryFunctionMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryFunctionMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryFunctionMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryFunction_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryFunction_in_data_internal
#define imported_SODataV4__Any_as_data_QueryFunction_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryFunction_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryFunction*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryOperatorCall_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryOperatorCall_in_data_internal
#define imported_SODataV4__Any_as_data_QueryOperatorCall_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryOperatorCall_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryOperatorCall*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryOperatorMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryOperatorMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_QueryOperatorMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryOperatorMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryOperatorMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_QueryOperator_in_data_internal
#ifndef imported_SODataV4__Any_as_data_QueryOperator_in_data_internal
#define imported_SODataV4__Any_as_data_QueryOperator_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_QueryOperator_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_QueryOperator*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_SelectItem_in_data_internal
#ifndef imported_SODataV4__Any_as_data_SelectItem_in_data_internal
#define imported_SODataV4__Any_as_data_SelectItem_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_SelectItem_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_SelectItem*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_ShortValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_ShortValue_in_data_internal
#define imported_SODataV4__Any_as_data_ShortValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_ShortValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_ShortValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_SimpleTypeMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_SimpleTypeMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_SimpleTypeMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_SimpleTypeMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_SimpleTypeMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_SimpleType_in_data_internal
#ifndef imported_SODataV4__Any_as_data_SimpleType_in_data_internal
#define imported_SODataV4__Any_as_data_SimpleType_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_SimpleType_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_SimpleType*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_SortItem_in_data_internal
#ifndef imported_SODataV4__Any_as_data_SortItem_in_data_internal
#define imported_SODataV4__Any_as_data_SortItem_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_SortItem_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_SortItem*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_StreamLink_in_data_internal
#ifndef imported_SODataV4__Any_as_data_StreamLink_in_data_internal
#define imported_SODataV4__Any_as_data_StreamLink_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_StreamLink_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_StreamLink*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_StreamProperty_in_data_internal
#ifndef imported_SODataV4__Any_as_data_StreamProperty_in_data_internal
#define imported_SODataV4__Any_as_data_StreamProperty_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_StreamProperty_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_StreamProperty*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_StringMap_Entry_in_data_internal
#ifndef imported_SODataV4__Any_as_data_StringMap_Entry_in_data_internal
#define imported_SODataV4__Any_as_data_StringMap_Entry_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_StringMap_Entry_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_StringMap_Entry*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_StringValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_StringValue_in_data_internal
#define imported_SODataV4__Any_as_data_StringValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_StringValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_StringValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_StructureBase_in_data_internal
#ifndef imported_SODataV4__Any_as_data_StructureBase_in_data_internal
#define imported_SODataV4__Any_as_data_StructureBase_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_StructureBase_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_StructureBase*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_StructureType_in_data_internal
#ifndef imported_SODataV4__Any_as_data_StructureType_in_data_internal
#define imported_SODataV4__Any_as_data_StructureType_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_StructureType_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_StructureType*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_TransformValue_in_data_internal
#ifndef imported_SODataV4__Any_as_data_TransformValue_in_data_internal
#define imported_SODataV4__Any_as_data_TransformValue_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_TransformValue_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_TransformValue*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_UnsignedByte_in_data_internal
#ifndef imported_SODataV4__Any_as_data_UnsignedByte_in_data_internal
#define imported_SODataV4__Any_as_data_UnsignedByte_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_UnsignedByte_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_UnsignedByte*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_UnsignedShort_in_data_internal
#ifndef imported_SODataV4__Any_as_data_UnsignedShort_in_data_internal
#define imported_SODataV4__Any_as_data_UnsignedShort_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_UnsignedShort_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_UnsignedShort*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_as_data_YearMonthDuration_in_data_internal
#ifndef imported_SODataV4__Any_as_data_YearMonthDuration_in_data_internal
#define imported_SODataV4__Any_as_data_YearMonthDuration_in_data_public
/* internal */
/// @brief Utility class for unsafe type casting to non-nullable target type.
///
///
@interface SODataV4_Any_as_data_YearMonthDuration_in_data : SODataV4_ObjectBase
{
}
/// @return `value` cast to AnyType.
/// @throw `SODataV4_CastException` if `value` is not of type `AnyType`.
+ (nonnull SODataV4_YearMonthDuration*) cast :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_isNullable_data_ComplexValue_in_data_internal
#ifndef imported_SODataV4__Any_isNullable_data_ComplexValue_in_data_internal
#define imported_SODataV4__Any_isNullable_data_ComplexValue_in_data_public
/* internal */
/// @brief Utility class for instanceof checking with nullable target type.
///
///
@interface SODataV4_Any_isNullable_data_ComplexValue_in_data : SODataV4_ObjectBase
{
}
/// @return `true` if `value` is `nil` or is an instance of `SODataV4_ComplexValue`.
///
+ (SODataV4_boolean) check :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_isNullable_data_DataValue_in_data_internal
#ifndef imported_SODataV4__Any_isNullable_data_DataValue_in_data_internal
#define imported_SODataV4__Any_isNullable_data_DataValue_in_data_public
/* internal */
/// @brief Utility class for instanceof checking with nullable target type.
///
///
@interface SODataV4_Any_isNullable_data_DataValue_in_data : SODataV4_ObjectBase
{
}
/// @return `true` if `value` is `nil` or is an instance of `SODataV4_DataValue`.
///
+ (SODataV4_boolean) check :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Any_isNullable_data_EntityValue_in_data_internal
#ifndef imported_SODataV4__Any_isNullable_data_EntityValue_in_data_internal
#define imported_SODataV4__Any_isNullable_data_EntityValue_in_data_public
/* internal */
/// @brief Utility class for instanceof checking with nullable target type.
///
///
@interface SODataV4_Any_isNullable_data_EntityValue_in_data : SODataV4_ObjectBase
{
}
/// @return `true` if `value` is `nil` or is an instance of `SODataV4_EntityValue`.
///
+ (SODataV4_boolean) check :(nullable NSObject*)value;
@end
#endif
#endif

#ifdef import_SODataV4__ApplyDefault_DataQuery_in_data_internal
#ifndef imported_SODataV4__ApplyDefault_DataQuery_in_data_internal
#define imported_SODataV4__ApplyDefault_DataQuery_in_data_public
/* internal */
/// @brief Static functions to apply default values of type `SODataV4_DataQuery`.
///
///
@interface SODataV4_ApplyDefault_DataQuery_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `defaultValue`.
/// @param value Nullable value.
/// @param defaultValue Default value.
+ (nonnull SODataV4_DataQuery*) ifNull :(nullable SODataV4_DataQuery*)value :(nonnull SODataV4_DataQuery*)defaultValue;
@end
#endif
#endif

#ifdef import_SODataV4__Default_empty_ComplexTypeList_in_data_internal
#ifndef imported_SODataV4__Default_empty_ComplexTypeList_in_data_internal
#define imported_SODataV4__Default_empty_ComplexTypeList_in_data_public
/* internal */
/// @brief Static function to apply default `empty` values of type `SODataV4_ComplexTypeList`.
///
///
@interface SODataV4_Default_empty_ComplexTypeList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `T.empty`.
/// @param value Nullable value.
+ (nonnull SODataV4_ComplexTypeList*) ifNull :(nullable SODataV4_ComplexTypeList*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_empty_EntityTypeList_in_data_internal
#ifndef imported_SODataV4__Default_empty_EntityTypeList_in_data_internal
#define imported_SODataV4__Default_empty_EntityTypeList_in_data_public
/* internal */
/// @brief Static function to apply default `empty` values of type `SODataV4_EntityTypeList`.
///
///
@interface SODataV4_Default_empty_EntityTypeList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `T.empty`.
/// @param value Nullable value.
+ (nonnull SODataV4_EntityTypeList*) ifNull :(nullable SODataV4_EntityTypeList*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_empty_ExpandItemList_in_data_internal
#ifndef imported_SODataV4__Default_empty_ExpandItemList_in_data_internal
#define imported_SODataV4__Default_empty_ExpandItemList_in_data_public
/* internal */
/// @brief Static function to apply default `empty` values of type `SODataV4_ExpandItemList`.
///
///
@interface SODataV4_Default_empty_ExpandItemList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `T.empty`.
/// @param value Nullable value.
+ (nonnull SODataV4_ExpandItemList*) ifNull :(nullable SODataV4_ExpandItemList*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_empty_SelectItemList_in_data_internal
#ifndef imported_SODataV4__Default_empty_SelectItemList_in_data_internal
#define imported_SODataV4__Default_empty_SelectItemList_in_data_public
/* internal */
/// @brief Static function to apply default `empty` values of type `SODataV4_SelectItemList`.
///
///
@interface SODataV4_Default_empty_SelectItemList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `T.empty`.
/// @param value Nullable value.
+ (nonnull SODataV4_SelectItemList*) ifNull :(nullable SODataV4_SelectItemList*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_empty_SortItemList_in_data_internal
#ifndef imported_SODataV4__Default_empty_SortItemList_in_data_internal
#define imported_SODataV4__Default_empty_SortItemList_in_data_public
/* internal */
/// @brief Static function to apply default `empty` values of type `SODataV4_SortItemList`.
///
///
@interface SODataV4_Default_empty_SortItemList_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `T.empty`.
/// @param value Nullable value.
+ (nonnull SODataV4_SortItemList*) ifNull :(nullable SODataV4_SortItemList*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_new_DataQuery_in_data_internal
#ifndef imported_SODataV4__Default_new_DataQuery_in_data_internal
#define imported_SODataV4__Default_new_DataQuery_in_data_public
/* internal */
/// @brief Static function to apply default new values of type `SODataV4_DataQuery`.
///
///
@interface SODataV4_Default_new_DataQuery_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return a new `SODataV4_DataQuery`.
/// @param value Nullable value.
+ (nonnull SODataV4_DataQuery*) ifNull :(nullable SODataV4_DataQuery*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_new_StringMap_in_data_internal
#ifndef imported_SODataV4__Default_new_StringMap_in_data_internal
#define imported_SODataV4__Default_new_StringMap_in_data_public
/* internal */
/// @brief Static function to apply default new values of type `SODataV4_StringMap`.
///
///
@interface SODataV4_Default_new_StringMap_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return a new `SODataV4_StringMap`.
/// @param value Nullable value.
+ (nonnull SODataV4_StringMap*) ifNull :(nullable SODataV4_StringMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_new_TypeFacets_in_data_internal
#ifndef imported_SODataV4__Default_new_TypeFacets_in_data_internal
#define imported_SODataV4__Default_new_TypeFacets_in_data_public
/* internal */
/// @brief Static function to apply default new values of type `SODataV4_TypeFacets`.
///
///
@interface SODataV4_Default_new_TypeFacets_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return a new `SODataV4_TypeFacets`.
/// @param value Nullable value.
+ (nonnull SODataV4_TypeFacets*) ifNull :(nullable SODataV4_TypeFacets*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_none_RequestOptions_in_data_internal
#ifndef imported_SODataV4__Default_none_RequestOptions_in_data_internal
#define imported_SODataV4__Default_none_RequestOptions_in_data_public
/* internal */
/// @brief Static function to apply default `none` values of type `SODataV4_RequestOptions`.
///
///
@interface SODataV4_Default_none_RequestOptions_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return `T.none`.
/// @param value Nullable value.
+ (nonnull SODataV4_RequestOptions*) ifNull :(nullable SODataV4_RequestOptions*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Default_undefined_EntitySet_in_data_internal
#ifndef imported_SODataV4__Default_undefined_EntitySet_in_data_internal
#define imported_SODataV4__Default_undefined_EntitySet_in_data_public
/* internal */
/// @brief Static function to apply default undefined values of type `SODataV4_EntitySet`.
///
///
@interface SODataV4_Default_undefined_EntitySet_in_data : SODataV4_ObjectBase
{
}
/// @return `value` if it is not `nil`, otherwise return a new `SODataV4_EntitySet`.
/// @param value Nullable value.
+ (nonnull SODataV4_EntitySet*) ifNull :(nullable SODataV4_EntitySet*)value;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_GeographyValueList_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_GeographyValueList_StringList_in_data_internal
#define imported_SODataV4__List_map_GeographyValueList_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_GeographyValueList_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_GeographyValueList*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_GeographyValue* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_GeometryValueList_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_GeometryValueList_StringList_in_data_internal
#define imported_SODataV4__List_map_GeometryValueList_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_GeometryValueList_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_GeometryValueList*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_GeometryValue* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_LineStringCoordinates_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_LineStringCoordinates_StringList_in_data_internal
#define imported_SODataV4__List_map_LineStringCoordinates_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_LineStringCoordinates_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_LineStringCoordinates*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_PointCoordinates* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_MultiLineStringCoordinates_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_MultiLineStringCoordinates_StringList_in_data_internal
#define imported_SODataV4__List_map_MultiLineStringCoordinates_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_MultiLineStringCoordinates_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_MultiLineStringCoordinates*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_LineStringCoordinates* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_MultiPointCoordinates_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_MultiPointCoordinates_StringList_in_data_internal
#define imported_SODataV4__List_map_MultiPointCoordinates_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_MultiPointCoordinates_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_MultiPointCoordinates*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_PointCoordinates* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_MultiPolygonCoordinates_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_MultiPolygonCoordinates_StringList_in_data_internal
#define imported_SODataV4__List_map_MultiPolygonCoordinates_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_MultiPolygonCoordinates_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_MultiPolygonCoordinates*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_PolygonCoordinates* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_PointCoordinates_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_PointCoordinates_StringList_in_data_internal
#define imported_SODataV4__List_map_PointCoordinates_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_PointCoordinates_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_PointCoordinates*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_double))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_map_PolygonCoordinates_StringList_in_data_internal
#ifndef imported_SODataV4__List_map_PolygonCoordinates_StringList_in_data_internal
#define imported_SODataV4__List_map_PolygonCoordinates_StringList_in_data_public
/* internal */
@interface SODataV4_List_map_PolygonCoordinates_StringList_in_data : SODataV4_ObjectBase
{
}
/// @brief Map a list using an arrow function for item conversion.
///
///
/// @return New converted list.
/// @param value List to be converted.
/// @param fun Arrow function for item conversion.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_PolygonCoordinates*)value :(NSString* _Nonnull(^ _Nonnull)(SODataV4_LineStringCoordinates* _Nonnull))fun;
@end
#endif
#endif

#ifdef import_SODataV4__List_sort_static_StringList_StringOperator_compare_in_data_internal
#ifndef imported_SODataV4__List_sort_static_StringList_StringOperator_compare_in_data_internal
#define imported_SODataV4__List_sort_static_StringList_StringOperator_compare_in_data_public
/* internal */
@interface SODataV4_List_sort_static_StringList_StringOperator_compare_in_data : SODataV4_ObjectBase
{
}
/// @brief Sort a list using a static function (fun) for item comparison.
///
///
/// @return New sorted list.
/// @param value List to be sorted.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_StringList*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_invert_StringMap_StringMap_in_data_internal
#ifndef imported_SODataV4__Map_invert_StringMap_StringMap_in_data_internal
#define imported_SODataV4__Map_invert_StringMap_StringMap_in_data_public
/* internal */
@interface SODataV4_Map_invert_StringMap_StringMap_in_data : SODataV4_ObjectBase
{
}
/// @brief Invert a map of keys to values to another map of values to keys.
///
///
/// @return New inverted map.
/// @param value Map to be inverted.
+ (nonnull SODataV4_StringMap*) call :(nonnull SODataV4_StringMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnnotationMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_AnnotationMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_AnnotationMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_AnnotationMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_AnnotationMap_EntryList*) call :(nonnull SODataV4_AnnotationMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnnotationMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_AnnotationMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_AnnotationMap_in_data_private
@interface SODataV4_Map_sortedEntries_AnnotationMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_AnnotationMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_AnnotationTermMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_AnnotationTermMap_EntryList*) call :(nonnull SODataV4_AnnotationTermMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_AnnotationTermMap_in_data_private
@interface SODataV4_Map_sortedEntries_AnnotationTermMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_AnnotationTermMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnyMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_AnyMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_AnyMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_AnyMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_AnyMap_EntryList*) call :(nonnull SODataV4_AnyMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_AnyMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_AnyMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_AnyMap_in_data_private
@interface SODataV4_Map_sortedEntries_AnyMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_AnyMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_ComplexTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_ComplexTypeMap_EntryList*) call :(nonnull SODataV4_ComplexTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_ComplexTypeMap_in_data_private
@interface SODataV4_Map_sortedEntries_ComplexTypeMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_ComplexTypeMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_DataMethodMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_DataMethodMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_DataMethodMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_DataMethodMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_DataMethodMap_EntryList*) call :(nonnull SODataV4_DataMethodMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_DataMethodMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_DataMethodMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_DataMethodMap_in_data_private
@interface SODataV4_Map_sortedEntries_DataMethodMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_DataMethodMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_DataSchemaMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_DataSchemaMap_EntryList*) call :(nonnull SODataV4_DataSchemaMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_DataSchemaMap_in_data_private
@interface SODataV4_Map_sortedEntries_DataSchemaMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_DataSchemaMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_EntityContainerMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_EntityContainerMap_EntryList*) call :(nonnull SODataV4_EntityContainerMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_EntityContainerMap_in_data_private
@interface SODataV4_Map_sortedEntries_EntityContainerMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_EntityContainerMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntitySetMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_EntitySetMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_EntitySetMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_EntitySetMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_EntitySetMap_EntryList*) call :(nonnull SODataV4_EntitySetMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntitySetMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_EntitySetMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_EntitySetMap_in_data_private
@interface SODataV4_Map_sortedEntries_EntitySetMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_EntitySetMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_EntityTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_EntityTypeMap_EntryList*) call :(nonnull SODataV4_EntityTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_EntityTypeMap_in_data_private
@interface SODataV4_Map_sortedEntries_EntityTypeMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_EntityTypeMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_EnumTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_EnumTypeMap_EntryList*) call :(nonnull SODataV4_EnumTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_EnumTypeMap_in_data_private
@interface SODataV4_Map_sortedEntries_EnumTypeMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_EnumTypeMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EnumValueMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_EnumValueMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_EnumValueMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_EnumValueMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_EnumValueMap_EntryList*) call :(nonnull SODataV4_EnumValueMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_EnumValueMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_EnumValueMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_EnumValueMap_in_data_private
@interface SODataV4_Map_sortedEntries_EnumValueMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_EnumValueMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_ObjectMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_ObjectMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_ObjectMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_ObjectMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_ObjectMap_EntryList*) call :(nonnull SODataV4_ObjectMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_ObjectMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_ObjectMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_ObjectMap_in_data_private
@interface SODataV4_Map_sortedEntries_ObjectMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_ObjectMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_PropertyMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_PropertyMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_PropertyMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_PropertyMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_PropertyMap_EntryList*) call :(nonnull SODataV4_PropertyMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_PropertyMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_PropertyMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_PropertyMap_in_data_private
@interface SODataV4_Map_sortedEntries_PropertyMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_PropertyMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_SimpleTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_SimpleTypeMap_EntryList*) call :(nonnull SODataV4_SimpleTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_SimpleTypeMap_in_data_private
@interface SODataV4_Map_sortedEntries_SimpleTypeMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_SimpleTypeMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_StringMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedEntries_StringMap_in_data_internal
#define imported_SODataV4__Map_sortedEntries_StringMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedEntries_StringMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted entries from `value` (in sorted order of `value.keys()`).
/// @param value Map for which sorted entries should be returned.
+ (nonnull SODataV4_StringMap_EntryList*) call :(nonnull SODataV4_StringMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedEntries_StringMap_in_data_private
#ifndef imported_SODataV4__Map_sortedEntries_StringMap_in_data_private
#define imported_SODataV4__Map_sortedEntries_StringMap_in_data_private
@interface SODataV4_Map_sortedEntries_StringMap_in_data (private)
+ (nonnull SODataV4_Map_sortedEntries_StringMap_in_data_KeyComparer*) _new1 :(nonnull SODataV4_Comparer*)p1;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_AnnotationMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_AnnotationMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_AnnotationMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_AnnotationMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_AnnotationMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_AnnotationTermMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_AnnotationTermMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_AnnotationTermMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_AnnotationTermMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_AnnotationTermMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_ComplexTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_ComplexTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_ComplexTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_ComplexTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_ComplexTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_DataMethodMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_DataMethodMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_DataMethodMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_DataMethodMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_DataMethodMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_DataSchemaMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_DataSchemaMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_DataSchemaMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_DataSchemaMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_DataSchemaMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_EntityContainerMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_EntityContainerMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_EntityContainerMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_EntityContainerMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_EntityContainerMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_EntitySetMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_EntitySetMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_EntitySetMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_EntitySetMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_EntitySetMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_EntityTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_EntityTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_EntityTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_EntityTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_EntityTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_EnumTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_EnumTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_EnumTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_EnumTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_EnumTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_EnumValueMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_EnumValueMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_EnumValueMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_EnumValueMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_EnumValueMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_PropertyMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_PropertyMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_PropertyMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_PropertyMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_PropertyMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_SimpleTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_SimpleTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_SimpleTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_SimpleTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_SimpleTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedKeys_StringMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedKeys_StringMap_in_data_internal
#define imported_SODataV4__Map_sortedKeys_StringMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedKeys_StringMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted keys from `value`.
/// @param value Map for which sorted keys should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_StringMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_AnnotationMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_AnnotationMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_AnnotationMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_AnnotationMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_AnnotationList*) call :(nonnull SODataV4_AnnotationMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_AnnotationTermMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_AnnotationTermMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_AnnotationTermMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_AnnotationTermMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_AnnotationTermList*) call :(nonnull SODataV4_AnnotationTermMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_ComplexTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_ComplexTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_ComplexTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_ComplexTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_ComplexTypeList*) call :(nonnull SODataV4_ComplexTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_DataMethodMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_DataMethodMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_DataMethodMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_DataMethodMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_DataMethodList*) call :(nonnull SODataV4_DataMethodMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_DataSchemaMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_DataSchemaMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_DataSchemaMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_DataSchemaMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_DataSchemaList*) call :(nonnull SODataV4_DataSchemaMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_EntityContainerMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_EntityContainerMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_EntityContainerMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_EntityContainerMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_EntityContainerList*) call :(nonnull SODataV4_EntityContainerMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_EntitySetMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_EntitySetMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_EntitySetMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_EntitySetMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_EntitySetList*) call :(nonnull SODataV4_EntitySetMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_EntityTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_EntityTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_EntityTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_EntityTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_EntityTypeList*) call :(nonnull SODataV4_EntityTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_EnumTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_EnumTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_EnumTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_EnumTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_EnumTypeList*) call :(nonnull SODataV4_EnumTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_EnumValueMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_EnumValueMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_EnumValueMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_EnumValueMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_EnumValueList*) call :(nonnull SODataV4_EnumValueMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_PropertyMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_PropertyMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_PropertyMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_PropertyMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_PropertyList*) call :(nonnull SODataV4_PropertyMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_SimpleTypeMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_SimpleTypeMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_SimpleTypeMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_SimpleTypeMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_SimpleTypeList*) call :(nonnull SODataV4_SimpleTypeMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Map_sortedValues_StringMap_in_data_internal
#ifndef imported_SODataV4__Map_sortedValues_StringMap_in_data_internal
#define imported_SODataV4__Map_sortedValues_StringMap_in_data_public
/* internal */
@interface SODataV4_Map_sortedValues_StringMap_in_data : SODataV4_ObjectBase
{
}
/// @return Sorted values from `value`.
/// @param value Map for which sorted values should be returned.
+ (nonnull SODataV4_StringList*) call :(nonnull SODataV4_StringMap*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Share_withNullable_ComplexValueList_in_data_internal
#ifndef imported_SODataV4__Share_withNullable_ComplexValueList_in_data_internal
#define imported_SODataV4__Share_withNullable_ComplexValueList_in_data_public
/* internal */
@interface SODataV4_Share_withNullable_ComplexValueList_in_data : SODataV4_ObjectBase
{
}
/// @brief Return a list sharing items with another list that has a getNullable function.
///
///
/// @return New list.
/// @param value Source list.
+ (nonnull SODataV4_ComplexValueList*) call :(nonnull SODataV4_ListBase*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Share_withNullable_DataValueList_in_data_internal
#ifndef imported_SODataV4__Share_withNullable_DataValueList_in_data_internal
#define imported_SODataV4__Share_withNullable_DataValueList_in_data_public
/* internal */
@interface SODataV4_Share_withNullable_DataValueList_in_data : SODataV4_ObjectBase
{
}
/// @brief Return a list sharing items with another list that has a getNullable function.
///
///
/// @return New list.
/// @param value Source list.
+ (nonnull SODataV4_DataValueList*) call :(nonnull SODataV4_ListBase*)value;
@end
#endif
#endif

#ifdef import_SODataV4__Share_withNullable_EntityValueList_in_data_internal
#ifndef imported_SODataV4__Share_withNullable_EntityValueList_in_data_internal
#define imported_SODataV4__Share_withNullable_EntityValueList_in_data_public
/* internal */
@interface SODataV4_Share_withNullable_EntityValueList_in_data : SODataV4_ObjectBase
{
}
/// @brief Return a list sharing items with another list that has a getNullable function.
///
///
/// @return New list.
/// @param value Source list.
+ (nonnull SODataV4_EntityValueList*) call :(nonnull SODataV4_ListBase*)value;
@end
#endif
#endif

#endif
