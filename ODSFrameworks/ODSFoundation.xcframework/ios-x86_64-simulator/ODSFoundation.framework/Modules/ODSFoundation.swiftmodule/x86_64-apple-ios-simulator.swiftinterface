// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ODSFoundation
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import CoreGraphics
import Foundation
import LocalAuthentication
@_exported import ODSFoundation
import ObjectiveC
import QuartzCore
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers open class LineScatterCandleRadarChartDataSet : ODSFoundation.BarLineScatterCandleBubbleChartDataSet, ODSFoundation.ILineScatterCandleRadarChartDataSet {
  @objc open var drawHorizontalHighlightIndicatorEnabled: Swift.Bool
  @objc open var drawVerticalHighlightIndicatorEnabled: Swift.Bool
  @objc open var isHorizontalHighlightIndicatorEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isVerticalHighlightIndicatorEnabled: Swift.Bool {
    @objc get
  }
  @objc open func setDrawHighlightIndicators(_ enabled: Swift.Bool)
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(label: Swift.String?)
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LineScatterCandleRadarChartRenderer) open class LineScatterCandleRadarRenderer : ODSFoundation.BarLineScatterCandleBubbleRenderer {
  @objc override public init(animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc open func drawHighlightLines(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint, set: ODSFoundation.ILineScatterCandleRadarChartDataSet)
  @objc deinit
}
@objc open class ScatterChartRenderer : ODSFoundation.LineScatterCandleRadarRenderer {
  @objc weak open var dataProvider: ODSFoundation.ScatterChartDataProvider?
  @objc public init(dataProvider: ODSFoundation.ScatterChartDataProvider, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LineChartView : ODSFoundation.BarLineChartViewBase, ODSFoundation.LineChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc open var lineData: ODSFoundation.LineChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc(IChartMarker) public protocol IMarker {
  @objc var offset: CoreFoundation.CGPoint { get }
  @objc func offsetForDrawing(atPoint: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc func refreshContent(entry: ODSFoundation.ChartDataEntry, highlight: ODSFoundation.Highlight)
  @objc func draw(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint)
}
public enum SnackbarDuration : Swift.Int {
  case SHORT
  case LONG
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func showSnackbar(message: Swift.String, duration: ODSFoundation.SnackbarDuration? = .SHORT, actionButtonText: Swift.String?, bgColor: UIKit.UIColor? = appColor, actionButtonClickHandler: (() -> ())?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OdsSnackBarView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var snackBarBgColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var descLabelTextColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var actionButtonBackgroundColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var actionButtonTextColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public class func show(message: Swift.String, duration: ODSFoundation.SnackbarDuration, actionButtonText: Swift.String? = "", bgColor: UIKit.UIColor? = appColor, superView: UIKit.UIView!, buttonClicked: (() -> ())?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(ChartTransformer) open class Transformer : ObjectiveC.NSObject {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc open func prepareMatrixValuePx(chartXMin: Swift.Double, deltaX: CoreFoundation.CGFloat, deltaY: CoreFoundation.CGFloat, chartYMin: Swift.Double)
  @objc open func prepareMatrixOffset(inverted: Swift.Bool)
  open func pointValuesToPixel(_ points: inout [CoreFoundation.CGPoint])
  open func pointValueToPixel(_ point: inout CoreFoundation.CGPoint)
  @objc open func pixelForValues(x: Swift.Double, y: Swift.Double) -> CoreFoundation.CGPoint
  open func rectValueToPixel(_ r: inout CoreFoundation.CGRect)
  open func rectValueToPixel(_ r: inout CoreFoundation.CGRect, phaseY: Swift.Double)
  open func rectValueToPixelHorizontal(_ r: inout CoreFoundation.CGRect)
  open func rectValueToPixelHorizontal(_ r: inout CoreFoundation.CGRect, phaseY: Swift.Double)
  open func rectValuesToPixel(_ rects: inout [CoreFoundation.CGRect])
  open func pixelsToValues(_ pixels: inout [CoreFoundation.CGPoint])
  open func pixelToValues(_ pixel: inout CoreFoundation.CGPoint)
  @objc open func valueForTouchPoint(_ point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc open func valueForTouchPoint(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  @objc open var valueToPixelMatrix: CoreFoundation.CGAffineTransform {
    @objc get
  }
  @objc open var pixelToValueMatrix: CoreFoundation.CGAffineTransform {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DropDownWithImageCell : ODSFoundation.DropDownCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var logoImageView: UIKit.UIImageView!
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ODSDatePickerViewControllerDelegate : AnyObject {
  func ODSDatePickerDidSet(_ viewController: ODSFoundation.ODSDatePickerViewController, result: ODSFoundation.ODSDatePickerResult)
  func ODSDatePickerDidCancel(_ viewController: ODSFoundation.ODSDatePickerViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ODSDatePickerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var datePickerTitle: Swift.String
  @_Concurrency.MainActor(unsafe) weak public var delegate: ODSFoundation.ODSDatePickerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var theme: ODSFoundation.ODSTheme
  @_Concurrency.MainActor(unsafe) public var suggestor: ODSFoundation.ODSDatePickerResultSuggestor
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
}
@objc open class RadarChartDataSet : ODSFoundation.LineRadarChartDataSet, ODSFoundation.IRadarChartDataSet {
  @objc required dynamic public init()
  @objc required override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc open var drawHighlightCircleEnabled: Swift.Bool
  @objc open var isDrawHighlightCircleEnabled: Swift.Bool {
    @objc get
  }
  @objc open var highlightCircleFillColor: ODSFoundation.NSUIColor?
  @objc open var highlightCircleStrokeColor: ODSFoundation.NSUIColor?
  @objc open var highlightCircleStrokeAlpha: CoreFoundation.CGFloat
  @objc open var highlightCircleInnerRadius: CoreFoundation.CGFloat
  @objc open var highlightCircleOuterRadius: CoreFoundation.CGFloat
  @objc open var highlightCircleStrokeWidth: CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartXAxis) open class XAxis : ODSFoundation.AxisBase {
  @objc(XAxisLabelPosition) public enum LabelPosition : Swift.Int {
    case top
    case bottom
    case bothSided
    case topInside
    case bottomInside
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var labelWidth: CoreFoundation.CGFloat
  @objc open var labelHeight: CoreFoundation.CGFloat
  @objc open var labelRotatedWidth: CoreFoundation.CGFloat
  @objc open var labelRotatedHeight: CoreFoundation.CGFloat
  @objc open var labelRotationAngle: CoreFoundation.CGFloat
  @objc open var avoidFirstLastClippingEnabled: Swift.Bool
  @objc open var labelPosition: ODSFoundation.XAxis.LabelPosition
  @objc open var wordWrapEnabled: Swift.Bool
  @objc open var isWordWrapEnabled: Swift.Bool {
    @objc get
  }
  @objc open var wordWrapWidthPercent: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc open var isAvoidFirstLastClippingEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ODSPushHelper : ObjectiveC.NSObject {
  public static func registerForPushSubscription(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, storeName: Swift.String, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getPushSubscriptionEntity(queryRequest: Swift.String, StoreName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deletePushSubscriptionEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, options: [Swift.AnyHashable : Any]!, pushDeletedelegate: ODSFoundation.PushDeleteDelegate, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc open class BubbleChartDataEntry : ODSFoundation.ChartDataEntry {
  @objc open var size: CoreFoundation.CGFloat
  @objc required dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat, data: Any?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, size: CoreFoundation.CGFloat, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public protocol BarChartDataProvider : ODSFoundation.BarLineScatterCandleBubbleChartDataProvider {
  @objc var barData: ODSFoundation.BarChartData? { get }
  @objc var isDrawBarShadowEnabled: Swift.Bool { get }
  @objc var isDrawValueAboveBarEnabled: Swift.Bool { get }
  @objc var isHighlightFullBarEnabled: Swift.Bool { get }
}
public struct TabItem {
  public var title: Swift.String?
  public var image: UIKit.UIImage?
  public var font: UIKit.UIFont
  public var cellWidth: CoreFoundation.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public var normalColor: UIKit.UIColor
  public var highlightedColor: UIKit.UIColor
  public init(title: Swift.String? = nil, image: UIKit.UIImage? = nil, font: UIKit.UIFont = .boldSystemFont(ofSize: 14), cellWidth: CoreFoundation.CGFloat? = nil, backgroundColor: UIKit.UIColor = .black, normalColor: UIKit.UIColor = .black, highlightedColor: UIKit.UIColor = .black)
}
public protocol TabCellDelegate {
  func moveTo(index: Swift.Int)
  var pageViewController: ODSFoundation.PageViewController { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TabCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var countLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var selectedView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var cellView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public var index: Swift.Int
  @_Concurrency.MainActor(unsafe) public var delegate: ODSFoundation.TabCellDelegate?
  @_Concurrency.MainActor(unsafe) public var indexPath: Foundation.IndexPath
  @_Concurrency.MainActor(unsafe) public var tabModelClass: ODSFoundation.TabItem? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailModelClass: ODSFoundation.TabItem? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var suspendModel: ODSFoundation.TabItem? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var flocEquipModel: ODSFoundation.TabItem? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func singleTap(_ gesture: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public func tabDataConfiguration()
  @_Concurrency.MainActor(unsafe) public func detailTabDataConfiguration(currentMasterView: Swift.String, count: Swift.String, bgColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func suspendVcCollecionCellConfiguration()
  @_Concurrency.MainActor(unsafe) public func flocEquipCollecionCellConfiguration()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChartLimitLine : ODSFoundation.ComponentBase {
  @objc(ChartLimitLabelPosition) public enum LabelPosition : Swift.Int {
    case topLeft
    case topRight
    case bottomLeft
    case bottomRight
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var limit: Swift.Double
  @objc open var lineColor: ODSFoundation.NSUIColor
  @objc open var lineDashPhase: CoreFoundation.CGFloat
  @objc open var lineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var valueTextColor: UIKit.UIColor
  @objc open var valueFont: UIKit.UIFont
  @objc open var drawLabelEnabled: Swift.Bool
  @objc open var label: Swift.String
  @objc open var labelPosition: ODSFoundation.ChartLimitLine.LabelPosition
  @objc override dynamic public init()
  @objc public init(limit: Swift.Double)
  @objc public init(limit: Swift.Double, label: Swift.String)
  @objc open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class BarChartRenderer : ODSFoundation.BarLineScatterCandleBubbleRenderer {
  @objc weak open var dataProvider: ODSFoundation.BarChartDataProvider?
  @objc public init(dataProvider: ODSFoundation.BarChartDataProvider, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func initBuffers()
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IBarChartDataSet, index: Swift.Int)
  open func prepareBarHighlight(x: Swift.Double, y1: Swift.Double, y2: Swift.Double, barWidthHalf: Swift.Double, trans: ODSFoundation.Transformer, rect: inout CoreFoundation.CGRect)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc open func drawValue(context: CoreGraphics.CGContext, value: Swift.String, xPos: CoreFoundation.CGFloat, yPos: CoreFoundation.CGFloat, font: ODSFoundation.NSUIFont, align: UIKit.NSTextAlignment, color: ODSFoundation.NSUIColor)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@objc public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc public init(barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector)
  @objc public init(image: UIKit.UIImage, action: ObjectiveC.Selector)
  @objc public init(title: Swift.String, action: ObjectiveC.Selector)
  final public let barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc final public let image: UIKit.UIImage?
  @objc final public let title: Swift.String?
  @objc final public let action: ObjectiveC.Selector?
  @objc deinit
}
@objc extension UIKit.UIImage {
  @objc public static func keyboardPreviousiOS9Image() -> UIKit.UIImage?
  @objc public static func keyboardNextiOS9Image() -> UIKit.UIImage?
  @objc public static func keyboardPreviousiOS10Image() -> UIKit.UIImage?
  @objc public static func keyboardNextiOS10Image() -> UIKit.UIImage?
  @objc public static func keyboardPreviousImage() -> UIKit.UIImage?
  @objc public static func keyboardNextImage() -> UIKit.UIImage?
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardToolbar: ODSFoundation.IQToolbar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, rightBarButtonConfiguration: ODSFoundation.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: ODSFoundation.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: ODSFoundation.IQBarButtonItemConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
}
@objc @_Concurrency.MainActor(unsafe) open class ExpandingMenuItem : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleMargin: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(size: CoreFoundation.CGSize?, title: Swift.String? = nil, titleColor: UIKit.UIColor? = nil, image: UIKit.UIImage, highlightedImage: UIKit.UIImage?, backgroundImage: UIKit.UIImage?, backgroundHighlightedImage: UIKit.UIImage?, itemTapped: (() -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage, highlightedImage: UIKit.UIImage, backgroundImage: UIKit.UIImage?, backgroundHighlightedImage: UIKit.UIImage?, itemTapped: (() -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String, titleColor: UIKit.UIColor? = nil, image: UIKit.UIImage, highlightedImage: UIKit.UIImage, backgroundImage: UIKit.UIImage?, backgroundHighlightedImage: UIKit.UIImage?, itemTapped: (() -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(size: CoreFoundation.CGSize, image: UIKit.UIImage, highlightedImage: UIKit.UIImage, backgroundImage: UIKit.UIImage?, backgroundHighlightedImage: UIKit.UIImage?, itemTapped: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct StateMessageProvider {
  public var scanningText: Swift.String
  public var processingText: Swift.String
  public var unathorizedText: Swift.String
  public var notFoundText: Swift.String
}
@objc open class CandleStickChartRenderer : ODSFoundation.LineScatterCandleRadarRenderer {
  @objc weak open var dataProvider: ODSFoundation.CandleChartDataProvider?
  @objc public init(dataProvider: ODSFoundation.CandleChartDataProvider, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ICandleChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@objc open class XAxisRendererRadarChart : ODSFoundation.XAxisRenderer {
  @objc weak open var chart: ODSFoundation.RadarChartView?
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, xAxis: ODSFoundation.XAxis?, chart: ODSFoundation.RadarChartView)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc open func drawLabel(context: CoreGraphics.CGContext, formattedLabel: Swift.String, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, attributes: [Foundation.NSAttributedString.Key : Any], anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BubbleChartView : ODSFoundation.BarLineChartViewBase, ODSFoundation.BubbleChartDataProvider {
  @_Concurrency.MainActor(unsafe) open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var bubbleData: ODSFoundation.BubbleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChevronDownShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
public struct CustomAnimationOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let rotate: ODSFoundation.CustomAnimationOptions
  public static let bound: ODSFoundation.CustomAnimationOptions
  public static let move: ODSFoundation.CustomAnimationOptions
  public static let fade: ODSFoundation.CustomAnimationOptions
  public static let menuButtonRotate: ODSFoundation.CustomAnimationOptions
  public static let `default`: ODSFoundation.CustomAnimationOptions
  public static let all: ODSFoundation.CustomAnimationOptions
  public typealias ArrayLiteralElement = ODSFoundation.CustomAnimationOptions
  public typealias Element = ODSFoundation.CustomAnimationOptions
  public typealias RawValue = Swift.Int
}
@objc @_Concurrency.MainActor(unsafe) open class ExpandingMenuButton : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  @objc public enum ExpandingDirection : Swift.Int {
    case top
    case bottom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum MenuTitleDirection : Swift.Int {
    case left
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum HapticFeedbackStyle : Swift.Int {
    case light
    case medium
    case heavy
    case none
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) open var menuItemMargin: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var menuButtonHapticStyle: ODSFoundation.ExpandingMenuButton.HapticFeedbackStyle
  @objc @_Concurrency.MainActor(unsafe) open var menuItemsHapticStyle: ODSFoundation.ExpandingMenuButton.HapticFeedbackStyle
  @objc @_Concurrency.MainActor(unsafe) open var playSound: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var expandingSoundPath: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var foldSoundPath: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectedSoundPath: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var bottomViewColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var bottomViewAlpha: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var titleTappedActionEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var expandingDirection: ODSFoundation.ExpandingMenuButton.ExpandingDirection
  @objc @_Concurrency.MainActor(unsafe) open var menuTitleDirection: ODSFoundation.ExpandingMenuButton.MenuTitleDirection
  @_Concurrency.MainActor(unsafe) open var expandingAnimations: ODSFoundation.CustomAnimationOptions
  @_Concurrency.MainActor(unsafe) open var foldingAnimations: ODSFoundation.CustomAnimationOptions
  @objc @_Concurrency.MainActor(unsafe) open var willPresentMenuItems: ((ODSFoundation.ExpandingMenuButton) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var didPresentMenuItems: ((ODSFoundation.ExpandingMenuButton) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var willDismissMenuItems: ((ODSFoundation.ExpandingMenuButton) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var didDismissMenuItems: ((ODSFoundation.ExpandingMenuButton) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, image: UIKit.UIImage? = nil, highlightedImage: UIKit.UIImage? = nil, rotatedImage: UIKit.UIImage? = nil, rotatedHighlightedImage: UIKit.UIImage? = nil)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage, rotatedImage: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func addMenuItems(_ menuItems: [ODSFoundation.ExpandingMenuItem])
  @objc @_Concurrency.MainActor(unsafe) open func menuItemTapped(_ item: ODSFoundation.ExpandingMenuItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartDefaultValueFormatter) open class DefaultValueFormatter : ObjectiveC.NSObject, ODSFoundation.IValueFormatter {
  public typealias Block = (_ value: Swift.Double, _ entry: ODSFoundation.ChartDataEntry, _ dataSetIndex: Swift.Int, _ viewPortHandler: ODSFoundation.ViewPortHandler?) -> Swift.String
  @objc open var block: ODSFoundation.DefaultValueFormatter.Block?
  @objc open var hasAutoDecimals: Swift.Bool
  @objc open var formatter: Foundation.NumberFormatter? {
    @objc get
    @objc set
  }
  open var decimals: Swift.Int? {
    get
    set
  }
  @objc override dynamic public init()
  @objc public init(formatter: Foundation.NumberFormatter)
  @objc public init(decimals: Swift.Int)
  @objc public init(block: @escaping ODSFoundation.DefaultValueFormatter.Block)
  @objc public static func with(block: @escaping ODSFoundation.DefaultValueFormatter.Block) -> ODSFoundation.DefaultValueFormatter?
  @objc open func stringForValue(_ value: Swift.Double, entry: ODSFoundation.ChartDataEntry, dataSetIndex: Swift.Int, viewPortHandler: ODSFoundation.ViewPortHandler?) -> Swift.String
  @objc deinit
}
@objc open class XAxisRendererHorizontalBarChart : ODSFoundation.XAxisRenderer {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, xAxis: ODSFoundation.XAxis?, transformer: ODSFoundation.Transformer?, chart: ODSFoundation.BarChartView)
  @objc override open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc override open func computeSize()
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func drawLabels(context: CoreGraphics.CGContext, pos: CoreFoundation.CGFloat, anchor: CoreFoundation.CGPoint)
  @objc open func drawLabel(context: CoreGraphics.CGContext, formattedLabel: Swift.String, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, attributes: [Foundation.NSAttributedString.Key : Any], anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  @objc override open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc override open func drawGridLine(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BarChartData : ODSFoundation.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc open var barWidth: Swift.Double
  @objc open func groupBars(fromX: Swift.Double, groupSpace: Swift.Double, barSpace: Swift.Double)
  @objc open func groupWidth(groupSpace: Swift.Double, barSpace: Swift.Double) -> Swift.Double
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BarLineScatterCandleBubbleChartData : ODSFoundation.ChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BarChartHighlighter) open class BarHighlighter : ODSFoundation.ChartHighlighter {
  @objc override open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc open func getStackedHighlight(high: ODSFoundation.Highlight, set: ODSFoundation.IBarChartDataSet, xValue: Swift.Double, yValue: Swift.Double) -> ODSFoundation.Highlight?
  @objc open func getClosestStackIndex(ranges: [ODSFoundation.Range]?, value: Swift.Double) -> Swift.Int
  @objc override public init(chart: ODSFoundation.ChartDataProvider)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChartColorTemplates : ObjectiveC.NSObject {
  @objc open class func liberty() -> [ODSFoundation.NSUIColor]
  @objc open class func joyful() -> [ODSFoundation.NSUIColor]
  @objc open class func pastel() -> [ODSFoundation.NSUIColor]
  @objc open class func colorful() -> [ODSFoundation.NSUIColor]
  @objc open class func vordiplom() -> [ODSFoundation.NSUIColor]
  @objc open class func material() -> [ODSFoundation.NSUIColor]
  @objc open class func colorFromString(_ colorString: Swift.String) -> ODSFoundation.NSUIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol CombinedChartDataProvider : ODSFoundation.BarChartDataProvider, ODSFoundation.BubbleChartDataProvider, ODSFoundation.CandleChartDataProvider, ODSFoundation.LineChartDataProvider, ODSFoundation.ScatterChartDataProvider {
  @objc var combinedData: ODSFoundation.CombinedChartData? { get }
}
@objc @_inheritsConvenienceInitializers open class ODSOnlineHelper : ObjectiveC.NSObject {
  public static func SODataQueryRequestToNSMutableDictionary(QueryResult: ODSFoundation.SODataV4_QueryResult, EntitySet: ODSFoundation.SODataV4_EntitySet) -> Foundation.NSMutableDictionary
  public static func SODataEntityValueToNSMutableDictionary(EntityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func SODataQueryRequestToNSMutableDictionary(QueryResult: ODSFoundation.SODataV4_QueryResult, EntitySet: ODSFoundation.SODataV4_EntitySet, navProperty: Swift.String) -> Foundation.NSMutableDictionary
  public static func getDataFromOnlineStore(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, requestUrl: Swift.String, entitySet: Swift.String) -> Foundation.NSMutableDictionary
  public static func getDataFromOnlineStore(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, requestUrl: Swift.String, entitySet: Swift.String, navProperty: Swift.String) -> Foundation.NSMutableDictionary
  public static func getDataFromOnlineStore(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, requestUrl: Swift.String, entitySet: Swift.String, expectSingle: Swift.Bool) -> Foundation.NSMutableDictionary
  public static func getEntitySetDetails(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, entityString: Swift.String) -> Foundation.NSMutableDictionary
  public static func createOnlineEntity(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, entityString: Swift.String, entity: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  public static func updateOnlineEntity(httpcon: ODSFoundation.HttpConversationManager, StoreUrl: Swift.String, entityValue: ODSFoundation.SODataV4_EntityValue) -> Foundation.NSMutableDictionary
  @objc override dynamic public init()
  @objc deinit
}
@objc open class CombinedChartRenderer : ODSFoundation.DataRenderer {
  @objc weak open var chart: ODSFoundation.CombinedChartView?
  @objc open var drawValueAboveBarEnabled: Swift.Bool
  @objc open var drawBarShadowEnabled: Swift.Bool
  @objc public init(chart: ODSFoundation.CombinedChartView, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func initBuffers()
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc open func getSubRenderer(index: Swift.Int) -> ODSFoundation.DataRenderer?
  @objc open var subRenderers: [ODSFoundation.DataRenderer] {
    @objc get
    @objc set
  }
  @objc open var isDrawValueAboveBarEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawBarShadowEnabled: Swift.Bool {
    @objc get
  }
  open var drawOrder: [ODSFoundation.CombinedChartView.DrawOrder] {
    get
    set
  }
  @objc deinit
}
@objc open class PieChartDataEntry : ODSFoundation.ChartDataEntry {
  @objc required dynamic public init()
  @objc public init(value: Swift.Double)
  @objc convenience public init(value: Swift.Double, label: Swift.String?)
  @objc convenience public init(value: Swift.Double, label: Swift.String?, data: Any?)
  @objc convenience public init(value: Swift.Double, label: Swift.String?, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(value: Swift.Double, label: Swift.String?, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc convenience public init(value: Swift.Double, data: Any?)
  @objc convenience public init(value: Swift.Double, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(value: Swift.Double, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc open var label: Swift.String?
  @objc open var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public enum ActionSheetPopoverStyle : Swift.Int {
  case normal
  case barButton
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Parameters {
  public init(title: Swift.String? = nil, message: Swift.String? = nil, cancelButton: Swift.String? = nil, destructiveButtons: [Swift.String]? = nil, otherButtons: [Swift.String]? = nil, disabledButtons: [Swift.String]? = nil, inputFields: [ODSFoundation.InputField]? = nil, sender: Swift.AnyObject? = nil, arrowDirection: UIKit.UIPopoverArrowDirection? = nil, popoverStyle: ODSFoundation.ActionSheetPopoverStyle = .normal)
}
public struct InputField {
  public init(placeholder: Swift.String, secure: Swift.Bool?)
}
public class ODSAlertHelper {
  public static var animated: Swift.Bool
  public static var completionHandler: (() -> Swift.Void)?
  public static var textFields: [Swift.AnyObject]?
  public init()
  public static func showAlert(_ parent: UIKit.UIViewController, title: Swift.String?, message: Swift.String?, button: Swift.String)
  public static func showAlertWithHandler(_ parent: UIKit.UIViewController, parameters: ODSFoundation.Parameters, handler: @escaping (Swift.Int) -> ())
  public static func showActionSheet(_ parent: UIKit.UIViewController, parameters: ODSFoundation.Parameters, handler: @escaping (Swift.Int) -> ())
  @objc deinit
}
public protocol ODSTimePickerViewControllerDelegate : AnyObject {
  func ODSTimePickerDidSet(_ viewController: ODSFoundation.ODSTimePickerViewController, result: ODSFoundation.ODSTimePickerResult)
  func ODSTimePickerDidCancel(_ viewController: ODSFoundation.ODSTimePickerViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ODSTimePickerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var timePickerTitle: Swift.String
  @_Concurrency.MainActor(unsafe) weak public var delegate: ODSFoundation.ODSTimePickerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var theme: ODSFoundation.ODSTheme
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CameraViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var barCodeFocusViewType: ODSFoundation.FocusViewType
  @_Concurrency.MainActor(unsafe) final public var showsCameraButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var focusView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var flashButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var OCRButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var CamButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var settingsButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var cameraButton: UIKit.UIButton {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ODSFoundation.CameraViewController : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
@available(iOS 13.0, *)
extension ODSFoundation.CameraViewController : AVFoundation.AVCapturePhotoCaptureDelegate {
}
@objc @_inheritsConvenienceInitializers open class CombinedChartData : ODSFoundation.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc open var lineData: ODSFoundation.LineChartData! {
    @objc get
    @objc set
  }
  @objc open var barData: ODSFoundation.BarChartData! {
    @objc get
    @objc set
  }
  @objc open var scatterData: ODSFoundation.ScatterChartData! {
    @objc get
    @objc set
  }
  @objc open var candleData: ODSFoundation.CandleChartData! {
    @objc get
    @objc set
  }
  @objc open var bubbleData: ODSFoundation.BubbleChartData! {
    @objc get
    @objc set
  }
  @objc override open func calcMinMax()
  @objc open var allData: [ODSFoundation.ChartData] {
    @objc get
  }
  @objc open func dataByIndex(_ index: Swift.Int) -> ODSFoundation.ChartData
  open func dataIndex(_ data: ODSFoundation.ChartData) -> Swift.Int?
  @objc override open func removeDataSet(_ dataSet: ODSFoundation.IChartDataSet) -> Swift.Bool
  @objc override open func removeDataSetByIndex(_ index: Swift.Int) -> Swift.Bool
  @objc override open func removeEntry(_ entry: ODSFoundation.ChartDataEntry, dataSetIndex: Swift.Int) -> Swift.Bool
  @objc override open func removeEntry(xValue: Swift.Double, dataSetIndex: Swift.Int) -> Swift.Bool
  @objc override open func notifyDataChanged()
  @objc override open func entryForHighlight(_ highlight: ODSFoundation.Highlight) -> ODSFoundation.ChartDataEntry?
  @objc open func getDataSetByHighlight(_ highlight: ODSFoundation.Highlight) -> ODSFoundation.IChartDataSet!
  @objc deinit
}
@objc public protocol ICandleChartDataSet : ODSFoundation.ILineScatterCandleRadarChartDataSet {
  @objc var barSpace: CoreFoundation.CGFloat { get set }
  @objc var showCandleBar: Swift.Bool { get set }
  @objc var shadowWidth: CoreFoundation.CGFloat { get set }
  @objc var shadowColor: ODSFoundation.NSUIColor? { get set }
  @objc var shadowColorSameAsCandle: Swift.Bool { get set }
  @objc var isShadowColorSameAsCandle: Swift.Bool { get }
  @objc var neutralColor: ODSFoundation.NSUIColor? { get set }
  @objc var increasingColor: ODSFoundation.NSUIColor? { get set }
  @objc var decreasingColor: ODSFoundation.NSUIColor? { get set }
  @objc var increasingFilled: Swift.Bool { get set }
  @objc var isIncreasingFilled: Swift.Bool { get }
  @objc var decreasingFilled: Swift.Bool { get set }
  @objc var isDecreasingFilled: Swift.Bool { get }
}
@objc public protocol IBarLineScatterCandleBubbleChartDataSet : ODSFoundation.IChartDataSet {
  @objc var highlightColor: ODSFoundation.NSUIColor { get set }
  @objc var highlightLineWidth: CoreFoundation.CGFloat { get set }
  @objc var highlightLineDashPhase: CoreFoundation.CGFloat { get set }
  @objc var highlightLineDashLengths: [CoreFoundation.CGFloat]? { get set }
}
@objc(ChartXAxisRenderer) open class XAxisRenderer : ODSFoundation.AxisRendererBase {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, xAxis: ODSFoundation.XAxis?, transformer: ODSFoundation.Transformer?)
  @objc override open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc override open func computeAxisValues(min: Swift.Double, max: Swift.Double)
  @objc open func computeSize()
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc open func drawLabels(context: CoreGraphics.CGContext, pos: CoreFoundation.CGFloat, anchor: CoreFoundation.CGPoint)
  @objc open func drawLabel(context: CoreGraphics.CGContext, formattedLabel: Swift.String, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, attributes: [Foundation.NSAttributedString.Key : Any], constrainedToSize: CoreFoundation.CGSize, anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  @objc override open func renderGridLines(context: CoreGraphics.CGContext)
  @objc open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc open func drawGridLine(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc open func renderLimitLineLine(context: CoreGraphics.CGContext, limitLine: ODSFoundation.ChartLimitLine, position: CoreFoundation.CGPoint)
  @objc open func renderLimitLineLabel(context: CoreGraphics.CGContext, limitLine: ODSFoundation.ChartLimitLine, position: CoreFoundation.CGPoint, yOffset: CoreFoundation.CGFloat)
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open func isPresented() -> Swift.Bool
}
@objc public protocol ChartDataProvider {
  @objc var chartXMin: Swift.Double { get }
  @objc var chartXMax: Swift.Double { get }
  @objc var chartYMin: Swift.Double { get }
  @objc var chartYMax: Swift.Double { get }
  @objc var maxHighlightDistance: CoreFoundation.CGFloat { get }
  @objc var xRange: Swift.Double { get }
  @objc var centerOffsets: CoreFoundation.CGPoint { get }
  @objc var data: ODSFoundation.ChartData? { get }
  @objc var maxVisibleCount: Swift.Int { get }
}
@_hasMissingDesignatedInitializers public class RSFirstRowSelection {
  @objc deinit
}
@objc open class PieChartDataSet : ODSFoundation.ChartDataSet, ODSFoundation.IPieChartDataSet {
  @objc(PieChartValuePosition) public enum ValuePosition : Swift.Int {
    case insideSlice
    case outsideSlice
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc required dynamic public init()
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc open var sliceSpace: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var automaticallyDisableSliceSpacing: Swift.Bool
  @objc open var selectionShift: CoreFoundation.CGFloat
  @objc open var xValuePosition: ODSFoundation.PieChartDataSet.ValuePosition
  @objc open var yValuePosition: ODSFoundation.PieChartDataSet.ValuePosition
  @objc open var valueLineColor: ODSFoundation.NSUIColor?
  @objc open var useValueColorForLine: Swift.Bool
  @objc open var valueLineWidth: CoreFoundation.CGFloat
  @objc open var valueLinePart1OffsetPercentage: CoreFoundation.CGFloat
  @objc open var valueLinePart1Length: CoreFoundation.CGFloat
  @objc open var valueLinePart2Length: CoreFoundation.CGFloat
  @objc open var valueLineVariableLength: Swift.Bool
  @objc open var entryLabelFont: ODSFoundation.NSUIFont?
  @objc open var entryLabelColor: ODSFoundation.NSUIColor?
  @objc open var highlightColor: ODSFoundation.NSUIColor?
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func previousIndexPath(of indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
}
@objc @_Concurrency.MainActor(unsafe) open class NSUIAccessibilityElement : UIKit.UIAccessibilityElement {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(accessibilityContainer container: Any)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityFrame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ODSFoundation.NSUIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func accessibilityChildren() -> [Any]?
  @_Concurrency.MainActor(unsafe) @objc final override public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
public enum SelectionStyle {
  case single
  case multiple
  public static func == (a: ODSFoundation.SelectionStyle, b: ODSFoundation.SelectionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PresentationStyle {
  case present
  case push
  case formSheet(size: CoreFoundation.CGSize?)
  case popover(sourceView: UIKit.UIView, size: CoreFoundation.CGSize?, arrowDirection: UIKit.UIPopoverArrowDirection = .any, hideNavBar: Swift.Bool = false)
  case alert(title: Swift.String?, action: Swift.String?, height: Swift.Double?)
  case actionSheet(title: Swift.String?, action: Swift.String?, height: Swift.Double?)
  case bottomSheet(barButton: UIKit.UIBarButtonItem, height: Swift.Double?)
}
public enum CellType {
  case basic
  case rightDetail
  case subTitle
  case customNib(nibName: Swift.String, cellIdentifier: Swift.String)
  case customClass(type: Swift.AnyClass, cellIdentifier: Swift.String)
}
public enum CellSelectionStyle {
  case tickmark
  case checkbox
  public static func == (a: ODSFoundation.CellSelectionStyle, b: ODSFoundation.CellSelectionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FirstRowType {
  case empty
  case none
  case all
  case custom(value: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class ODSUIHelper : ObjectiveC.NSObject {
  public static func setBorderToView(view: UIKit.UIView, borderWidth: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
  public static func setBorderToView(view: UIKit.UIView)
  public static func setBorderToView(view: UIKit.UIView, borderColor: UIKit.UIColor)
  public static func setLayoutToView(view: UIKit.UIView, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  public static func setCornerRadiusToView(view: UIKit.UIView, cornerRadius: CoreFoundation.CGFloat)
  public static func setBorderToView(view: UIKit.UIView, borderWidth: CoreFoundation.CGFloat)
  public static func setCircleBorderToView(view: UIKit.UIView, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
  public static func setRoundLabel(label: UIKit.UILabel)
  public static func setCircleBorderToView(view: UIKit.UIView)
  public static func setViewLayout(view: UIKit.UIView, shadowColor: UIKit.UIColor, shadowOffSet: CoreFoundation.CGSize, opacity: Swift.Float, radius: CoreFoundation.CGFloat)
  public static func setButtonLayout(button: UIKit.UIButton, cornerRadius: CoreFoundation.CGFloat, bgColor: UIKit.UIColor)
  public static func setButtonCornerRadius(button: UIKit.UIButton, cornerRadius: CoreFoundation.CGFloat)
  public static func setCircleButtonLayout(button: UIKit.UIButton)
  public static func setCircleButtonLayout(button: UIKit.UIButton, bgColor: UIKit.UIColor)
  public static func setTextfiledLayout(textfield: UIKit.UITextField)
  public static func setTextfiledLayout(textfield: UIKit.UITextField, borderColor: UIKit.UIColor)
  public static func setTextfiledLayout(textfield: UIKit.UITextField, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
  public static func setCornerRadiusToImgView(imageView: UIKit.UIImageView, cornerRadius: CoreFoundation.CGFloat)
  public static func setBorderWidthToImgView(imageView: UIKit.UIImageView, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
  public static func setCornerRadiusTableView(tblView: UIKit.UITableView, cornerRadius: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  public static func setSearchBar(searcBar: UIKit.UISearchBar, bgcolor: UIKit.UIColor? = .white, img: UIKit.UIImage? = UIImage(), textColor: UIKit.UIColor? = .black)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AnimatedMoveViewJob : ODSFoundation.AnimatedViewPortJob {
  @objc override public init(viewPortHandler: ODSFoundation.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ODSFoundation.Transformer, view: ODSFoundation.ChartViewBase, xOrigin: CoreFoundation.CGFloat, yOrigin: CoreFoundation.CGFloat, duration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BarLineScatterCandleBubbleChartRenderer) open class BarLineScatterCandleBubbleRenderer : ODSFoundation.DataRenderer {
  @objc override public init(animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  open class XBounds {
    open var min: Swift.Int
    open var max: Swift.Int
    open var range: Swift.Int
    public init()
    public init(chart: ODSFoundation.BarLineScatterCandleBubbleChartDataProvider, dataSet: ODSFoundation.IBarLineScatterCandleBubbleChartDataSet, animator: ODSFoundation.Animator?)
    open func set(chart: ODSFoundation.BarLineScatterCandleBubbleChartDataProvider, dataSet: ODSFoundation.IBarLineScatterCandleBubbleChartDataSet, animator: ODSFoundation.Animator?)
    @objc deinit
  }
  @objc deinit
}
extension ODSFoundation.BarLineScatterCandleBubbleRenderer.XBounds : Swift.RangeExpression {
  public func relative<C>(to collection: C) -> Swift.Range<Swift.Int> where C : Swift.Collection, C.Index == Swift.Int
  public func contains(_ element: Swift.Int) -> Swift.Bool
  public typealias Bound = Swift.Int
}
extension ODSFoundation.BarLineScatterCandleBubbleRenderer.XBounds : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Swift.Int?
    public typealias Element = Swift.Int
  }
  public func makeIterator() -> ODSFoundation.BarLineScatterCandleBubbleRenderer.XBounds.Iterator
  public typealias Element = Swift.Int
}
@objc @_inheritsConvenienceInitializers open class CandleChartData : ODSFoundation.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc deinit
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func showProgressView(message: Swift.String, actionButtonText: Swift.String?, actionButtonClickHandler: (() -> ())?)
  @_Concurrency.MainActor(unsafe) public func hideProgressView()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OdsProgressBarView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var snackBarBgColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var descLabelTextColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var actionButtonBackgroundColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var actionButtonTextColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public class func show(message: Swift.String, actionButtonText: Swift.String?, superView: UIKit.UIView!, buttonClicked: (() -> ())?)
  @_Concurrency.MainActor(unsafe) public class func hideBar()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: ODSFoundation.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: ODSFoundation.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: ODSFoundation.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: ODSFoundation.ToastPosition = ToastManager.shared.position, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func hideToast()
  @_Concurrency.MainActor(unsafe) public func hideToast(_ toast: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func clearToastQueue()
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ position: ODSFoundation.ToastPosition)
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) public func hideToastActivity()
  @_Concurrency.MainActor(unsafe) public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: ODSFoundation.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreFoundation.CGFloat
  public var shadowOffset: CoreFoundation.CGSize
  public var imageSize: CoreFoundation.CGSize
  public var activitySize: CoreFoundation.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: ODSFoundation.ToastManager
  public var style: ODSFoundation.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: ODSFoundation.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: ODSFoundation.ToastPosition, b: ODSFoundation.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ChartLegendEntry) open class LegendEntry : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(label: Swift.String?, form: ODSFoundation.Legend.Form, formSize: CoreFoundation.CGFloat, formLineWidth: CoreFoundation.CGFloat, formLineDashPhase: CoreFoundation.CGFloat, formLineDashLengths: [CoreFoundation.CGFloat]?, formColor: ODSFoundation.NSUIColor?)
  @objc open var label: Swift.String?
  @objc open var form: ODSFoundation.Legend.Form
  @objc open var formSize: CoreFoundation.CGFloat
  @objc open var formLineWidth: CoreFoundation.CGFloat
  @objc open var formLineDashPhase: CoreFoundation.CGFloat
  @objc open var formLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var formColor: ODSFoundation.NSUIColor?
  @objc deinit
}
public struct ODSMonthYearPickerResult {
  public var month: ODSFoundation.ODSMonth
  public var year: Swift.Int
  public init()
}
extension ODSFoundation.ODSMonthYearPickerResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum ODSMonth : Swift.Int {
  case january
  case february
  case march
  case april
  case may
  case june
  case july
  case august
  case september
  case october
  case november
  case december
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ODSFoundation.ODSMonth : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc open class RadarChartDataEntry : ODSFoundation.ChartDataEntry {
  @objc required dynamic public init()
  @objc public init(value: Swift.Double)
  @objc convenience public init(value: Swift.Double, data: Any?)
  @objc open var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public protocol ChartViewDelegate {
  @objc optional func chartValueSelected(_ chartView: ODSFoundation.ChartViewBase, entry: ODSFoundation.ChartDataEntry, highlight: ODSFoundation.Highlight)
  @objc optional func chartViewDidEndPanning(_ chartView: ODSFoundation.ChartViewBase)
  @objc optional func chartValueNothingSelected(_ chartView: ODSFoundation.ChartViewBase)
  @objc optional func chartScaled(_ chartView: ODSFoundation.ChartViewBase, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  @objc optional func chartTranslated(_ chartView: ODSFoundation.ChartViewBase, dX: CoreFoundation.CGFloat, dY: CoreFoundation.CGFloat)
  @objc optional func chartView(_ chartView: ODSFoundation.ChartViewBase, animatorDidStop animator: ODSFoundation.Animator)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ChartViewBase : ODSFoundation.NSUIView, ODSFoundation.ChartDataProvider, ODSFoundation.AnimatorDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var xAxis: ODSFoundation.XAxis {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragDecelerationEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var chartDescription: ODSFoundation.Description?
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: ODSFoundation.ChartViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) open var noDataText: Swift.String
  @objc @_Concurrency.MainActor(unsafe) open var noDataFont: UIKit.UIFont
  @objc @_Concurrency.MainActor(unsafe) open var noDataTextColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var noDataTextAlignment: UIKit.NSTextAlignment
  @objc @_Concurrency.MainActor(unsafe) open var renderer: ODSFoundation.DataRenderer?
  @objc @_Concurrency.MainActor(unsafe) open var highlighter: ODSFoundation.IHighlighter?
  @objc @_Concurrency.MainActor(unsafe) open var drawMarkers: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isDrawMarkersEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var marker: ODSFoundation.IMarker?
  @objc @_Concurrency.MainActor(unsafe) open var extraTopOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var extraRightOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var extraBottomOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var extraLeftOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func setExtraOffsets(left: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc open var data: ODSFoundation.ChartData? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func clear()
  @objc @_Concurrency.MainActor(unsafe) open func clearValues()
  @objc @_Concurrency.MainActor(unsafe) open func isEmpty() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func notifyDataSetChanged()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityChildren() -> [Any]?
  @objc @_Concurrency.MainActor(unsafe) open var highlighted: [ODSFoundation.Highlight] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var highlightPerTapEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isHighLightPerTapEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func valuesToHighlight() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func highlightValues(_ highs: [ODSFoundation.Highlight]?)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, y: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1, callDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, y: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1, callDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(_ highlight: ODSFoundation.Highlight?)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(_ highlight: ODSFoundation.Highlight?, callDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ODSFoundation.Highlight?
  @objc @_Concurrency.MainActor(unsafe) open var lastHighlighted: ODSFoundation.Highlight?
  @objc @_Concurrency.MainActor(unsafe) open func getMarkerPosition(highlight: ODSFoundation.Highlight) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var chartAnimator: ODSFoundation.Animator! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingX: ODSFoundation.ChartEasingFunctionBlock?, easingY: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOptionX: ODSFoundation.ChartEasingOption, easingOptionY: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(xAxisDuration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func animate(yAxisDuration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func animate(yAxisDuration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func animate(yAxisDuration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var chartYMin: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var chartXMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var chartXMin: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var xRange: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var midPoint: CoreFoundation.CGPoint {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var centerOffsets: CoreFoundation.CGPoint {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var legend: ODSFoundation.Legend {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var legendRenderer: ODSFoundation.LegendRenderer! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var contentRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var viewPortHandler: ODSFoundation.ViewPortHandler! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func getChartImage(transparent: Swift.Bool) -> ODSFoundation.NSUIImage?
  public enum ImageFormat {
    case jpeg
    case png
    public static func == (a: ODSFoundation.ChartViewBase.ImageFormat, b: ODSFoundation.ChartViewBase.ImageFormat) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open func save(to path: Swift.String, format: ODSFoundation.ChartViewBase.ImageFormat, compressionQuality: Swift.Double) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @_Concurrency.MainActor(unsafe) open func removeViewportJob(_ job: ODSFoundation.ViewPortJob)
  @objc @_Concurrency.MainActor(unsafe) open func clearAllViewportJobs()
  @objc @_Concurrency.MainActor(unsafe) open func addViewportJob(_ job: ODSFoundation.ViewPortJob)
  @objc @_Concurrency.MainActor(unsafe) open var isDragDecelerationEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragDecelerationFrictionCoef: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open var maxHighlightDistance: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open var maxVisibleCount: Swift.Int {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open func animatorUpdated(_ chartAnimator: ODSFoundation.Animator)
  @_Concurrency.MainActor(unsafe) @objc open func animatorStopped(_ chartAnimator: ODSFoundation.Animator)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesBegan(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesMoved(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesEnded(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesCancelled(_ touches: Swift.Set<ODSFoundation.NSUITouch>?, withEvent event: ODSFoundation.NSUIEvent?)
}
@objc(ChartAxisRendererBase) open class AxisRendererBase : ODSFoundation.Renderer {
  @objc open var axis: ODSFoundation.AxisBase?
  @objc open var transformer: ODSFoundation.Transformer?
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, transformer: ODSFoundation.Transformer?, axis: ODSFoundation.AxisBase?)
  @objc open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc open func renderGridLines(context: CoreGraphics.CGContext)
  @objc open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc open func computeAxisValues(min: Swift.Double, max: Swift.Double)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class IQTitleBarButtonItem : ODSFoundation.IQBarButtonItem {
  @objc @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var invocation: ODSFoundation.IQInvocation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PieRadarChartHighlighter) open class PieRadarHighlighter : ODSFoundation.ChartHighlighter {
  @objc override open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc open func closestHighlight(index: Swift.Int, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc override public init(chart: ODSFoundation.ChartDataProvider)
  @objc deinit
}
extension ODSFoundation.DataApproximator {
  @objc dynamic open class func reduceWithDouglasPeukerN(_ points: [CoreFoundation.CGPoint], resultCount: Swift.Int) -> [CoreFoundation.CGPoint]
}
@objc @_inheritsConvenienceInitializers open class XShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RSSelectionMenu<T> : UIKit.UIViewController, UIKit.UIPopoverPresentationControllerDelegate, UIKit.UIGestureRecognizerDelegate where T : Swift.Equatable {
  @_Concurrency.MainActor(unsafe) public var tableView: ODSFoundation.RSSelectionTableView<T>?
  @_Concurrency.MainActor(unsafe) public var searchBar: UIKit.UISearchBar? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var navigationBar: UIKit.UINavigationBar? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var dismissAutomatically: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var leftBarButtonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var rightBarButtonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var cellSelectionStyle: ODSFoundation.CellSelectionStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxSelectionLimit: Swift.UInt? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onWillAppear: (() -> ())?
  @_Concurrency.MainActor(unsafe) public var onDismiss: ((_ selectedItems: ODSFoundation.DataSource<T>) -> ())?
  @_Concurrency.MainActor(unsafe) public var onRightBarButtonTapped: ((_ selectedItems: ODSFoundation.DataSource<T>) -> ())?
  @_Concurrency.MainActor(unsafe) convenience public init(dataSource: ODSFoundation.DataSource<T>, tableViewStyle: UIKit.UITableView.Style = .plain, cellConfiguration configuration: @escaping ODSFoundation.UITableViewCellConfiguration<T>)
  @_Concurrency.MainActor(unsafe) convenience public init(selectionStyle: ODSFoundation.SelectionStyle, dataSource: ODSFoundation.DataSource<T>, tableViewStyle: UIKit.UITableView.Style = .plain, cellConfiguration configuration: @escaping ODSFoundation.UITableViewCellConfiguration<T>)
  @_Concurrency.MainActor(unsafe) convenience public init(selectionStyle: ODSFoundation.SelectionStyle, dataSource: ODSFoundation.DataSource<T>, tableViewStyle: UIKit.UITableView.Style = .plain, cellType: ODSFoundation.CellType, cellConfiguration configuration: @escaping ODSFoundation.UITableViewCellConfiguration<T>)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
  @_Concurrency.MainActor(unsafe) @objc public func popoverPresentationControllerShouldDismissPopover(_ popoverPresentationController: UIKit.UIPopoverPresentationController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ODSFoundation.RSSelectionMenu {
  @_Concurrency.MainActor(unsafe) public func setSelectedItems(items: ODSFoundation.DataSource<T>, maxSelected: Swift.UInt? = nil, onDidSelectRow delegate: @escaping ODSFoundation.UITableViewCellSelection<T>)
  @_Concurrency.MainActor(unsafe) public func addFirstRowAs(rowType: ODSFoundation.FirstRowType, showSelected: Swift.Bool, onDidSelectFirstRow completion: @escaping ODSFoundation.FirstRowSelection)
  @_Concurrency.MainActor(unsafe) public func showSearchBar(onTextDidSearch completion: @escaping ODSFoundation.UISearchBarResult<T>)
  @_Concurrency.MainActor(unsafe) public func showSearchBar(withPlaceHolder: Swift.String, barTintColor: UIKit.UIColor, onTextDidSearch completion: @escaping ODSFoundation.UISearchBarResult<T>)
  @_Concurrency.MainActor(unsafe) public func setNavigationBar(title: Swift.String, attributes: [Foundation.NSAttributedString.Key : Any]? = nil, barTintColor: UIKit.UIColor? = nil, tintColor: UIKit.UIColor? = nil)
  @_Concurrency.MainActor(unsafe) public func setRightBarButton(title: Swift.String, handler: @escaping (ODSFoundation.DataSource<T>) -> ())
  @_Concurrency.MainActor(unsafe) public func showEmptyDataLabel(text: Swift.String = defaultEmptyDataString, attributes: [Foundation.NSAttributedString.Key : Any]? = nil)
  @_Concurrency.MainActor(unsafe) public func show(from: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func show(style: ODSFoundation.PresentationStyle, from: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func dismiss(animated: Swift.Bool? = true)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class ODSLoaderVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func showSpin(duration: CoreFoundation.CFTimeInterval = 0.5, completionDelegate: Swift.AnyObject? = nil)
  @_Concurrency.MainActor(unsafe) public func stopSpin()
}
@objc @_inheritsConvenienceInitializers open class BarLineScatterCandleBubbleChartDataSet : ODSFoundation.ChartDataSet, ODSFoundation.IBarLineScatterCandleBubbleChartDataSet {
  @objc open var highlightColor: ODSFoundation.NSUIColor
  @objc open var highlightLineWidth: CoreFoundation.CGFloat
  @objc open var highlightLineDashPhase: CoreFoundation.CGFloat
  @objc open var highlightLineDashLengths: [CoreFoundation.CGFloat]?
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(label: Swift.String?)
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HorizontalBarChartHighlighter) open class HorizontalBarHighlighter : ODSFoundation.BarHighlighter {
  @objc override open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc override public init(chart: ODSFoundation.ChartDataProvider)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartComponentBase) open class ComponentBase : ObjectiveC.NSObject {
  @objc open var enabled: Swift.Bool
  @objc open var xOffset: CoreFoundation.CGFloat
  @objc open var yOffset: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc open var isEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class RadarChartRenderer : ODSFoundation.LineRadarRenderer {
  @objc weak open var chart: ODSFoundation.RadarChartView?
  @objc public init(chart: ODSFoundation.RadarChartView, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc open func drawWeb(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartIndexAxisValueFormatter) open class IndexAxisValueFormatter : ObjectiveC.NSObject, ODSFoundation.IAxisValueFormatter {
  @objc public var values: [Swift.String] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(values: [Swift.String])
  @objc public static func with(values: [Swift.String]) -> ODSFoundation.IndexAxisValueFormatter?
  @objc open func stringForValue(_ value: Swift.Double, axis: ODSFoundation.AxisBase?) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BarLineChartViewBase : ODSFoundation.ChartViewBase, ODSFoundation.BarLineScatterCandleBubbleChartDataProvider, ODSFoundation.NSUIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var gridBackgroundColor: ODSFoundation.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var borderLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var drawGridBackgroundEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var drawBordersEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var clipValuesToContentEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var clipDataToContentEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var minOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var keepPositionOnRotation: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var leftAxis: ODSFoundation.YAxis {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var rightAxis: ODSFoundation.YAxis {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var leftYAxisRenderer: ODSFoundation.YAxisRenderer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var rightYAxisRenderer: ODSFoundation.YAxisRenderer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var xAxisRenderer: ODSFoundation.XAxisRenderer {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override open func notifyDataSetChanged()
  @objc @_Concurrency.MainActor(unsafe) open func stopDeceleration()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: ODSFoundation.NSUIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: ODSFoundation.NSUIGestureRecognizer) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func zoomIn()
  @objc @_Concurrency.MainActor(unsafe) open func zoomOut()
  @objc @_Concurrency.MainActor(unsafe) open func resetZoom()
  @objc @_Concurrency.MainActor(unsafe) open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func zoomToCenter(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func zoomAndCenterViewAnimated(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func zoomAndCenterViewAnimated(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func zoomAndCenterViewAnimated(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func fitScreen()
  @objc @_Concurrency.MainActor(unsafe) open func setScaleMinima(_ scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open var visibleXRange: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleXRangeMaximum(_ maxXRange: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleXRangeMinimum(_ minXRange: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleXRange(minXRange: Swift.Double, maxXRange: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleYRangeMaximum(_ maxYRange: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleYRangeMinimum(_ minYRange: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func setVisibleYRange(minYRange: Swift.Double, maxYRange: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToX(_ xValue: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToY(_ yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewTo(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func moveViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewTo(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func centerViewToAnimated(xValue: Swift.Double, yValue: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency, duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) open func setViewPortOffsets(left: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func resetViewPortOffsets()
  @objc @_Concurrency.MainActor(unsafe) open func getAxisRange(axis: ODSFoundation.YAxis.AxisDependency) -> Swift.Double
  @objc @_Concurrency.MainActor(unsafe) open func getPosition(entry e: ODSFoundation.ChartDataEntry, axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var dragEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDragEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragXEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var dragYEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setScaleEnabled(_ enabled: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var scaleXEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var scaleYEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isScaleXEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isScaleYEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var doubleTapToZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDoubleTapToZoomEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var highlightPerDragEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isHighlightPerDragEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawGridBackgroundEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawBordersEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func valueForTouchPoint(point pt: CoreFoundation.CGPoint, axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func pixelForValues(x: Swift.Double, y: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func getEntryByTouchPoint(point pt: CoreFoundation.CGPoint) -> ODSFoundation.ChartDataEntry!
  @objc @_Concurrency.MainActor(unsafe) open func getDataSetByTouchPoint(point pt: CoreFoundation.CGPoint) -> ODSFoundation.IBarLineScatterCandleBubbleChartDataSet?
  @objc @_Concurrency.MainActor(unsafe) open var scaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isFullyZoomedOut: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func getAxis(_ axis: ODSFoundation.YAxis.AxisDependency) -> ODSFoundation.YAxis
  @objc @_Concurrency.MainActor(unsafe) open var pinchZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isPinchZoomEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setDragOffsetX(_ offset: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func setDragOffsetY(_ offset: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open var hasNoDragOffset: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMin: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isAnyAxisInverted: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var autoScaleMinMaxEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isAutoScaleMinMaxEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setYAxisMinWidth(_ axis: ODSFoundation.YAxis.AxisDependency, width: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func getYAxisMinWidth(_ axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func setYAxisMaxWidth(_ axis: ODSFoundation.YAxis.AxisDependency, width: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func getYAxisMaxWidth(_ axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func getYAxisWidth(_ axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func getTransformer(forAxis axis: ODSFoundation.YAxis.AxisDependency) -> ODSFoundation.Transformer
  @_Concurrency.MainActor(unsafe) @objc override open var maxVisibleCount: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open func isInverted(axis: ODSFoundation.YAxis.AxisDependency) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var lowestVisibleX: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var highestVisibleX: Swift.Double {
    @objc get
  }
}
@objc public enum ODSDatePickerStyle : Swift.Int {
  case Wheel, Inline, Compact
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ODSPickerType {
  case date, option
  public static func == (a: ODSFoundation.ODSPickerType, b: ODSFoundation.ODSPickerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class ODSPicker : ObjectiveC.NSObject {
  public static let sharedInstance: ODSFoundation.ODSPicker
  public var isPresented: Swift.Bool
  @objc public class func selectDate(title: Swift.String? = nil, cancelText: Swift.String? = nil, doneText: Swift.String = "Done", datePickerMode: UIKit.UIDatePicker.Mode = .date, selectedDate: Foundation.Date = Date(), minDate: Foundation.Date? = nil, maxDate: Foundation.Date? = nil, style: ODSFoundation.ODSDatePickerStyle = .Wheel, didSelectDate: ((_ date: Foundation.Date) -> ())?)
  public class func selectOption(title: Swift.String? = nil, cancelText: Swift.String? = nil, doneText: Swift.String = "Done", dataArray: Swift.Array<Swift.String>?, selectedIndex: Swift.Int? = nil, didSelectValue: ((_ value: Swift.String, _ atIndex: Swift.Int) -> ())?)
  public class func controller(title: Swift.String? = nil, cancelText: Swift.String? = nil, doneText: Swift.String = "Done", datePickerMode: UIKit.UIDatePicker.Mode = .date, selectedDate: Foundation.Date = Date(), minDate: Foundation.Date? = nil, maxDate: Foundation.Date? = nil, dataArray: Swift.Array<Swift.String> = [], selectedIndex: Swift.Int? = nil, type: ODSFoundation.ODSPickerType = .date, style: ODSFoundation.ODSDatePickerStyle = .Wheel) -> ODSFoundation.ODSPickerController?
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func pinConstraints(_ byView: UIKit.UIView, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) public func surroundConstraints(_ byView: UIKit.UIView, left: CoreFoundation.CGFloat = 0, right: CoreFoundation.CGFloat = 0, top: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ODSPickerController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
extension ODSFoundation.ODSPickerController : UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, viewForRow row: Swift.Int, forComponent component: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public static var pickerWindow: UIKit.UIWindow? {
    get
  }
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public static var currentController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public func topViewController1(controller: UIKit.UIViewController) -> UIKit.UIViewController?
}
extension Foundation.Date {
  public func dateString(_ format: Swift.String = "MMM-dd-YYYY, hh:mm a") -> Swift.String
  public func dateByAddingYears(_ dYears: Swift.Int) -> Foundation.Date
}
@objc @_inheritsConvenienceInitializers open class ChartBaseDataSet : ObjectiveC.NSObject, ODSFoundation.IChartDataSet, Foundation.NSCopying {
  @objc required override dynamic public init()
  @objc public init(label: Swift.String?)
  @objc open func notifyDataSetChanged()
  @objc open func calcMinMax()
  @objc open func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc open var yMin: Swift.Double {
    @objc get
  }
  @objc open var yMax: Swift.Double {
    @objc get
  }
  @objc open var xMin: Swift.Double {
    @objc get
  }
  @objc open var xMax: Swift.Double {
    @objc get
  }
  @objc open var entryCount: Swift.Int {
    @objc get
  }
  @objc open func entryForIndex(_ i: Swift.Int) -> ODSFoundation.ChartDataEntry?
  @objc open func entryForXValue(_ x: Swift.Double, closestToY y: Swift.Double, rounding: ODSFoundation.ChartDataSetRounding) -> ODSFoundation.ChartDataEntry?
  @objc open func entryForXValue(_ x: Swift.Double, closestToY y: Swift.Double) -> ODSFoundation.ChartDataEntry?
  @objc open func entriesForXValue(_ x: Swift.Double) -> [ODSFoundation.ChartDataEntry]
  @objc open func entryIndex(x xValue: Swift.Double, closestToY y: Swift.Double, rounding: ODSFoundation.ChartDataSetRounding) -> Swift.Int
  @objc open func entryIndex(entry e: ODSFoundation.ChartDataEntry) -> Swift.Int
  @objc open func addEntry(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc open func addEntryOrdered(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(_ entry: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(index: Swift.Int) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(x: Swift.Double) -> Swift.Bool
  @discardableResult
  @objc open func removeFirst() -> Swift.Bool
  @discardableResult
  @objc open func removeLast() -> Swift.Bool
  @objc open func contains(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc open func clear()
  @objc open var colors: [ODSFoundation.NSUIColor]
  @objc open var valueColors: [ODSFoundation.NSUIColor]
  @objc open var label: Swift.String?
  @objc open var axisDependency: ODSFoundation.YAxis.AxisDependency
  @objc open func color(atIndex index: Swift.Int) -> ODSFoundation.NSUIColor
  @objc open func resetColors()
  @objc open func addColor(_ color: ODSFoundation.NSUIColor)
  @objc open func setColor(_ color: ODSFoundation.NSUIColor)
  @objc open func setColor(_ color: ODSFoundation.NSUIColor, alpha: CoreFoundation.CGFloat)
  @objc open func setColors(_ colors: [ODSFoundation.NSUIColor], alpha: CoreFoundation.CGFloat)
  open func setColors(_ colors: ODSFoundation.NSUIColor...)
  @objc open var highlightEnabled: Swift.Bool
  @objc open var isHighlightEnabled: Swift.Bool {
    @objc get
  }
  @objc open var valueFormatter: ODSFoundation.IValueFormatter? {
    @objc get
    @objc set
  }
  @objc open var needsFormatter: Swift.Bool {
    @objc get
  }
  @objc open var valueTextColor: ODSFoundation.NSUIColor {
    @objc get
    @objc set
  }
  @objc open func valueTextColorAt(_ index: Swift.Int) -> ODSFoundation.NSUIColor
  @objc open var valueFont: UIKit.UIFont
  @objc open var form: ODSFoundation.Legend.Form
  @objc open var formSize: CoreFoundation.CGFloat
  @objc open var formLineWidth: CoreFoundation.CGFloat
  @objc open var formLineDashPhase: CoreFoundation.CGFloat
  @objc open var formLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var drawValuesEnabled: Swift.Bool
  @objc open var isDrawValuesEnabled: Swift.Bool {
    @objc get
  }
  @objc open var drawIconsEnabled: Swift.Bool
  @objc open var isDrawIconsEnabled: Swift.Bool {
    @objc get
  }
  @objc open var iconsOffset: CoreFoundation.CGPoint
  @objc open var visible: Swift.Bool
  @objc open var isVisible: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartDefaultFillFormatter) open class DefaultFillFormatter : ObjectiveC.NSObject, ODSFoundation.IFillFormatter {
  public typealias Block = (_ dataSet: ODSFoundation.ILineChartDataSet, _ dataProvider: ODSFoundation.LineChartDataProvider) -> CoreFoundation.CGFloat
  @objc open var block: ODSFoundation.DefaultFillFormatter.Block?
  @objc override dynamic public init()
  @objc public init(block: @escaping ODSFoundation.DefaultFillFormatter.Block)
  @objc public static func with(block: @escaping ODSFoundation.DefaultFillFormatter.Block) -> ODSFoundation.DefaultFillFormatter?
  @objc open func getFillLinePosition(dataSet: ODSFoundation.ILineChartDataSet, dataProvider: ODSFoundation.LineChartDataProvider) -> CoreFoundation.CGFloat
  @objc deinit
}
public protocol PageViewParent {
  var menuCollectionView: UIKit.UICollectionView! { get set }
  var pageViewController: ODSFoundation.PageViewController { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PageViewController : UIKit.UIPageViewController, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) public var initialIndex: Swift.Int?
  @_Concurrency.MainActor(unsafe) public var barAnimators: [UIKit.UIViewPropertyAnimator]
  @_Concurrency.MainActor(unsafe) public var tabActions: [() -> Swift.Void]
  @_Concurrency.MainActor(unsafe) public var initialAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var parentVC: ODSFoundation.PageViewParent? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var pages: [UIKit.UIViewController]
  @_Concurrency.MainActor(unsafe) public var scrollPageView: UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) public var initialized: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var needSearchTab: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var holderFrame: CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) public var itemCount: Swift.Int
  @_Concurrency.MainActor(unsafe) public var isPageFrom: Swift.String
  @_Concurrency.MainActor(unsafe) public var barAnimationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var tabBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var eachLineSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var items: [ODSFoundation.TabItem]
  @_Concurrency.MainActor(unsafe) public var defaultCellHeight: CoreFoundation.CGFloat?
  @_Concurrency.MainActor(unsafe) public var itemsFrame: [CoreFoundation.CGRect]
  @_Concurrency.MainActor(unsafe) public var itemsWidths: [CoreFoundation.CGFloat]
  @_Concurrency.MainActor(unsafe) public var sectionInset: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var selectedBarHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var selectedBarMargins: (upper: CoreFoundation.CGFloat, lower: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public var pageViewMargin: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var selectedBar: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public var borderView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public var pageView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public var needBorder: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var boderHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupAnimator()
  @_Concurrency.MainActor(unsafe) public func setTabItem(_ items: [ODSFoundation.TabItem])
  @_Concurrency.MainActor(unsafe) public func recalculateWidths() -> [CoreFoundation.CGFloat]
  @_Concurrency.MainActor(unsafe) public func labelWidth(text: Swift.String, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func setAnimators(needSearchTab: Swift.Bool, animators: [UIKit.UIViewPropertyAnimator], originalActions: [() -> Swift.Void], initialAction: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func setPages(_ vcs: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) public func moveTo(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ODSFoundation.PageViewController : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
extension ODSFoundation.PageViewController : UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class IQKeyboardManager : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var movedDistance: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public class var shared: ODSFoundation.IQKeyboardManager {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var toolbarManageBehaviour: ODSFoundation.IQAutoToolbarManageBehaviour
  @objc @_Concurrency.MainActor(unsafe) public var shouldToolbarUsesTextFieldTintColor: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var toolbarTintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) public var toolbarBarTintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) public var previousNextDisplayMode: ODSFoundation.IQPreviousNextDisplayMode
  @objc @_Concurrency.MainActor(unsafe) public var toolbarPreviousBarButtonItemImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public var toolbarNextBarButtonItemImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public var toolbarDoneBarButtonItemImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public var toolbarPreviousBarButtonItemText: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var toolbarNextBarButtonItemText: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var toolbarDoneBarButtonItemText: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var shouldShowToolbarPlaceholder: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var placeholderFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor(unsafe) public var placeholderColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) public var placeholderButtonColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) public var overrideKeyboardAppearance: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @objc @_Concurrency.MainActor(unsafe) public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) public func resignFirstResponder() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) public func goNext() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var shouldPlayInputClicks: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var layoutIfNeededOnUpdate: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor(unsafe) public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor(unsafe) public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor(unsafe) public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor(unsafe) public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc @_Concurrency.MainActor(unsafe) public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor(unsafe) public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor(unsafe) public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc @_Concurrency.MainActor(unsafe) public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func reloadLayoutIfNeeded()
  @objc @_Concurrency.MainActor(unsafe) public func reloadInputViews()
  @objc @_Concurrency.MainActor(unsafe) public var enableDebugging: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func registerAllNotifications()
  @objc @_Concurrency.MainActor(unsafe) public func unregisterAllNotifications()
}
@objc open class BarChartDataSet : ODSFoundation.BarLineScatterCandleBubbleChartDataSet, ODSFoundation.IBarChartDataSet {
  @objc required dynamic public init()
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  open func calcMinMax(entry e: ODSFoundation.ChartDataEntry)
  @objc open var stackSize: Swift.Int {
    @objc get
  }
  @objc open var isStacked: Swift.Bool {
    @objc get
  }
  @objc open var entryCountStacks: Swift.Int {
    @objc get
  }
  @objc open var stackLabels: [Swift.String]
  @objc open var barShadowColor: ODSFoundation.NSUIColor
  @objc open var barBorderWidth: CoreFoundation.CGFloat
  @objc open var barBorderColor: UIKit.UIColor
  @objc open var highlightAlpha: CoreFoundation.CGFloat
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RadarChartView : ODSFoundation.PieRadarChartViewBase {
  @objc @_Concurrency.MainActor(unsafe) open var webLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var innerWebLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var webColor: ODSFoundation.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var innerWebColor: ODSFoundation.NSUIColor
  @objc @_Concurrency.MainActor(unsafe) open var webAlpha: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var drawWeb: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func notifyDataSetChanged()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open var factor: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var sliceAngle: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func indexForAngle(_ angle: CoreFoundation.CGFloat) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var yAxis: ODSFoundation.YAxis {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var skipWebLineCount: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var radius: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMin: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var yRange: Swift.Double {
    @objc get
  }
  @objc deinit
}
extension ODSFoundation.DropDown {
  @_Concurrency.MainActor(unsafe) final public class func setupDefaultAppearance()
}
@objc open class AnimatedZoomViewJob : ODSFoundation.AnimatedViewPortJob {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, transformer: ODSFoundation.Transformer, view: ODSFoundation.ChartViewBase, yAxis: ODSFoundation.YAxis, xAxisRange: Swift.Double, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xOrigin: CoreFoundation.CGFloat, yOrigin: CoreFoundation.CGFloat, zoomCenterX: CoreFoundation.CGFloat, zoomCenterY: CoreFoundation.CGFloat, zoomOriginX: CoreFoundation.CGFloat, zoomOriginY: CoreFoundation.CGFloat, duration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc deinit
}
@objc public protocol ScatterChartDataProvider : ODSFoundation.BarLineScatterCandleBubbleChartDataProvider {
  @objc var scatterData: ODSFoundation.ScatterChartData? { get }
}
@objc public protocol IPieChartDataSet : ODSFoundation.IChartDataSet {
  @objc var sliceSpace: CoreFoundation.CGFloat { get set }
  @objc var automaticallyDisableSliceSpacing: Swift.Bool { get set }
  @objc var selectionShift: CoreFoundation.CGFloat { get set }
  @objc var xValuePosition: ODSFoundation.PieChartDataSet.ValuePosition { get set }
  @objc var yValuePosition: ODSFoundation.PieChartDataSet.ValuePosition { get set }
  @objc var valueLineColor: ODSFoundation.NSUIColor? { get set }
  @objc var useValueColorForLine: Swift.Bool { get set }
  @objc var valueLineWidth: CoreFoundation.CGFloat { get set }
  @objc var valueLinePart1OffsetPercentage: CoreFoundation.CGFloat { get set }
  @objc var valueLinePart1Length: CoreFoundation.CGFloat { get set }
  @objc var valueLinePart2Length: CoreFoundation.CGFloat { get set }
  @objc var valueLineVariableLength: Swift.Bool { get set }
  @objc var entryLabelFont: ODSFoundation.NSUIFont? { get set }
  @objc var entryLabelColor: ODSFoundation.NSUIColor? { get set }
  @objc var highlightColor: ODSFoundation.NSUIColor? { get set }
}
@objc public protocol CandleChartDataProvider : ODSFoundation.BarLineScatterCandleBubbleChartDataProvider {
  @objc var candleData: ODSFoundation.CandleChartData? { get }
}
@objc @_inheritsConvenienceInitializers open class StatusCategoryModel : ObjectiveC.NSObject, ODSFoundation.Initable {
  @objc public var Msgkey: Swift.String
  @objc public var RecordNo: Swift.String
  @objc public var ObjectType: Swift.String
  @objc public var Sequence: Swift.Int
  @objc public var StatusCode: Swift.String
  @objc public var StatusVisible: Swift.String
  @objc public var StatusDescKey: Swift.String
  @objc public var VoiceCommandResKey: Swift.String
  @objc public var CnfPopup: Swift.String
  @objc public var ImageResKey: Swift.String
  @objc public var InProcess: Swift.Bool
  @objc public var StatuscCategory: Swift.String
  @objc public var Active: Swift.String
  @objc public var CaptureTime: Swift.String
  @objc public var PostTime: Swift.String
  @objc public var Ref_Cal_Status: Swift.String
  @objc public var ActivityType: Swift.String
  @objc public var ActivityTypeDesc: Swift.String
  @objc public var DispTimeSheetString: Swift.String
  @objc public var PreCheck: Swift.Int16
  @objc public var PostConfirmations: Swift.String
  @objc public var StatusType: Swift.String
  @objc public var AllowWoCreate: Swift.Bool
  @objc public var EnteredBy: Swift.String
  @objc public var RoleId: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getStatusCategoryList(modelClass: ODSFoundation.StatusCategoryModel.Type? = StatusCategoryModel.self, filterQuery: Swift.String? = "", formate: Swift.Bool = false, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
public let contentViewController: Swift.String
public let defaultPlaceHolder: Swift.String
public let cancelButtonTitle: Swift.String
public let doneButtonTitle: Swift.String
public let defaultEmptyDataString: Swift.String
public let defaultSearchBarTintColor: UIKit.UIColor
public let defaultHeaderHeight: CoreFoundation.CGFloat
public typealias UITableViewCellConfiguration<T> = ((_ cell: UIKit.UITableViewCell, _ item: T, _ indexPath: Foundation.IndexPath) -> ()) where T : Swift.Equatable
public typealias DataSource<T> = [T] where T : Swift.Equatable
public typealias FilteredDataSource<T> = [T] where T : Swift.Equatable
public typealias UITableViewCellSelection<T> = ((_ item: T?, _ index: Swift.Int, _ selected: Swift.Bool, _ selectedItems: ODSFoundation.DataSource<T>) -> ()) where T : Swift.Equatable
public typealias UISearchBarResult<T> = ((_ searchText: Swift.String) -> (ODSFoundation.FilteredDataSource<T>)) where T : Swift.Equatable
public typealias FirstRowSelection = ((_ value: Swift.String, _ selected: Swift.Bool) -> ())
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func add(childViewController: UIKit.UIViewController)
}
@objc @_inheritsConvenienceInitializers open class ODSHelperClass : ObjectiveC.NSObject {
  public static func getListInFormte<T>(dictionary: Foundation.NSMutableDictionary, entityModelClassType: T.Type) -> Swift.Dictionary<Swift.String, Any> where T : ObjectiveC.NSObject
  public static func getApplicationConfigurationsInformate(dictionary: Foundation.NSMutableDictionary, from: Swift.String) -> Foundation.NSMutableDictionary
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ChartUtils {
  open class func drawImage(context: CoreGraphics.CGContext, image: ODSFoundation.NSUIImage, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, size: CoreFoundation.CGSize)
  open class func drawText(context: CoreGraphics.CGContext, text: Swift.String, point: CoreFoundation.CGPoint, align: UIKit.NSTextAlignment, attributes: [Foundation.NSAttributedString.Key : Any]?)
  open class func drawText(context: CoreGraphics.CGContext, text: Swift.String, point: CoreFoundation.CGPoint, attributes: [Foundation.NSAttributedString.Key : Any]?, anchor: CoreFoundation.CGPoint, angleRadians: CoreFoundation.CGFloat)
  open class func defaultValueFormatter() -> ODSFoundation.IValueFormatter
  @objc deinit
}
public protocol ODSMonthYearPickerViewControllerDelegate : AnyObject {
  func ODSMonthYearPickerDidSet(_ viewController: ODSFoundation.ODSMonthYearPickerViewController, result: ODSFoundation.ODSMonthYearPickerResult)
  func ODSMonthYearPickerDidCancel(_ viewController: ODSFoundation.ODSMonthYearPickerViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ODSMonthYearPickerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: ODSFoundation.ODSMonthYearPickerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var theme: ODSFoundation.ODSTheme
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
}
public protocol Localizable {
  var localized: Swift.String { get }
}
extension Swift.String : ODSFoundation.Localizable {
  public var localized: Swift.String {
    get
  }
}
public protocol XIBLocalizable {
  var xibLocKey: Swift.String? { get set }
}
extension UIKit.UILabel : ODSFoundation.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UIButton : ODSFoundation.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UINavigationItem : ODSFoundation.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UIBarItem : ODSFoundation.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
public protocol XIBMultiLocalizable {
  var xibLocKeys: Swift.String? { get set }
}
extension UIKit.UISegmentedControl : ODSFoundation.XIBMultiLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKeys: Swift.String? {
    @objc get
    @objc set(keys)
  }
}
public protocol UITextFieldXIBLocalizable {
  var xibPlaceholderLocKey: Swift.String? { get set }
}
extension UIKit.UITextField : ODSFoundation.UITextFieldXIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibPlaceholderLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
public protocol UISearchBarXIBLocalizable {
  var xibPlaceholderLocKey: Swift.String? { get set }
}
extension UIKit.UISearchBar : ODSFoundation.UISearchBarXIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibPlaceholderLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
@objc extension UIKit.UIViewController {
  @available(*, deprecated, message: "Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.")
  @IBOutlet @objc @_Concurrency.MainActor(unsafe) dynamic public var IQLayoutGuideConstraint: UIKit.NSLayoutConstraint? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentIQContainerViewController() -> UIKit.UIViewController?
}
@objc public protocol StoreDelegate {
  @objc optional func appDetailsStoreDownloaded(error: Foundation.NSError?)
  @objc optional func storesDownloaded(error: Foundation.NSError?)
  @objc optional func offlineStoreOpenFailed(storeName: Swift.String, error: Swift.Error!)
  @objc optional func offlineStoreOpenFinished(storeName: Swift.String)
  @objc optional func offlineStoreStatus(storeStatus: Swift.String)
}
public protocol PushDeleteDelegate {
  func pushSubscriptionDeleted()
}
public protocol StoreFlushRefreshDelegate {
  func offlineStoreFlushStarted(storeName: Swift.String, syncType: Swift.String)
  func offlineStoreFlushSucceeded(storeName: Swift.String, syncType: Swift.String)
  func offlineStoreFlushFailed(storeName: Swift.String, syncType: Swift.String, error: Swift.Error!)
  func offlineStoreflushStatus(storeName: Swift.String, message: Swift.String)
  func offlineStoreFlushCompleted(syncType: Swift.String)
  func offlineStoreRefreshStarted(storeName: Swift.String, syncType: Swift.String)
  func offlineStoreRefreshSucceeded(storeName: Swift.String, syncType: Swift.String)
  func offlineStoreRefreshFailed(storeName: Swift.String, error: Swift.Error!)
  func offlineStoreRefreshStatus(storeName: Swift.String, message: Swift.String)
  func offlineStoreRefreshCompleted(syncType: Swift.String)
}
public protocol UserCredentialDelegate {
  func ProvideUsernamePassword() -> Foundation.URLCredential
}
public protocol Initable {
  init()
}
public let kIQUseDefaultKeyboardDistance: CoreFoundation.CGFloat
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: ODSFoundation.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
}
@objc @_inheritsConvenienceInitializers open class LineChartData : ODSFoundation.ChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RSSelectionTableView<T> : UIKit.UITableView where T : Swift.Equatable {
  @_Concurrency.MainActor(unsafe) convenience public init(selectionStyle: ODSFoundation.SelectionStyle, tableViewStyle: UIKit.UITableView.Style, cellType: ODSFoundation.CellType, dataSource: ODSFoundation.RSSelectionMenuDataSource<T>, delegate: ODSFoundation.RSSelectionMenuDelegate<T>, from: ODSFoundation.RSSelectionMenu<T>)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol ILineRadarChartDataSet : ODSFoundation.ILineScatterCandleRadarChartDataSet {
  @objc var fillColor: ODSFoundation.NSUIColor { get set }
  @objc var fill: ODSFoundation.Fill? { get set }
  @objc var fillAlpha: CoreFoundation.CGFloat { get set }
  @objc var lineWidth: CoreFoundation.CGFloat { get set }
  @objc var drawFilledEnabled: Swift.Bool { get set }
  @objc var isDrawFilledEnabled: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PieChartView : ODSFoundation.PieRadarChartViewBase {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override open func getMarkerPosition(highlight: ODSFoundation.Highlight) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func needsHighlight(index: Swift.Int) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open var xAxis: ODSFoundation.XAxis {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func indexForAngle(_ angle: CoreFoundation.CGFloat) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open func dataSetIndexForIndex(_ xValue: Swift.Double) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var drawAngles: [CoreFoundation.CGFloat] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var absoluteAngles: [CoreFoundation.CGFloat] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var holeColor: ODSFoundation.NSUIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawSlicesUnderHoleEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawSlicesUnderHoleEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawHoleEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawHoleEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerAttributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerTextOffset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawCenterTextEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawCenterTextEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var radius: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var circleBox: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerCircleBox: CoreFoundation.CGPoint {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var holeRadiusPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var transparentCircleColor: ODSFoundation.NSUIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var transparentCircleRadiusPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var entryLabelColor: ODSFoundation.NSUIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var entryLabelFont: ODSFoundation.NSUIFont? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawEntryLabelsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDrawEntryLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var usePercentValuesEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isUsePercentValuesEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var centerTextRadiusPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var maxAngle: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(CombinedChartHighlighter) open class CombinedHighlighter : ODSFoundation.ChartHighlighter {
  @objc public init(chart: ODSFoundation.CombinedChartDataProvider, barDataProvider: ODSFoundation.BarChartDataProvider)
  @objc override open func getHighlights(xValue: Swift.Double, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> [ODSFoundation.Highlight]
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var allSubviews: [UIKit.UIView] {
    get
  }
  @_Concurrency.MainActor(unsafe) public func toImage() -> UIKit.UIImage
}
@objc(ChartLegendRenderer) open class LegendRenderer : ODSFoundation.Renderer {
  @objc open var legend: ODSFoundation.Legend?
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, legend: ODSFoundation.Legend?)
  @objc open func computeLegend(data: ODSFoundation.ChartData)
  @objc open func renderLegend(context: CoreGraphics.CGContext)
  @objc open func drawForm(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, entry: ODSFoundation.LegendEntry, legend: ODSFoundation.Legend)
  @objc open func drawLabel(context: CoreGraphics.CGContext, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, label: Swift.String, font: ODSFoundation.NSUIFont, textColor: ODSFoundation.NSUIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BubbleChartDataSet : ODSFoundation.BarLineScatterCandleBubbleChartDataSet, ODSFoundation.IBubbleChartDataSet {
  @objc open var maxSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var normalizeSizeEnabled: Swift.Bool
  @objc open var isNormalizeSizeEnabled: Swift.Bool {
    @objc get
  }
  open func calcMinMax(entry e: ODSFoundation.ChartDataEntry)
  @objc open var highlightCircleWidth: CoreFoundation.CGFloat
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(label: Swift.String?)
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SquareShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol LineChartDataProvider : ODSFoundation.BarLineScatterCandleBubbleChartDataProvider {
  @objc var lineData: ODSFoundation.LineChartData? { get }
  @objc func getAxis(_ axis: ODSFoundation.YAxis.AxisDependency) -> ODSFoundation.YAxis
}
@objc @_inheritsConvenienceInitializers open class HorizontalBarChartRenderer : ODSFoundation.BarChartRenderer {
  @objc override public init(dataProvider: ODSFoundation.BarChartDataProvider, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func initBuffers()
  @objc override open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IBarChartDataSet, index: Swift.Int)
  override open func prepareBarHighlight(x: Swift.Double, y1: Swift.Double, y2: Swift.Double, barWidthHalf: Swift.Double, trans: ODSFoundation.Transformer, rect: inout CoreFoundation.CGRect)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func isDrawingValuesAllowed(dataProvider: ODSFoundation.ChartDataProvider?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartAxisBase) open class AxisBase : ODSFoundation.ComponentBase {
  @objc override dynamic public init()
  @objc open var labelFont: UIKit.UIFont
  @objc open var labelTextColor: UIKit.UIColor
  @objc open var axisLineColor: UIKit.UIColor
  @objc open var axisLineWidth: CoreFoundation.CGFloat
  @objc open var axisLineDashPhase: CoreFoundation.CGFloat
  @objc open var axisLineDashLengths: [CoreFoundation.CGFloat]!
  @objc open var gridColor: UIKit.UIColor
  @objc open var gridLineWidth: CoreFoundation.CGFloat
  @objc open var gridLineDashPhase: CoreFoundation.CGFloat
  @objc open var gridLineDashLengths: [CoreFoundation.CGFloat]!
  @objc open var gridLineCap: CoreGraphics.CGLineCap
  @objc open var drawGridLinesEnabled: Swift.Bool
  @objc open var drawAxisLineEnabled: Swift.Bool
  @objc open var drawLabelsEnabled: Swift.Bool
  @objc open var centerAxisLabelsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var isCenterAxisLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc open var drawLimitLinesBehindDataEnabled: Swift.Bool
  @objc open var gridAntialiasEnabled: Swift.Bool
  @objc open var entries: [Swift.Double]
  @objc open var centeredEntries: [Swift.Double]
  @objc open var entryCount: Swift.Int {
    @objc get
  }
  @objc open var decimals: Swift.Int
  @objc open var granularityEnabled: Swift.Bool
  @objc open var granularity: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var isGranularityEnabled: Swift.Bool {
    @objc get
  }
  @objc open var forceLabelsEnabled: Swift.Bool
  @objc open func getLongestLabel() -> Swift.String
  @objc open func getFormattedLabel(_ index: Swift.Int) -> Swift.String
  @objc open var valueFormatter: ODSFoundation.IAxisValueFormatter? {
    @objc get
    @objc set
  }
  @objc open var isDrawGridLinesEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawAxisLineEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawLimitLinesBehindDataEnabled: Swift.Bool {
    @objc get
  }
  @objc open var spaceMin: Swift.Double
  @objc open var spaceMax: Swift.Double
  @objc open var axisRange: Swift.Double
  @objc open var axisMinLabels: Swift.Int {
    @objc get
    @objc set
  }
  @objc open var axisMaxLabels: Swift.Int {
    @objc get
    @objc set
  }
  @objc open var labelCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc open func setLabelCount(_ count: Swift.Int, force: Swift.Bool)
  @objc open var isForceLabelsEnabled: Swift.Bool {
    @objc get
  }
  @objc open func addLimitLine(_ line: ODSFoundation.ChartLimitLine)
  @objc open func removeLimitLine(_ line: ODSFoundation.ChartLimitLine)
  @objc open func removeAllLimitLines()
  @objc open var limitLines: [ODSFoundation.ChartLimitLine] {
    @objc get
  }
  @objc open func resetCustomAxisMin()
  @objc open var isAxisMinCustom: Swift.Bool {
    @objc get
  }
  @objc open func resetCustomAxisMax()
  @objc open var isAxisMaxCustom: Swift.Bool {
    @objc get
  }
  @objc open var axisMinimum: Swift.Double {
    @objc get
    @objc set
  }
  @objc open var axisMaximum: Swift.Double {
    @objc get
    @objc set
  }
  @objc open func calculate(min dataMin: Swift.Double, max dataMax: Swift.Double)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartDefaultAxisValueFormatter) open class DefaultAxisValueFormatter : ObjectiveC.NSObject, ODSFoundation.IAxisValueFormatter {
  public typealias Block = (_ value: Swift.Double, _ axis: ODSFoundation.AxisBase?) -> Swift.String
  @objc open var block: ODSFoundation.DefaultAxisValueFormatter.Block?
  @objc open var hasAutoDecimals: Swift.Bool
  @objc open var formatter: Foundation.NumberFormatter? {
    @objc get
    @objc set
  }
  open var decimals: Swift.Int? {
    get
    set
  }
  @objc override dynamic public init()
  @objc public init(formatter: Foundation.NumberFormatter)
  @objc public init(decimals: Swift.Int)
  @objc public init(block: @escaping ODSFoundation.DefaultAxisValueFormatter.Block)
  @objc public static func with(block: @escaping ODSFoundation.DefaultAxisValueFormatter.Block) -> ODSFoundation.DefaultAxisValueFormatter?
  @objc open func stringForValue(_ value: Swift.Double, axis: ODSFoundation.AxisBase?) -> Swift.String
  @objc deinit
}
@objc(ChartDataRendererBase) open class DataRenderer : ODSFoundation.Renderer {
  @objc final public let animator: ODSFoundation.Animator
  @objc public init(animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawValues(context: CoreGraphics.CGContext)
  @objc open func drawExtras(context: CoreGraphics.CGContext)
  @objc open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc open func initBuffers()
  @objc open func isDrawingValuesAllowed(dataProvider: ODSFoundation.ChartDataProvider?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ODSLoginHelper : ObjectiveC.NSObject, ODSFoundation.UsernamePasswordProviderProtocol, ODSFoundation.SAML2ConfigProviderProtocol {
  public class var uniqueInstance: ODSFoundation.ODSLoginHelper {
    get
  }
  @objc public func provideUsernamePassword(forAuthChallenge authChallenge: Foundation.URLAuthenticationChallenge!, completionBlock: ODSFoundation.username_password_provider_completion_t!)
  @objc public func provideSAML2Configuration(for url: Foundation.URL!, completionBlock: ODSFoundation.saml2_config_provider_completion_t!)
  public static func registerUser(with manager: ODSFoundation.HttpConversationManager?, toServer rawServerUrl: Swift.String?, andAppId appId: Swift.String?, completion completionBlock: @escaping (_ connectiondata: Foundation.Data?, _ urlresponse: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)
  public func registerNewUser(toServer rawServerUrl: Swift.String?, andAppId appId: Swift.String?, completion completionBlock: @escaping (_ connectiondata: Foundation.Data?, _ urlresponse: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)
  public static func deleteUserRegistration(_ applicationConnectionId: Swift.String?, with manager: ODSFoundation.HttpConversationManager?, fromServer rawServerUrl: Swift.String?, withAppId appId: Swift.String?, completion completionBlock: @escaping (_ connectiondata: Foundation.Data?, _ urlresponse: Foundation.URLResponse?, _ error: Foundation.NSError?, _ success: Swift.Bool) -> Swift.Void)
  @objc deinit
}
public struct NavigationBarTheme {
}
@objc public protocol IChartDataSet {
  @objc func notifyDataSetChanged()
  @objc func calcMinMax()
  @objc func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc var yMin: Swift.Double { get }
  @objc var yMax: Swift.Double { get }
  @objc var xMin: Swift.Double { get }
  @objc var xMax: Swift.Double { get }
  @objc var entryCount: Swift.Int { get }
  @objc func entryForIndex(_ i: Swift.Int) -> ODSFoundation.ChartDataEntry?
  @objc func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ODSFoundation.ChartDataSetRounding) -> ODSFoundation.ChartDataEntry?
  @objc func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double) -> ODSFoundation.ChartDataEntry?
  @objc func entriesForXValue(_ xValue: Swift.Double) -> [ODSFoundation.ChartDataEntry]
  @objc func entryIndex(x xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ODSFoundation.ChartDataSetRounding) -> Swift.Int
  @objc func entryIndex(entry e: ODSFoundation.ChartDataEntry) -> Swift.Int
  @objc func addEntry(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc func addEntryOrdered(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc func removeEntry(_ entry: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc func removeEntry(index: Swift.Int) -> Swift.Bool
  @objc func removeEntry(x: Swift.Double) -> Swift.Bool
  @objc func removeFirst() -> Swift.Bool
  @objc func removeLast() -> Swift.Bool
  @objc func contains(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc func clear()
  @objc var label: Swift.String? { get }
  @objc var axisDependency: ODSFoundation.YAxis.AxisDependency { get }
  @objc var valueColors: [ODSFoundation.NSUIColor] { get }
  @objc var colors: [ODSFoundation.NSUIColor] { get }
  @objc func color(atIndex: Swift.Int) -> ODSFoundation.NSUIColor
  @objc func resetColors()
  @objc func addColor(_ color: ODSFoundation.NSUIColor)
  @objc func setColor(_ color: ODSFoundation.NSUIColor)
  @objc var highlightEnabled: Swift.Bool { get set }
  @objc var isHighlightEnabled: Swift.Bool { get }
  @objc var valueFormatter: ODSFoundation.IValueFormatter? { get set }
  @objc var needsFormatter: Swift.Bool { get }
  @objc var valueTextColor: ODSFoundation.NSUIColor { get set }
  @objc func valueTextColorAt(_ index: Swift.Int) -> ODSFoundation.NSUIColor
  @objc var valueFont: ODSFoundation.NSUIFont { get set }
  @objc var form: ODSFoundation.Legend.Form { get }
  @objc var formSize: CoreFoundation.CGFloat { get }
  @objc var formLineWidth: CoreFoundation.CGFloat { get }
  @objc var formLineDashPhase: CoreFoundation.CGFloat { get }
  @objc var formLineDashLengths: [CoreFoundation.CGFloat]? { get }
  @objc var drawValuesEnabled: Swift.Bool { get set }
  @objc var isDrawValuesEnabled: Swift.Bool { get }
  @objc var drawIconsEnabled: Swift.Bool { get set }
  @objc var isDrawIconsEnabled: Swift.Bool { get }
  @objc var iconsOffset: CoreFoundation.CGPoint { get set }
  @objc var visible: Swift.Bool { get set }
  @objc var isVisible: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CombinedChartView : ODSFoundation.BarLineChartViewBase, ODSFoundation.CombinedChartDataProvider {
  @objc(CombinedChartDrawOrder) public enum DrawOrder : Swift.Int {
    case bar
    case bubble
    case line
    case candle
    case scatter
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open func initialize()
  @_Concurrency.MainActor(unsafe) @objc override open var data: ODSFoundation.ChartData? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var fillFormatter: ODSFoundation.IFillFormatter {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ODSFoundation.Highlight?
  @_Concurrency.MainActor(unsafe) @objc open var combinedData: ODSFoundation.CombinedChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var lineData: ODSFoundation.LineChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var barData: ODSFoundation.BarChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var scatterData: ODSFoundation.ScatterChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var candleData: ODSFoundation.CandleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var bubbleData: ODSFoundation.BubbleChartData? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawValueAboveBarEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawBarShadowEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawValueAboveBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawBarShadowEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawOrder: [Swift.Int] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var highlightFullBarEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var isHighlightFullBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class RSSelectionMenuDataSource<T> : ObjectiveC.NSObject, UIKit.UITableViewDataSource where T : Swift.Equatable {
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartYAxis) open class YAxis : ODSFoundation.AxisBase {
  @objc(YAxisLabelPosition) public enum LabelPosition : Swift.Int {
    case outsideChart
    case insideChart
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AxisDependency : Swift.Int {
    case left
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var drawBottomYLabelEntryEnabled: Swift.Bool
  @objc open var drawTopYLabelEntryEnabled: Swift.Bool
  @objc open var inverted: Swift.Bool
  @objc open var drawZeroLineEnabled: Swift.Bool
  @objc open var zeroLineColor: ODSFoundation.NSUIColor?
  @objc open var zeroLineWidth: CoreFoundation.CGFloat
  @objc open var zeroLineDashPhase: CoreFoundation.CGFloat
  @objc open var zeroLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var spaceTop: CoreFoundation.CGFloat
  @objc open var spaceBottom: CoreFoundation.CGFloat
  @objc open var labelPosition: ODSFoundation.YAxis.LabelPosition
  @objc open var labelAlignment: UIKit.NSTextAlignment
  @objc open var labelXOffset: CoreFoundation.CGFloat
  @objc open var minWidth: CoreFoundation.CGFloat
  @objc open var maxWidth: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc public init(position: ODSFoundation.YAxis.AxisDependency)
  @objc open var axisDependency: ODSFoundation.YAxis.AxisDependency {
    @objc get
  }
  @objc open func requiredSize() -> CoreFoundation.CGSize
  @objc open func getRequiredHeightSpace() -> CoreFoundation.CGFloat
  @objc open var needsOffset: Swift.Bool {
    @objc get
  }
  @objc open var isInverted: Swift.Bool {
    @objc get
  }
  @objc override open func calculate(min dataMin: Swift.Double, max dataMax: Swift.Double)
  @objc open var isDrawBottomYLabelEntryEnabled: Swift.Bool {
    @objc get
  }
  @objc open var isDrawTopYLabelEntryEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartMarkerView) @_Concurrency.MainActor(unsafe) open class MarkerView : ODSFoundation.NSUIView, ODSFoundation.IMarker {
  @_Concurrency.MainActor(unsafe) @objc open var offset: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) weak open var chartView: ODSFoundation.ChartViewBase?
  @_Concurrency.MainActor(unsafe) @objc open func offsetForDrawing(atPoint point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc open func refreshContent(entry: ODSFoundation.ChartDataEntry, highlight: ODSFoundation.Highlight)
  @_Concurrency.MainActor(unsafe) @objc open func draw(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint)
  @objc @_Concurrency.MainActor(unsafe) open class func viewFromXib(in bundle: Foundation.Bundle = .main) -> ODSFoundation.MarkerView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(IChartValueFormatter) public protocol IValueFormatter {
  @objc func stringForValue(_ value: Swift.Double, entry: ODSFoundation.ChartDataEntry, dataSetIndex: Swift.Int, viewPortHandler: ODSFoundation.ViewPortHandler?) -> Swift.String
}
@objc public protocol ILineScatterCandleRadarChartDataSet : ODSFoundation.IBarLineScatterCandleBubbleChartDataSet {
  @objc var drawHorizontalHighlightIndicatorEnabled: Swift.Bool { get set }
  @objc var drawVerticalHighlightIndicatorEnabled: Swift.Bool { get set }
  @objc var isHorizontalHighlightIndicatorEnabled: Swift.Bool { get }
  @objc var isVerticalHighlightIndicatorEnabled: Swift.Bool { get }
  @objc func setDrawHighlightIndicators(_ enabled: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class LineRadarChartDataSet : ODSFoundation.LineScatterCandleRadarChartDataSet, ODSFoundation.ILineRadarChartDataSet {
  @objc open var fillColor: ODSFoundation.NSUIColor {
    @objc get
    @objc set
  }
  @objc open var fill: ODSFoundation.Fill?
  @objc open var fillAlpha: CoreFoundation.CGFloat
  @objc open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var drawFilledEnabled: Swift.Bool
  @objc open var isDrawFilledEnabled: Swift.Bool {
    @objc get
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(label: Swift.String?)
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ServiceConfigModel : ObjectiveC.NSObject, ODSFoundation.Initable {
  @objc public var ReqID: Swift.String
  @objc public var EntitySet: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var AppStoreName: Swift.String
  @objc public var Keys: Swift.String
  @objc public var EntityType: Swift.String
  @objc public var ClassName: Swift.String
  @objc public var Object: Swift.String
  @objc public var Active: Swift.String
  @objc public var AppStoreId: Swift.String
  @objc public var ServiceURL: Swift.String
  @objc public var AppStoreCode: Swift.String
  @objc public var DisplayName: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getServcieConfigList(modelClass: ODSFoundation.ServiceConfigModel.Type? = ServiceConfigModel.self, filterQuery: Swift.String? = "", formate: Swift.Bool = false, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  public static func getOnlineServcieConfigList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "") -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class RSSelectionMenuSearchDelegate : ObjectiveC.NSObject {
  public var searchBar: UIKit.UISearchBar?
  public var didSearch: ((Swift.String) -> ())?
  @objc deinit
}
extension ODSFoundation.RSSelectionMenuSearchDelegate : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class ChartData : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc convenience public init(dataSet: ODSFoundation.IChartDataSet?)
  @objc open func notifyDataChanged()
  @objc open func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc open func calcMinMax()
  @objc open func calcMinMax(entry e: ODSFoundation.ChartDataEntry, axis: ODSFoundation.YAxis.AxisDependency)
  @objc open func calcMinMax(dataSet d: ODSFoundation.IChartDataSet)
  @objc open var dataSetCount: Swift.Int {
    @objc get
  }
  @objc open var yMin: Swift.Double {
    @objc get
  }
  @nonobjc open func getYMin() -> Swift.Double
  @objc open func getYMin(axis: ODSFoundation.YAxis.AxisDependency) -> Swift.Double
  @objc open var yMax: Swift.Double {
    @objc get
  }
  @nonobjc open func getYMax() -> Swift.Double
  @objc open func getYMax(axis: ODSFoundation.YAxis.AxisDependency) -> Swift.Double
  @objc open var xMin: Swift.Double {
    @objc get
  }
  @objc open var xMax: Swift.Double {
    @objc get
  }
  @objc open var dataSets: [ODSFoundation.IChartDataSet] {
    @objc get
    @objc set
  }
  @objc open func entryForHighlight(_ highlight: ODSFoundation.Highlight) -> ODSFoundation.ChartDataEntry?
  @objc open func getDataSetByLabel(_ label: Swift.String, ignorecase: Swift.Bool) -> ODSFoundation.IChartDataSet?
  @objc open func getDataSetByIndex(_ index: Swift.Int) -> ODSFoundation.IChartDataSet!
  @objc open func addDataSet(_ dataSet: ODSFoundation.IChartDataSet!)
  @discardableResult
  @objc open func removeDataSet(_ dataSet: ODSFoundation.IChartDataSet) -> Swift.Bool
  @discardableResult
  @objc open func removeDataSetByIndex(_ index: Swift.Int) -> Swift.Bool
  @objc open func addEntry(_ e: ODSFoundation.ChartDataEntry, dataSetIndex: Swift.Int)
  @discardableResult
  @objc open func removeEntry(_ entry: ODSFoundation.ChartDataEntry, dataSetIndex: Swift.Int) -> Swift.Bool
  @discardableResult
  @objc open func removeEntry(xValue: Swift.Double, dataSetIndex: Swift.Int) -> Swift.Bool
  @objc open func getDataSetForEntry(_ e: ODSFoundation.ChartDataEntry) -> ODSFoundation.IChartDataSet?
  @objc open func indexOfDataSet(_ dataSet: ODSFoundation.IChartDataSet) -> Swift.Int
  @objc open func getFirstLeft(dataSets: [ODSFoundation.IChartDataSet]) -> ODSFoundation.IChartDataSet?
  @objc open func getFirstRight(dataSets: [ODSFoundation.IChartDataSet]) -> ODSFoundation.IChartDataSet?
  @objc open func getColors() -> [ODSFoundation.NSUIColor]?
  @objc open func setValueFormatter(_ formatter: ODSFoundation.IValueFormatter)
  @objc open func setValueTextColor(_ color: ODSFoundation.NSUIColor)
  @objc open func setValueFont(_ font: ODSFoundation.NSUIFont)
  @objc open func setDrawValues(_ enabled: Swift.Bool)
  @objc open var highlightEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var isHighlightEnabled: Swift.Bool {
    @objc get
  }
  @objc open func clearValues()
  @objc open func contains(dataSet: ODSFoundation.IChartDataSet) -> Swift.Bool
  @objc open var entryCount: Swift.Int {
    @objc get
  }
  @objc open var maxEntryCountSet: ODSFoundation.IChartDataSet? {
    @objc get
  }
  @objc open var accessibilityEntryLabelPrefix: Swift.String?
  @objc open var accessibilityEntryLabelSuffix: Swift.String?
  @objc open var accessibilityEntryLabelSuffixIsCount: Swift.Bool
  @objc deinit
}
@objc public protocol BubbleChartDataProvider : ODSFoundation.BarLineScatterCandleBubbleChartDataProvider {
  @objc var bubbleData: ODSFoundation.BubbleChartData? { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TileView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setupTileView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ODSLoader : ObjectiveC.NSObject {
  public class var uniqueInstance: ODSFoundation.ODSLoader {
    get
  }
  public func loaderStart(status: Swift.String)
  public func resumeLoader()
  public func loaderStop()
  @objc deinit
}
@objc open class LineChartRenderer : ODSFoundation.LineRadarRenderer {
  @objc weak open var dataProvider: ODSFoundation.LineChartDataProvider?
  @objc public init(dataProvider: ODSFoundation.LineChartDataProvider, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ILineChartDataSet)
  @objc open func drawCubicBezier(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ILineChartDataSet)
  @objc open func drawHorizontalBezier(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ILineChartDataSet)
  open func drawCubicFill(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ILineChartDataSet, spline: CoreGraphics.CGMutablePath, matrix: CoreFoundation.CGAffineTransform, bounds: ODSFoundation.BarLineScatterCandleBubbleRenderer.XBounds)
  @objc open func drawLinear(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ILineChartDataSet)
  open func drawLinearFill(context: CoreGraphics.CGContext, dataSet: ODSFoundation.ILineChartDataSet, trans: ODSFoundation.Transformer, bounds: ODSFoundation.BarLineScatterCandleBubbleRenderer.XBounds)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChevronUpShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
public protocol BarcodeScannerCodeDelegate : AnyObject {
  func scanner(_ controller: ODSFoundation.BarcodeScannerViewController, didCaptureCode code: Swift.String, type: Swift.String)
}
public protocol BarcodeScannerErrorDelegate : AnyObject {
  func scanner(_ controller: ODSFoundation.BarcodeScannerViewController, didReceiveError error: Swift.Error)
}
public protocol BarcodeScannerDismissalDelegate : AnyObject {
  func scannerDidDismiss(_ controller: ODSFoundation.BarcodeScannerViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BarcodeScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var codeDelegate: ODSFoundation.BarcodeScannerCodeDelegate?
  @_Concurrency.MainActor(unsafe) weak public var errorDelegate: ODSFoundation.BarcodeScannerErrorDelegate?
  @_Concurrency.MainActor(unsafe) weak public var dismissalDelegate: ODSFoundation.BarcodeScannerDismissalDelegate?
  @_Concurrency.MainActor(unsafe) public var isOneTimeSearch: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var metadata: [AVFoundation.AVMetadataObject.ObjectType] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerViewController: ODSFoundation.HeaderViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageViewController: ODSFoundation.MessageViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var cameraViewController: ODSFoundation.CameraViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var ocrScanEnable: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func resetWithError(message: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func reset(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject, UIKit.UITextFieldDelegate, UIKit.UITextViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func addTextFieldView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public func removeTextFieldView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public func addResponderFromView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public func removeResponderFromView(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
}
@objc(ZoomChartViewJob) open class ZoomViewJob : ODSFoundation.ViewPortJob {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, xValue: Swift.Double, yValue: Swift.Double, transformer: ODSFoundation.Transformer, axis: ODSFoundation.YAxis.AxisDependency, view: ODSFoundation.ChartViewBase)
  @objc override open func doJob()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BarChartView : ODSFoundation.BarLineChartViewBase, ODSFoundation.BarChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc override open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ODSFoundation.Highlight?
  @objc @_Concurrency.MainActor(unsafe) open func getBarBounds(entry e: ODSFoundation.BarChartDataEntry) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor(unsafe) open func groupBars(fromX: Swift.Double, groupSpace: Swift.Double, barSpace: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func highlightValue(x: Swift.Double, dataSetIndex: Swift.Int, stackIndex: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open var drawValueAboveBarEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var drawBarShadowEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var fitBars: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var highlightFullBarEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var isHighlightFullBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var barData: ODSFoundation.BarChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawValueAboveBarEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var isDrawBarShadowEnabled: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol BarLineScatterCandleBubbleChartDataProvider : ODSFoundation.ChartDataProvider {
  @objc func getTransformer(forAxis: ODSFoundation.YAxis.AxisDependency) -> ODSFoundation.Transformer
  @objc func isInverted(axis: ODSFoundation.YAxis.AxisDependency) -> Swift.Bool
  @objc var lowestVisibleX: Swift.Double { get }
  @objc var highestVisibleX: Swift.Double { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ODSPopUpView : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setUpPopUpData(shouldShowApplyButton: Swift.Bool = false, shouldShowOkButton: Swift.Bool = false, shouldShowCancelButton: Swift.Bool = false, headerTitle: Swift.String, errorTextTitle: Swift.String, errorTextMessage: Swift.String, image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol IShapeRenderer {
  @objc func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
}
public enum logEventType : Swift.Int {
  case info
  case dedug
  case warning
  case error
  case serverError
  case verbose
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class ODSLogger {
  public static var appLogLevel: Swift.Int?
  public class func log(_ object: Any, Type: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  @objc deinit
}
@objc(ChartYAxisRenderer) open class YAxisRenderer : ODSFoundation.AxisRendererBase {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, yAxis: ODSFoundation.YAxis?, transformer: ODSFoundation.Transformer?)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc override open func renderGridLines(context: CoreGraphics.CGContext)
  @objc open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc open func drawGridLine(context: CoreGraphics.CGContext, position: CoreFoundation.CGPoint)
  @objc open func transformedPositions() -> [CoreFoundation.CGPoint]
  @objc open func drawZeroLine(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@objc public enum ChartDataSetRounding : Swift.Int {
  case up = 0
  case down = 1
  case closest = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class ChartDataSet : ODSFoundation.ChartBaseDataSet {
  @objc required dynamic public init()
  @objc override public init(label: Swift.String?)
  @objc public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc convenience public init(entries: [ODSFoundation.ChartDataEntry]?)
  @available(*, unavailable, renamed: "entries")
  @objc open var values: [ODSFoundation.ChartDataEntry] {
    @objc get
  }
  @objc open var entries: [ODSFoundation.ChartDataEntry] {
    get
  }
  @objc public func replaceEntries(_ entries: [ODSFoundation.ChartDataEntry])
  @objc override open func calcMinMax()
  @objc override open func calcMinMaxY(fromX: Swift.Double, toX: Swift.Double)
  @objc open func calcMinMaxX(entry e: ODSFoundation.ChartDataEntry)
  @objc open func calcMinMaxY(entry e: ODSFoundation.ChartDataEntry)
  @objc override open var yMin: Swift.Double {
    @objc get
  }
  @objc override open var yMax: Swift.Double {
    @objc get
  }
  @objc override open var xMin: Swift.Double {
    @objc get
  }
  @objc override open var xMax: Swift.Double {
    @objc get
  }
  @available(*, deprecated, message: "Use `count` instead")
  @objc override open var entryCount: Swift.Int {
    @objc get
  }
  @available(*, deprecated, message: "Use `subscript(index:)` instead.")
  @objc override open func entryForIndex(_ i: Swift.Int) -> ODSFoundation.ChartDataEntry?
  @objc override open func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ODSFoundation.ChartDataSetRounding) -> ODSFoundation.ChartDataEntry?
  @objc override open func entryForXValue(_ xValue: Swift.Double, closestToY yValue: Swift.Double) -> ODSFoundation.ChartDataEntry?
  @objc override open func entriesForXValue(_ xValue: Swift.Double) -> [ODSFoundation.ChartDataEntry]
  @objc override open func entryIndex(x xValue: Swift.Double, closestToY yValue: Swift.Double, rounding: ODSFoundation.ChartDataSetRounding) -> Swift.Int
  @available(*, deprecated, message: "Use `firstIndex(of:)` or `lastIndex(of:)`")
  @objc override open func entryIndex(entry e: ODSFoundation.ChartDataEntry) -> Swift.Int
  @available(*, deprecated, message: "Use `append(_:)` instead")
  @objc override open func addEntry(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @objc override open func addEntryOrdered(_ e: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @available(*, renamed: "remove(_:)")
  @objc override open func removeEntry(_ entry: ODSFoundation.ChartDataEntry) -> Swift.Bool
  open func remove(_ entry: ODSFoundation.ChartDataEntry) -> Swift.Bool
  @available(*, deprecated, message: "Use `func removeFirst() -> ChartDataEntry` instead.")
  @objc override open func removeFirst() -> Swift.Bool
  @available(*, deprecated, message: "Use `func removeLast() -> ChartDataEntry` instead.")
  @objc override open func removeLast() -> Swift.Bool
  @available(*, deprecated, message: "Use `removeAll(keepingCapacity:)` instead.")
  @objc override open func clear()
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ODSFoundation.ChartDataSet : Swift.MutableCollection {
  public typealias Index = Swift.Int
  public typealias Element = ODSFoundation.ChartDataEntry
  public var startIndex: ODSFoundation.ChartDataSet.Index {
    get
  }
  public var endIndex: ODSFoundation.ChartDataSet.Index {
    get
  }
  public func index(after: ODSFoundation.ChartDataSet.Index) -> ODSFoundation.ChartDataSet.Index
  @objc dynamic public subscript(position: ODSFoundation.ChartDataSet.Index) -> ODSFoundation.ChartDataSet.Element {
    @objc get
    @objc set
  }
  public typealias Indices = Swift.Range<ODSFoundation.ChartDataSet.Index>
  public typealias Iterator = Swift.IndexingIterator<ODSFoundation.ChartDataSet>
  public typealias SubSequence = Swift.Slice<ODSFoundation.ChartDataSet>
}
extension ODSFoundation.ChartDataSet : Swift.RandomAccessCollection {
  public func index(before: ODSFoundation.ChartDataSet.Index) -> ODSFoundation.ChartDataSet.Index
}
extension ODSFoundation.ChartDataSet {
  public func append(_ newElement: ODSFoundation.ChartDataSet.Element)
  public func remove(at position: ODSFoundation.ChartDataSet.Index) -> ODSFoundation.ChartDataSet.Element
  public func removeFirst() -> ODSFoundation.ChartDataSet.Element
  public func removeFirst(_ n: Swift.Int)
  public func removeLast() -> ODSFoundation.ChartDataSet.Element
  public func removeLast(_ n: Swift.Int)
  public func removeSubrange<R>(_ bounds: R) where R : Swift.RangeExpression, R.Bound == Swift.Int
  @objc dynamic public func removeAll(keepingCapacity keepCapacity: Swift.Bool)
}
public enum FocusViewType {
  case animated
  case oneDimension
  case twoDimensions
  public static func == (a: ODSFoundation.FocusViewType, b: ODSFoundation.FocusViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol ILineChartDataSet : ODSFoundation.ILineRadarChartDataSet {
  @objc var mode: ODSFoundation.LineChartDataSet.Mode { get set }
  @objc var cubicIntensity: CoreFoundation.CGFloat { get set }
  @objc var circleRadius: CoreFoundation.CGFloat { get set }
  @objc var circleHoleRadius: CoreFoundation.CGFloat { get set }
  @objc var circleColors: [ODSFoundation.NSUIColor] { get set }
  @objc func getCircleColor(atIndex: Swift.Int) -> ODSFoundation.NSUIColor?
  @objc func setCircleColor(_ color: ODSFoundation.NSUIColor)
  @objc func resetCircleColors(_ index: Swift.Int)
  @objc var drawCirclesEnabled: Swift.Bool { get set }
  @objc var isDrawCirclesEnabled: Swift.Bool { get }
  @objc var circleHoleColor: ODSFoundation.NSUIColor? { get set }
  @objc var drawCircleHoleEnabled: Swift.Bool { get set }
  @objc var isDrawCircleHoleEnabled: Swift.Bool { get }
  @objc var lineDashPhase: CoreFoundation.CGFloat { get }
  @objc var lineDashLengths: [CoreFoundation.CGFloat]? { get set }
  @objc var lineCapType: CoreGraphics.CGLineCap { get set }
  @objc var fillFormatter: ODSFoundation.IFillFormatter? { get set }
}
public enum TimeMeridian {
  case am
  case pm
  public static func == (a: ODSFoundation.TimeMeridian, b: ODSFoundation.TimeMeridian) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ODSFoundation.TimeMeridian : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ScatterChartView : ODSFoundation.BarLineChartViewBase, ODSFoundation.ScatterChartDataProvider {
  @_Concurrency.MainActor(unsafe) open func initialize()
  @_Concurrency.MainActor(unsafe) @objc open var scatterData: ODSFoundation.ScatterChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartHighlight) open class Highlight : ObjectiveC.NSObject {
  @objc open var dataIndex: Swift.Int
  @objc open var drawX: CoreFoundation.CGFloat
  @objc open var drawY: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double, xPx: CoreFoundation.CGFloat, yPx: CoreFoundation.CGFloat, dataIndex: Swift.Int, dataSetIndex: Swift.Int, stackIndex: Swift.Int, axis: ODSFoundation.YAxis.AxisDependency)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, xPx: CoreFoundation.CGFloat, yPx: CoreFoundation.CGFloat, dataSetIndex: Swift.Int, stackIndex: Swift.Int, axis: ODSFoundation.YAxis.AxisDependency)
  @objc public init(x: Swift.Double, y: Swift.Double, xPx: CoreFoundation.CGFloat, yPx: CoreFoundation.CGFloat, dataSetIndex: Swift.Int, axis: ODSFoundation.YAxis.AxisDependency)
  @objc public init(x: Swift.Double, y: Swift.Double, dataSetIndex: Swift.Int, dataIndex: Swift.Int = -1)
  @objc convenience public init(x: Swift.Double, dataSetIndex: Swift.Int, stackIndex: Swift.Int)
  @objc open var x: Swift.Double {
    @objc get
  }
  @objc open var y: Swift.Double {
    @objc get
  }
  @objc open var xPx: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var yPx: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var dataSetIndex: Swift.Int {
    @objc get
  }
  @objc open var stackIndex: Swift.Int {
    @objc get
  }
  @objc open var axis: ODSFoundation.YAxis.AxisDependency {
    @objc get
  }
  @objc open var isStacked: Swift.Bool {
    @objc get
  }
  @objc open func setDraw(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc open func setDraw(pt: CoreFoundation.CGPoint)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ODSFoundation.Highlight {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias NSUIFont = UIKit.UIFont
public typealias NSUIColor = UIKit.UIColor
public typealias NSUIEvent = UIKit.UIEvent
public typealias NSUITouch = UIKit.UITouch
public typealias NSUIImage = UIKit.UIImage
public typealias NSUIScrollView = UIKit.UIScrollView
public typealias NSUIGestureRecognizer = UIKit.UIGestureRecognizer
public typealias NSUIGestureRecognizerState = UIKit.UIGestureRecognizer.State
public typealias NSUIGestureRecognizerDelegate = UIKit.UIGestureRecognizerDelegate
public typealias NSUITapGestureRecognizer = UIKit.UITapGestureRecognizer
public typealias NSUIPanGestureRecognizer = UIKit.UIPanGestureRecognizer
public typealias NSUIPinchGestureRecognizer = UIKit.UIPinchGestureRecognizer
public typealias NSUIRotationGestureRecognizer = UIKit.UIRotationGestureRecognizer
public typealias NSUIScreen = UIKit.UIScreen
public typealias NSUIDisplayLink = QuartzCore.CADisplayLink
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NSUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesBegan(_ touches: Swift.Set<ODSFoundation.NSUITouch>, with event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesMoved(_ touches: Swift.Set<ODSFoundation.NSUITouch>, with event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesEnded(_ touches: Swift.Set<ODSFoundation.NSUITouch>, with event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc final override public func touchesCancelled(_ touches: Swift.Set<ODSFoundation.NSUITouch>, with event: ODSFoundation.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func nsuiTouchesBegan(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func nsuiTouchesMoved(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func nsuiTouchesEnded(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func nsuiTouchesCancelled(_ touches: Swift.Set<ODSFoundation.NSUITouch>?, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(IChartAxisValueFormatter) public protocol IAxisValueFormatter {
  @objc func stringForValue(_ value: Swift.Double, axis: ODSFoundation.AxisBase?) -> Swift.String
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class IQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class YAxisRendererHorizontalBarChart : ODSFoundation.YAxisRenderer {
  @objc override public init(viewPortHandler: ODSFoundation.ViewPortHandler, yAxis: ODSFoundation.YAxis?, transformer: ODSFoundation.Transformer?)
  @objc override open func computeAxis(min: Swift.Double, max: Swift.Double, inverted: Swift.Bool)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderAxisLine(context: CoreGraphics.CGContext)
  @objc open func drawYLabels(context: CoreGraphics.CGContext, fixedPosition: CoreFoundation.CGFloat, positions: [CoreFoundation.CGPoint], offset: CoreFoundation.CGFloat)
  @objc override open var gridClippingRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc override open func drawGridLine(context: CoreGraphics.CGContext, position: CoreFoundation.CGPoint)
  @objc override open func transformedPositions() -> [CoreFoundation.CGPoint]
  @objc override open func drawZeroLine(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RadarChartHighlighter) open class RadarHighlighter : ODSFoundation.PieRadarHighlighter {
  @objc override open func closestHighlight(index: Swift.Int, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc override public init(chart: ODSFoundation.ChartDataProvider)
  @objc deinit
}
@objc open class YAxisRendererRadarChart : ODSFoundation.YAxisRenderer {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, yAxis: ODSFoundation.YAxis?, chart: ODSFoundation.RadarChartView)
  @objc override open func computeAxisValues(min yMin: Swift.Double, max yMax: Swift.Double)
  @objc override open func renderAxisLabels(context: CoreGraphics.CGContext)
  @objc override open func renderLimitLines(context: CoreGraphics.CGContext)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChartTransformerHorizontalBarChart) open class TransformerHorizontalBarChart : ODSFoundation.Transformer {
  @objc override open func prepareMatrixOffset(inverted: Swift.Bool)
  @objc override public init(viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RSSelectionMenuDelegate<T> : ObjectiveC.NSObject, UIKit.UITableViewDelegate where T : Swift.Equatable {
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension ODSFoundation.RSSelectionMenuDelegate {
  @_Concurrency.MainActor(unsafe) public func showSelected(item: T, inTableView tableView: ODSFoundation.RSSelectionTableView<T>) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func removeAllSelectedItems()
}
@objc open class CandleChartDataEntry : ODSFoundation.ChartDataEntry {
  @objc open var high: Swift.Double
  @objc open var low: Swift.Double
  @objc open var close: Swift.Double
  @objc open var open: Swift.Double
  @objc required dynamic public init()
  @objc public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double)
  @objc convenience public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double, data: Any?)
  @objc convenience public init(x: Swift.Double, shadowH: Swift.Double, shadowL: Swift.Double, open: Swift.Double, close: Swift.Double, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc open var shadowRange: Swift.Double {
    @objc get
  }
  @objc open var bodyRange: Swift.Double {
    @objc get
  }
  @objc override open var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(JRDropDown) @_Concurrency.MainActor(unsafe) open class iOSDropDown : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var arrow: ODSFoundation.Arrow!
  @_Concurrency.MainActor(unsafe) public var table: UIKit.UITableView!
  @_Concurrency.MainActor(unsafe) public var shadow: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int?
  @_Concurrency.MainActor(unsafe) public var selectedCells: [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var selectedArr: [Swift.String]
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var rowHeight: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var rowBackgroundColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var selectedRowColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var hideOptionsWhenSelect: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isMultipleSelection: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isSearchEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var listHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var optionArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var optionImageArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var noMatchDict: [Swift.String : Any] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var optionIds: [Swift.Int]?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var arrowSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var arrowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var checkMarkEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var handleKeyboard: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func showList()
  @_Concurrency.MainActor(unsafe) public func hideList()
  @objc @_Concurrency.MainActor(unsafe) public func touchAction()
  @_Concurrency.MainActor(unsafe) public func didSelect(completion: @escaping (_ selectedText: Swift.String, _ index: Swift.Int, _ id: Swift.Int) -> ())
  @_Concurrency.MainActor(unsafe) public func didDeSelect(completion: @escaping (_ selectedText: Swift.String, _ index: Swift.Int, _ id: Swift.Int) -> ())
  @_Concurrency.MainActor(unsafe) public func listWillAppear(completion: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func listDidAppear(completion: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func listWillDisappear(completion: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func listDidDisappear(completion: @escaping () -> ())
}
extension ODSFoundation.iOSDropDown : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
extension ODSFoundation.iOSDropDown : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension ODSFoundation.iOSDropDown : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class Arrow : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol IBarChartDataSet : ODSFoundation.IBarLineScatterCandleBubbleChartDataSet {
  @objc var isStacked: Swift.Bool { get }
  @objc var stackSize: Swift.Int { get }
  @objc var barShadowColor: ODSFoundation.NSUIColor { get set }
  @objc var barBorderWidth: CoreFoundation.CGFloat { get set }
  @objc var barBorderColor: ODSFoundation.NSUIColor { get set }
  @objc var highlightAlpha: CoreFoundation.CGFloat { get set }
  @objc var stackLabels: [Swift.String] { get set }
}
@objc(ChartAnimatorDelegate) public protocol AnimatorDelegate {
  @objc func animatorUpdated(_ animator: ODSFoundation.Animator)
  @objc func animatorStopped(_ animator: ODSFoundation.Animator)
}
@_inheritsConvenienceInitializers @objc(ChartAnimator) open class Animator : ObjectiveC.NSObject {
  @objc weak open var delegate: ODSFoundation.AnimatorDelegate?
  @objc open var updateBlock: (() -> Swift.Void)?
  @objc open var stopBlock: (() -> Swift.Void)?
  @objc open var phaseX: Swift.Double
  @objc open var phaseY: Swift.Double
  @objc override dynamic public init()
  @objc deinit
  @objc open func stop()
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingX: ODSFoundation.ChartEasingFunctionBlock?, easingY: ODSFoundation.ChartEasingFunctionBlock?)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOptionX: ODSFoundation.ChartEasingOption, easingOptionY: ODSFoundation.ChartEasingOption)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, yAxisDuration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption = .easeInOutSine)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc open func animate(xAxisDuration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption = .easeInOutSine)
  @objc open func animate(yAxisDuration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc open func animate(yAxisDuration: Foundation.TimeInterval, easingOption: ODSFoundation.ChartEasingOption = .easeInOutSine)
}
@_inheritsConvenienceInitializers @objc(ChartLegend) open class Legend : ODSFoundation.ComponentBase {
  @objc(ChartLegendForm) public enum Form : Swift.Int {
    case none
    case empty
    case `default`
    case square
    case circle
    case line
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendHorizontalAlignment) public enum HorizontalAlignment : Swift.Int {
    case left
    case center
    case right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendVerticalAlignment) public enum VerticalAlignment : Swift.Int {
    case top
    case center
    case bottom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendOrientation) public enum Orientation : Swift.Int {
    case horizontal
    case vertical
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(ChartLegendDirection) public enum Direction : Swift.Int {
    case leftToRight
    case rightToLeft
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var entries: [ODSFoundation.LegendEntry]
  @objc open var extraEntries: [ODSFoundation.LegendEntry]
  @objc open var horizontalAlignment: ODSFoundation.Legend.HorizontalAlignment
  @objc open var verticalAlignment: ODSFoundation.Legend.VerticalAlignment
  @objc open var orientation: ODSFoundation.Legend.Orientation
  @objc open var drawInside: Swift.Bool
  @objc open var isDrawInsideEnabled: Swift.Bool {
    @objc get
  }
  @objc open var direction: ODSFoundation.Legend.Direction
  @objc open var font: UIKit.UIFont
  @objc open var textColor: UIKit.UIColor
  @objc open var form: ODSFoundation.Legend.Form
  @objc open var formSize: CoreFoundation.CGFloat
  @objc open var formLineWidth: CoreFoundation.CGFloat
  @objc open var formLineDashPhase: CoreFoundation.CGFloat
  @objc open var formLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var xEntrySpace: CoreFoundation.CGFloat
  @objc open var yEntrySpace: CoreFoundation.CGFloat
  @objc open var formToTextSpace: CoreFoundation.CGFloat
  @objc open var stackSpace: CoreFoundation.CGFloat
  @objc open var calculatedLabelSizes: [CoreFoundation.CGSize]
  @objc open var calculatedLabelBreakPoints: [Swift.Bool]
  @objc open var calculatedLineSizes: [CoreFoundation.CGSize]
  @objc override dynamic public init()
  @objc public init(entries: [ODSFoundation.LegendEntry])
  @objc open func getMaximumEntrySize(withFont font: ODSFoundation.NSUIFont) -> CoreFoundation.CGSize
  @objc open var neededWidth: CoreFoundation.CGFloat
  @objc open var neededHeight: CoreFoundation.CGFloat
  @objc open var textWidthMax: CoreFoundation.CGFloat
  @objc open var textHeightMax: CoreFoundation.CGFloat
  @objc open var wordWrapEnabled: Swift.Bool
  @objc open var isWordWrapEnabled: Swift.Bool {
    @objc get
  }
  @objc open var maxSizePercent: CoreFoundation.CGFloat
  @objc open func calculateDimensions(labelFont: ODSFoundation.NSUIFont, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc open func setCustom(entries: [ODSFoundation.LegendEntry])
  @objc open func resetCustom()
  @objc open var isLegendCustom: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc open class LineChartDataSet : ODSFoundation.LineRadarChartDataSet, ODSFoundation.ILineChartDataSet {
  @objc(LineChartMode) public enum Mode : Swift.Int {
    case linear
    case stepped
    case cubicBezier
    case horizontalBezier
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc required dynamic public init()
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc open var mode: ODSFoundation.LineChartDataSet.Mode
  @objc open var cubicIntensity: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var circleRadius: CoreFoundation.CGFloat
  @objc open var circleHoleRadius: CoreFoundation.CGFloat
  @objc open var circleColors: [ODSFoundation.NSUIColor]
  @objc open func getCircleColor(atIndex index: Swift.Int) -> ODSFoundation.NSUIColor?
  @objc open func setCircleColor(_ color: ODSFoundation.NSUIColor)
  open func setCircleColors(_ colors: ODSFoundation.NSUIColor...)
  @objc open func resetCircleColors(_ index: Swift.Int)
  @objc open var drawCirclesEnabled: Swift.Bool
  @objc open var isDrawCirclesEnabled: Swift.Bool {
    @objc get
  }
  @objc open var circleHoleColor: ODSFoundation.NSUIColor?
  @objc open var drawCircleHoleEnabled: Swift.Bool
  @objc open var isDrawCircleHoleEnabled: Swift.Bool {
    @objc get
  }
  @objc open var lineDashPhase: CoreFoundation.CGFloat
  @objc open var lineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var lineCapType: CoreGraphics.CGLineCap
  @objc open var fillFormatter: ODSFoundation.IFillFormatter? {
    @objc get
    @objc set
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public enum TorchMode {
  case on
  case off
  public static func == (a: ODSFoundation.TorchMode, b: ODSFoundation.TorchMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class ScatterChartData : ODSFoundation.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc open func getGreatestShapeSize() -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PieChartHighlighter) open class PieHighlighter : ODSFoundation.PieRadarHighlighter {
  @objc override open func closestHighlight(index: Swift.Int, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc override public init(chart: ODSFoundation.ChartDataProvider)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BarChartDataEntry : ODSFoundation.ChartDataEntry {
  @objc required dynamic public init()
  @objc override public init(x: Swift.Double, y: Swift.Double)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, data: Any?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc public init(x: Swift.Double, yValues: [Swift.Double])
  @objc convenience public init(x: Swift.Double, yValues: [Swift.Double], icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(x: Swift.Double, yValues: [Swift.Double], data: Any?)
  @objc convenience public init(x: Swift.Double, yValues: [Swift.Double], icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc open func sumBelow(stackIndex: Swift.Int) -> Swift.Double
  @objc open var negativeSum: Swift.Double {
    @objc get
  }
  @objc open var positiveSum: Swift.Double {
    @objc get
  }
  @objc open func calcPosNegSum()
  @objc open func calcRanges()
  @objc open var isStacked: Swift.Bool {
    @objc get
  }
  @objc open var yValues: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc open var ranges: [ODSFoundation.Range]? {
    @objc get
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public struct ODSThemeAttribute {
  public var contentViewBackgroundColor: UIKit.UIColor!
  public var stripColor: UIKit.UIColor!
  public var titleTextColor: UIKit.UIColor!
  public var titleFont: UIKit.UIFont!
  public var wheelFont: UIKit.UIFont!
  public var wheelTextColor: UIKit.UIColor!
  public var buttonFont: UIKit.UIFont!
  public var buttonTextColor: UIKit.UIColor!
  public var is24: Swift.Bool!
  public init()
}
public enum ODSTheme {
  case light
  case dark
  case custom(ODSFoundation.ODSThemeAttribute)
  public var attribute: ODSFoundation.ODSThemeAttribute {
    get
  }
}
@objc(ChartViewPortJob) open class ViewPortJob : ObjectiveC.NSObject {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ODSFoundation.Transformer, view: ODSFoundation.ChartViewBase)
  @objc open func doJob()
  @objc deinit
}
extension Swift.String {
  public var expression: Foundation.NSExpression {
    get
  }
  public static func random(length: Swift.Int, type: Swift.String) -> Swift.String
  public func contains(find: Swift.String) -> Swift.Bool
  public func containsIgnoringCase(find: Swift.String) -> Swift.Bool
  public func dataFromHexadecimalString() -> Foundation.NSData?
  public var isNumeric: Swift.Bool {
    get
  }
  public func countInstances(of stringToFind: Swift.String) -> Swift.Int
  public func localized(withComment comment: Swift.String? = nil) -> Swift.String
  public func replacingLastOccurrenceOfString(_ searchString: Swift.String, with replacementString: Swift.String, caseInsensitive: Swift.Bool = true) -> Swift.String
  public func replaceCharactersFromSet(characterSet: Foundation.CharacterSet, replacementString: Swift.String = "") -> Swift.String
}
extension Foundation.NSDate {
  public func isGreaterThanDate(dateToCompare: Foundation.NSDate) -> Swift.Bool
  public func isLessThanDate(dateToCompare: Foundation.NSDate) -> Swift.Bool
  public func equalToDate(dateToCompare: Foundation.NSDate) -> Swift.Bool
  public func addDays(daysToAdd: Swift.Int) -> Foundation.NSDate
  public func addHours(hoursToAdd: Swift.Int) -> Foundation.NSDate
}
extension Foundation.Date {
  public static var yes: Foundation.Date {
    get
  }
  public static var tom: Foundation.Date {
    get
  }
  public var dayBefore: Foundation.Date {
    get
  }
  public var dayAfter: Foundation.Date {
    get
  }
  public var noon: Foundation.Date {
    get
  }
  public var mon: Swift.Int {
    get
  }
}
extension Foundation.NSData {
  public func hexadecimal() -> Swift.String
}
extension UIKit.UIImage {
  public enum JPEGQuality : CoreFoundation.CGFloat {
    case lowest
    case low
    case medium
    case high
    case highest
    public init?(rawValue: CoreFoundation.CGFloat)
    public typealias RawValue = CoreFoundation.CGFloat
    public var rawValue: CoreFoundation.CGFloat {
      get
    }
  }
  public var png: Foundation.NSData? {
    get
  }
  public func jpeg(quality: UIKit.UIImage.JPEGQuality) -> Foundation.NSData?
  convenience public init?(barcode: Swift.String)
  convenience public init?(qrCode: Swift.String)
}
extension UIKit.UIFontDescriptor.AttributeName {
  public static let nsctFontUIUsage: UIKit.UIFontDescriptor.AttributeName
}
public struct AppFontName {
}
extension UIKit.UIFont {
  @objc dynamic public class func mySystemFont(ofSize size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc dynamic public class func myBoldSystemFont(ofSize size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc dynamic public class func myItalicSystemFont(ofSize size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc convenience dynamic public init(myCoder aDecoder: Foundation.NSCoder)
  public class func overrideInitialize()
}
extension UIKit.UIColor {
  public static var randomColor: UIKit.UIColor {
    get
  }
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
}
extension Foundation.FileManager {
  public func secureCopyItem(at srcURL: Foundation.URL, to dstURL: Foundation.URL) -> Swift.Bool
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Iterator.Element? {
    get
  }
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public func scrollToBottom()
  @_Concurrency.MainActor(unsafe) public func scrollToTop()
}
extension UIKit.UIPrintPageRenderer {
  @_Concurrency.MainActor(unsafe) public func printToPDF() -> Foundation.NSData
  @_Concurrency.MainActor(unsafe) public func generatePdfData() -> Foundation.NSMutableData
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func isValidIndexPath(indexPath: Foundation.IndexPath) -> Swift.Bool
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func isValidIndexPath(indexPath: Foundation.IndexPath) -> Swift.Bool
}
extension Swift.Array where Element : Swift.Hashable {
  public func uniqued() -> [Element]
}
extension Swift.Array {
  public func sortBy<T>(by compare: (Element) -> T, asc ascendant: Swift.Bool = true) -> Swift.Array<Element> where T : Swift.Comparable
  public func unique<T>(map: ((Element) -> (T))) -> [Element] where T : Swift.Hashable
  public func uniqueValues<T>(map: ((Element) -> (T))) -> [Swift.String] where T : Swift.Hashable
}
extension Swift.Comparable {
  public func clamped(lowerBound: Self, upperBound: Self) -> Self
}
extension LocalAuthentication.LAContext {
  public enum BiometricType : Swift.String {
    case none
    case touchID
    case faceID
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var biometricType: LocalAuthentication.LAContext.BiometricType {
    get
  }
}
extension Foundation.Data {
  public init?(fromHexEncodedString string: Swift.String)
}
extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var compatibleSearchTextField: UIKit.UITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var legacySearchField: UIKit.UITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public func setSearchBarTextColor(txtColor: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class HeaderViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var navigationBar: UIKit.UINavigationBar {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var closeButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ODSFoundation.HeaderViewController : UIKit.UINavigationBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func position(for bar: UIKit.UIBarPositioning) -> UIKit.UIBarPosition
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ODSStoreHelper : ObjectiveC.NSObject, ODSFoundation.SODataOfflineStoreRequestErrorDelegate, ODSFoundation.SODataOfflineStoreDelegate, ODSFoundation.SODataOfflineStoreFlushDelegate, ODSFoundation.SODataOfflineStoreRefreshDelegate, ODSFoundation.UsernamePasswordProviderProtocol, ODSFoundation.SAML2ConfigProviderProtocol {
  public class var uniqueInstance: ODSFoundation.ODSStoreHelper {
    get
  }
  public static var offlineStoreName: Swift.String
  public static var StoreDictionary: Foundation.NSMutableDictionary
  public static var storeListArray: [ODSFoundation.AppStoreModel]
  public static var pushDelete: Swift.Bool
  public static var pushRegister: Swift.Bool
  public static var storeDelegate: ODSFoundation.StoreDelegate?
  public static var storeFlushRefreshDelegate: ODSFoundation.StoreFlushRefreshDelegate?
  public static var pushDelegate: ODSFoundation.PushDeleteDelegate?
  @objc public func provideSAML2Configuration(for url: Foundation.URL!, completionBlock: ODSFoundation.saml2_config_provider_completion_t!)
  @objc public func provideUsernamePassword(forAuthChallenge authChallenge: Foundation.URLAuthenticationChallenge!, completionBlock: ODSFoundation.username_password_provider_completion_t!)
  public func configTimeBasedBackGroundSync(syncType: Swift.String, timeInterval: Swift.String, retryCount: Swift.String, retryInterval: Swift.String)
  public func configMasterDataBackGroundSync(refreshUnitHour: Swift.Bool, timeInterval: Swift.String, retryCount: Swift.String, retryInterval: Swift.String)
  public static func configEventBasedSync(syncType: Swift.String, enable: Swift.Bool)
  public func flushAndRefreshStores(masterDataRefresh: Swift.Bool)
  public static func removeTimeBasedBackGroundSync()
  public static func removeMasterDataBackGroundSync()
  public static func removeEventBasedSync()
  @objc public func offlineStoreStateChanged(_ store: ODSFoundation.SODataOfflineStore!, state newState: ODSFoundation.SODataOfflineStoreState)
  @objc public func offlineStoreOpenFailed(_ store: ODSFoundation.SODataOfflineStore!, error: Swift.Error!)
  @objc public func offlineStoreOpenFinished(_ store: ODSFoundation.SODataOfflineStore!)
  @objc public func offlineStoreOpen(_ store: ODSFoundation.SODataOfflineStore!, progressStatus: ODSFoundation.SODataOfflineProgressStatus)
  @objc public func offlineStoreRequestFailed(_ store: ODSFoundation.SODataOfflineStore!, request requestExecution: ODSFoundation.SODataRequestExecution!, error: Swift.Error!)
  public func flushStore(storeName: Swift.String)
  @objc public func offlineStoreFlushStarted(_ store: ODSFoundation.SODataOfflineStore!)
  @objc public func offlineStoreFlushFinished(_ store: ODSFoundation.SODataOfflineStore!)
  @objc public func offlineStoreFlushSucceeded(_ store: ODSFoundation.SODataOfflineStore!)
  @objc public func offlineStoreFlushFailed(_ store: ODSFoundation.SODataOfflineStore!, error: Swift.Error!)
  @objc public func offlineStoreFlush(_ store: ODSFoundation.SODataOfflineStore!, progressStatus: ODSFoundation.SODataOfflineProgressStatus)
  public func refreshStore(storeName: Swift.String)
  @objc public func offlineStoreRefreshSucceeded(_ store: ODSFoundation.SODataOfflineStore!)
  @objc public func offlineStoreRefreshFailed(_ store: ODSFoundation.SODataOfflineStore!, error: Swift.Error!)
  @objc public func offlineStoreRefresh(_ store: ODSFoundation.SODataOfflineStore!, progressStatus: ODSFoundation.SODataOfflineProgressStatus)
  @objc public func offlineStoreRefreshFinished(_ store: ODSFoundation.SODataOfflineStore!)
  public func OpenOfflineStore(storeName: Swift.String, serviceName: Swift.String, options: Swift.Dictionary<Swift.String, Any>)
  public func OpenNewOfflineStore(storeName: Swift.String, serviceName: Swift.String, defineReq: [Swift.String])
  public static func removeOfflineStores(storeNameArr: [Swift.String]) -> Swift.Bool
  public static func checkForUnflushedData(storeNameArr: [Swift.String] = []) -> Swift.Bool
  public static func closeOfflineStores(storeNameArr: [Swift.String] = []) -> Swift.Bool
  public static func checkStoreStatus(StoreName: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ODSOfflineHelper : ObjectiveC.NSObject {
  public static func getODataEntriesfromOffline(queryRequest: Swift.String, storeName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func getBatchEntries(batchRequest: ODSFoundation.SODataRequestParamBatchDefault, storeName: Swift.String, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func SODataRequestToNSMutableDictionary(SODataRequest: ODSFoundation.SODataRequestExecution) -> Foundation.NSMutableDictionary
  public static func SODataRequestToNSMutableDictionary(SODataRequest: ODSFoundation.SODataRequestExecution, NavProperty: Swift.Bool, NavPropertyValue: Swift.String) -> Foundation.NSMutableDictionary
  public func SODataRequestToDictionary(SODataRequest: ODSFoundation.SODataRequestExecution) -> Swift.Dictionary<Swift.String, Any>
  public static func createOfflineEntitys(entity: ODSFoundation.SODataEntity, collectionPath: Swift.String, storeName: Swift.String, flushRefreshDelegate: ODSFoundation.StoreFlushRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func updateOfflineEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, flushRefreshDelegate: ODSFoundation.StoreFlushRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  public static func deleteOfflineEntity(entity: ODSFoundation.SODataEntity, storeName: Swift.String, flushRefreshDelegate: ODSFoundation.StoreFlushRefreshDelegate? = nil, flushRequired: Swift.Bool? = false, options: [Swift.AnyHashable : Any]!, completionHandler: @escaping (Foundation.NSMutableDictionary, Foundation.NSError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc(ChartViewPortHandler) open class ViewPortHandler : ObjectiveC.NSObject {
  @objc public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc open func setChartDimens(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc open var hasChartDimens: Swift.Bool {
    @objc get
  }
  @objc open func restrainViewPort(offsetLeft: CoreFoundation.CGFloat, offsetTop: CoreFoundation.CGFloat, offsetRight: CoreFoundation.CGFloat, offsetBottom: CoreFoundation.CGFloat)
  @objc open var offsetLeft: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var offsetRight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var offsetTop: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var offsetBottom: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentTop: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentLeft: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentRight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentBottom: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var contentRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc open var contentCenter: CoreFoundation.CGPoint {
    @objc get
  }
  @objc open var chartHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var chartWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func zoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func zoomIn(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func zoomOut(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func resetZoom() -> CoreFoundation.CGAffineTransform
  @objc open func setZoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func setZoom(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGAffineTransform
  @objc open func fitScreen() -> CoreFoundation.CGAffineTransform
  @objc open func translate(pt: CoreFoundation.CGPoint) -> CoreFoundation.CGAffineTransform
  @objc open func centerViewPort(pt: CoreFoundation.CGPoint, chart: ODSFoundation.ChartViewBase)
  @discardableResult
  @objc open func refresh(newMatrix: CoreFoundation.CGAffineTransform, chart: ODSFoundation.ChartViewBase, invalidate: Swift.Bool) -> CoreFoundation.CGAffineTransform
  @objc open func setMinimumScaleX(_ xScale: CoreFoundation.CGFloat)
  @objc open func setMaximumScaleX(_ xScale: CoreFoundation.CGFloat)
  @objc open func setMinMaxScaleX(minScaleX: CoreFoundation.CGFloat, maxScaleX: CoreFoundation.CGFloat)
  @objc open func setMinimumScaleY(_ yScale: CoreFoundation.CGFloat)
  @objc open func setMaximumScaleY(_ yScale: CoreFoundation.CGFloat)
  @objc open func setMinMaxScaleY(minScaleY: CoreFoundation.CGFloat, maxScaleY: CoreFoundation.CGFloat)
  @objc open var touchMatrix: CoreFoundation.CGAffineTransform {
    @objc get
  }
  @objc open func isInBoundsX(_ x: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsY(_ y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBounds(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsLeft(_ x: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsRight(_ x: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsTop(_ y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open func isInBoundsBottom(_ y: CoreFoundation.CGFloat) -> Swift.Bool
  @objc open var scaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var scaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var minScaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var minScaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var maxScaleX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var maxScaleY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var transX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var transY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var isFullyZoomedOut: Swift.Bool {
    @objc get
  }
  @objc open var isFullyZoomedOutY: Swift.Bool {
    @objc get
  }
  @objc open var isFullyZoomedOutX: Swift.Bool {
    @objc get
  }
  @objc open func setDragOffsetX(_ offset: CoreFoundation.CGFloat)
  @objc open func setDragOffsetY(_ offset: CoreFoundation.CGFloat)
  @objc open var hasNoDragOffset: Swift.Bool {
    @objc get
  }
  @objc open var canZoomOutMoreX: Swift.Bool {
    @objc get
  }
  @objc open var canZoomInMoreX: Swift.Bool {
    @objc get
  }
  @objc open var canZoomOutMoreY: Swift.Bool {
    @objc get
  }
  @objc open var canZoomInMoreY: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(ChartFillType) public enum FillType : Swift.Int {
  case empty
  case color
  case linearGradient
  case radialGradient
  case image
  case tiledImage
  case layer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ChartFill) open class Fill : ObjectiveC.NSObject {
  @objc open var type: ODSFoundation.FillType {
    @objc get
  }
  @objc open var color: CoreGraphics.CGColor? {
    @objc get
  }
  @objc open var gradient: CoreGraphics.CGGradient? {
    @objc get
  }
  @objc open var gradientAngle: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var gradientStartOffsetPercent: CoreFoundation.CGPoint {
    @objc get
  }
  @objc open var gradientStartRadiusPercent: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var gradientEndOffsetPercent: CoreFoundation.CGPoint {
    @objc get
  }
  @objc open var gradientEndRadiusPercent: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var image: CoreGraphics.CGImage? {
    @objc get
  }
  @objc open var layer: CoreGraphics.CGLayer? {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(CGColor: CoreGraphics.CGColor)
  @objc convenience public init(color: ODSFoundation.NSUIColor)
  @objc public init(linearGradient: CoreGraphics.CGGradient, angle: CoreFoundation.CGFloat)
  @objc public init(radialGradient: CoreGraphics.CGGradient, startOffsetPercent: CoreFoundation.CGPoint, startRadiusPercent: CoreFoundation.CGFloat, endOffsetPercent: CoreFoundation.CGPoint, endRadiusPercent: CoreFoundation.CGFloat)
  @objc convenience public init(radialGradient: CoreGraphics.CGGradient)
  @objc public init(CGImage: CoreGraphics.CGImage, tiled: Swift.Bool)
  @objc convenience public init(image: ODSFoundation.NSUIImage, tiled: Swift.Bool)
  @objc convenience public init(CGImage: CoreGraphics.CGImage)
  @objc convenience public init(image: ODSFoundation.NSUIImage)
  @objc public init(CGLayer: CoreGraphics.CGLayer)
  @objc open class func fillWithCGColor(_ CGColor: CoreGraphics.CGColor) -> ODSFoundation.Fill
  @objc open class func fillWithColor(_ color: ODSFoundation.NSUIColor) -> ODSFoundation.Fill
  @objc open class func fillWithLinearGradient(_ linearGradient: CoreGraphics.CGGradient, angle: CoreFoundation.CGFloat) -> ODSFoundation.Fill
  @objc open class func fillWithRadialGradient(_ radialGradient: CoreGraphics.CGGradient, startOffsetPercent: CoreFoundation.CGPoint, startRadiusPercent: CoreFoundation.CGFloat, endOffsetPercent: CoreFoundation.CGPoint, endRadiusPercent: CoreFoundation.CGFloat) -> ODSFoundation.Fill
  @objc open class func fillWithRadialGradient(_ radialGradient: CoreGraphics.CGGradient) -> ODSFoundation.Fill
  @objc open class func fillWithCGImage(_ CGImage: CoreGraphics.CGImage, tiled: Swift.Bool) -> ODSFoundation.Fill
  @objc open class func fillWithImage(_ image: ODSFoundation.NSUIImage, tiled: Swift.Bool) -> ODSFoundation.Fill
  @objc open class func fillWithCGImage(_ CGImage: CoreGraphics.CGImage) -> ODSFoundation.Fill
  @objc open class func fillWithImage(_ image: ODSFoundation.NSUIImage) -> ODSFoundation.Fill
  @objc open class func fillWithCGLayer(_ CGLayer: CoreGraphics.CGLayer) -> ODSFoundation.Fill
  @objc open func fillPath(context: CoreGraphics.CGContext, rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PieChartData : ODSFoundation.ChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc override open var dataSets: [ODSFoundation.IChartDataSet] {
    @objc get
    @objc set
  }
  @objc override open func getDataSetByIndex(_ index: Swift.Int) -> ODSFoundation.IChartDataSet?
  @objc override open func getDataSetByLabel(_ label: Swift.String, ignorecase: Swift.Bool) -> ODSFoundation.IChartDataSet?
  @objc override open func entryForHighlight(_ highlight: ODSFoundation.Highlight) -> ODSFoundation.ChartDataEntry?
  @objc override open func addDataSet(_ d: ODSFoundation.IChartDataSet!)
  @objc override open func removeDataSetByIndex(_ index: Swift.Int) -> Swift.Bool
  @objc open var yValueSum: Swift.Double {
    @objc get
  }
  @objc deinit
}
@objc public class IQInvocation : ObjectiveC.NSObject {
  @objc weak public var target: Swift.AnyObject?
  @objc public var action: ObjectiveC.Selector
  @objc public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc public func invoke(from: Any)
  @objc deinit
}
public typealias Index = Swift.Int
public typealias Closure = () -> Swift.Void
public typealias SelectionClosure = (ODSFoundation.Index, Swift.String) -> Swift.Void
public typealias MultiSelectionClosure = ([ODSFoundation.Index], [Swift.String]) -> Swift.Void
public typealias ConfigurationClosure = (ODSFoundation.Index, Swift.String) -> Swift.String
public typealias CellConfigurationClosure = (ODSFoundation.Index, Swift.String, ODSFoundation.DropDownCell) -> Swift.Void
@objc public protocol AnchorView {
  @objc var plainView: UIKit.UIView { get }
}
extension UIKit.UIView : ODSFoundation.AnchorView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var plainView: UIKit.UIView {
    @objc get
  }
}
extension UIKit.UIBarButtonItem : ODSFoundation.AnchorView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var plainView: UIKit.UIView {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DropDown : UIKit.UIView {
  public enum DismissMode {
    case onTap
    case automatic
    case manual
    public static func == (a: ODSFoundation.DropDown.DismissMode, b: ODSFoundation.DropDown.DismissMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Direction {
    case any
    case top
    case bottom
    public static func == (a: ODSFoundation.DropDown.Direction, b: ODSFoundation.DropDown.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) weak public static var VisibleDropDown: ODSFoundation.DropDown?
  @_Concurrency.MainActor(unsafe) weak final public var anchorView: ODSFoundation.AnchorView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var direction: ODSFoundation.DropDown.Direction
  @_Concurrency.MainActor(unsafe) final public var topOffset: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomOffset: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var offsetFromWindowBottom: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var width: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var showCheckBox: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var showImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var arrowIndicationX: CoreFoundation.CGFloat? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var cellHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var dimmedBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var selectionBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var separatorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public func setupCornerRadius(_ radius: CoreFoundation.CGFloat)
  @available(iOS 11.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic final public func setupMaskedCorners(_ cornerMask: QuartzCore.CACornerMask)
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowOffset: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowOpacity: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var animationduration: Swift.Double
  @_Concurrency.MainActor(unsafe) public static var animationEntranceOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) public static var animationExitOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) final public var animationEntranceOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) final public var animationExitOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) final public var downScaleTransform: CoreFoundation.CGAffineTransform {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var selectedTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var textFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var cellNib: UIKit.UINib {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var doneCellNib: UIKit.UINib {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var DropDownWithImageCellNib: UIKit.UINib {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var dataSource: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var localizationKeysDataSource: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var selectedRowIndices: Swift.Set<ODSFoundation.Index>
  @_Concurrency.MainActor(unsafe) final public var cellConfiguration: ODSFoundation.ConfigurationClosure? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var customCellConfiguration: ODSFoundation.CellConfigurationClosure? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var selectionAction: ODSFoundation.SelectionClosure?
  @_Concurrency.MainActor(unsafe) final public var multiSelectionAction: ODSFoundation.MultiSelectionClosure?
  @_Concurrency.MainActor(unsafe) final public var willShowAction: ODSFoundation.Closure?
  @_Concurrency.MainActor(unsafe) final public var cancelAction: ODSFoundation.Closure?
  @_Concurrency.MainActor(unsafe) final public var dismissMode: ODSFoundation.DropDown.DismissMode {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(anchorView: ODSFoundation.AnchorView, selectionAction: ODSFoundation.SelectionClosure? = nil, dataSource: [Swift.String] = [], topOffset: CoreFoundation.CGPoint? = nil, bottomOffset: CoreFoundation.CGPoint? = nil, cellConfiguration: ODSFoundation.ConfigurationClosure? = nil, cancelAction: ODSFoundation.Closure? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
extension ODSFoundation.DropDown {
  @_Concurrency.MainActor(unsafe) @objc override final public func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
}
extension ODSFoundation.DropDown {
  @objc(show) @_Concurrency.MainActor(unsafe) final public func objc_show() -> Foundation.NSDictionary
  @discardableResult
  @_Concurrency.MainActor(unsafe) final public func show(onTopOf window: UIKit.UIWindow? = nil, beforeTransform transform: CoreFoundation.CGAffineTransform? = nil, anchorPoint: CoreFoundation.CGPoint? = nil) -> (canBeDisplayed: Swift.Bool, offscreenHeight: CoreFoundation.CGFloat?)
  @_Concurrency.MainActor(unsafe) @objc override final public func accessibilityPerformEscape() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func hide()
}
extension ODSFoundation.DropDown {
  @_Concurrency.MainActor(unsafe) final public func reloadAllComponents()
  @_Concurrency.MainActor(unsafe) final public func selectRow(at index: ODSFoundation.Index?, scrollPosition: UIKit.UITableView.ScrollPosition = .none)
  @_Concurrency.MainActor(unsafe) final public func selectRows(at indices: Swift.Set<ODSFoundation.Index>?)
  @_Concurrency.MainActor(unsafe) final public func deselectRow(at index: ODSFoundation.Index?)
  @_Concurrency.MainActor(unsafe) final public func deselectRows(at indices: Swift.Set<ODSFoundation.Index>?)
  @_Concurrency.MainActor(unsafe) final public var indexForSelectedRow: ODSFoundation.Index? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var selectedItem: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public func selectRow(_ index: Swift.Int, scrollPosition: UIKit.UITableView.ScrollPosition = .none)
  @objc @_Concurrency.MainActor(unsafe) final public func clearSelection()
  @objc @_Concurrency.MainActor(unsafe) final public func deselectRow(_ index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) final public var indexPathForSelectedRow: Foundation.NSIndexPath? {
    @objc get
  }
}
extension ODSFoundation.DropDown : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) final public func doneButtonAction(_ sender: UIKit.UIButton?)
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension ODSFoundation.DropDown {
  @_Concurrency.MainActor(unsafe) @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
extension ODSFoundation.DropDown {
  @objc @_Concurrency.MainActor(unsafe) public static func startListeningToKeyboard()
}
@objc public enum ChartEasingOption : Swift.Int {
  case linear
  case easeInQuad
  case easeOutQuad
  case easeInOutQuad
  case easeInCubic
  case easeOutCubic
  case easeInOutCubic
  case easeInQuart
  case easeOutQuart
  case easeInOutQuart
  case easeInQuint
  case easeOutQuint
  case easeInOutQuint
  case easeInSine
  case easeOutSine
  case easeInOutSine
  case easeInExpo
  case easeOutExpo
  case easeInOutExpo
  case easeInCirc
  case easeOutCirc
  case easeInOutCirc
  case easeInElastic
  case easeOutElastic
  case easeInOutElastic
  case easeInBack
  case easeOutBack
  case easeInOutBack
  case easeInBounce
  case easeOutBounce
  case easeInOutBounce
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ChartEasingFunctionBlock = ((_ elapsed: Foundation.TimeInterval, _ duration: Foundation.TimeInterval) -> Swift.Double)
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DropDownCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var optionLabel: UIKit.UILabel!
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ODSFoundation.DropDownCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(ChartDataApproximator) open class DataApproximator : ObjectiveC.NSObject {
  @objc open class func reduceWithDouglasPeuker(_ points: [CoreFoundation.CGPoint], tolerance: CoreFoundation.CGFloat) -> [CoreFoundation.CGPoint]
  open class func reduceWithDouglasPeuker(points: [CoreFoundation.CGPoint], tolerance: CoreFoundation.CGFloat, start: Swift.Int, end: Swift.Int, keep: inout [Swift.Bool])
  @objc override dynamic public init()
  @objc deinit
}
@objc(IChartHighlighter) public protocol IHighlighter {
  @objc func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
}
@objc @_inheritsConvenienceInitializers open class WorkOrderStatusModel : ObjectiveC.NSObject, ODSFoundation.Initable {
  @objc public var ObjectType: Swift.String
  @objc public var StatusCategoryId: Swift.String
  @objc public var ControlKey: Swift.String
  @objc public var CurrentStatusCode: Swift.String
  @objc public var AllowedStatusCode: Swift.String
  @objc public var StatusCategory: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var StatusAllowed: Swift.String
  @objc public var Status: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getworkOrderValidStatusList(modelClass: ODSFoundation.WorkOrderStatusModel.Type? = WorkOrderStatusModel.self, filterQuery: Swift.String? = "", formate: Swift.Bool = false, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc open class ChartHighlighter : ObjectiveC.NSObject, ODSFoundation.IHighlighter {
  @objc weak open var chart: ODSFoundation.ChartDataProvider?
  @objc public init(chart: ODSFoundation.ChartDataProvider)
  @objc open func getHighlight(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc open func getValsForTouch(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  @objc open func getHighlight(xValue xVal: Swift.Double, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> ODSFoundation.Highlight?
  @objc open func getHighlights(xValue: Swift.Double, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> [ODSFoundation.Highlight]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CandleStickChartView : ODSFoundation.BarLineChartViewBase, ODSFoundation.CandleChartDataProvider {
  @_Concurrency.MainActor(unsafe) @objc open var candleData: ODSFoundation.CandleChartData? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TriangleShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BubbleChartData : ODSFoundation.BarLineScatterCandleBubbleChartData {
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc open func setHighlightCircleWidth(_ width: CoreFoundation.CGFloat)
  @objc deinit
}
@objc public enum IQAutoToolbarManageBehaviour : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ODSTimePickerResult {
  public var hour: Swift.Int
  public var minute: Swift.Int
  public var is24: Swift.Bool
  public var meridian: ODSFoundation.TimeMeridian
  public init()
}
extension ODSFoundation.ODSTimePickerResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var TimeFromPicker: Swift.String {
    get
  }
  public var TimeFromPickerWithSec: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class CircleShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
public let DeviceType: UIKit.UIUserInterfaceIdiom
public let iPad: UIKit.UIUserInterfaceIdiom
public let iPhone: UIKit.UIUserInterfaceIdiom
public let screenRect: CoreFoundation.CGRect
public let screenWidth: CoreFoundation.CGFloat
public let screenHeight: CoreFoundation.CGFloat
public var fwDebug: Swift.Bool
public var ODSApplicationID: Swift.String
public var ODSServerUrl: Swift.String
public var ODSServerIP: Swift.String
public var ODSPortNo: Swift.Int
public var https: Swift.Bool
public var demoMode: Swift.Bool
public var demoStoresPath: Swift.String
public var storesPath: Swift.String
public var authType: Swift.String
public var loggedInUser: Swift.String
public var tabSelectedIndex: Swift.Int
public var tabScrollingIndex: Swift.Int
public var userCredentialDelegate: ODSFoundation.UserCredentialDelegate?
public var flushRefreshDelegate: ODSFoundation.StoreFlushRefreshDelegate?
public var debugLogLevel: Swift.Bool
public var errorLogLevel: Swift.Bool
public var warnLogLevel: Swift.Bool
public var infoLogLevel: Swift.Bool
public var printLog: Swift.Bool
public var appColor: UIKit.UIColor
public var filledCountColor: UIKit.UIColor
public let homeDirectory: Swift.String
public var storeNameDictArray: [Foundation.NSMutableDictionary]
public let tableConfigSet: Swift.String
public let appStoreSet: Swift.String
public let applicationConfigSet: Swift.String
public let workOrderStatusSet: Swift.String
public let transactionDataConfigSet: Swift.String
public let changePasswordSet: Swift.String
public let screenMappingSet: Swift.String
public let applicationFeatureSet: Swift.String
public let serviceConfigSet: Swift.String
public let statusCategorySet: Swift.String
public let appUserTableSet: Swift.String
public let entitySetKeysSet: Swift.String
public let alertMsgSet: Swift.String
public var OnlineDateTimeFormate: Swift.String
@objc(IChartFillFormatter) public protocol IFillFormatter {
  @objc func getFillLinePosition(dataSet: ODSFoundation.ILineChartDataSet, dataProvider: ODSFoundation.LineChartDataProvider) -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @objc(ChartDescription) open class Description : ODSFoundation.ComponentBase {
  @objc override dynamic public init()
  @objc open var text: Swift.String?
  open var position: CoreFoundation.CGPoint?
  @objc open var textAlign: UIKit.NSTextAlignment
  @objc open var font: ODSFoundation.NSUIFont
  @objc open var textColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ODSDateHelper : ObjectiveC.NSObject {
  public static var dateFormate: Swift.String
  public static var timeFormate: Swift.String
  public static func getDateFromString(dateString: Swift.String, dateFormat: Swift.String) -> Foundation.Date
  public static func getdateTimeFromTimeString(timeString: Swift.String, timeFormate: Swift.String) -> Foundation.Date?
  public static func getTimeFromSODataDuration(dataDuration: ODSFoundation.SODataDuration) -> Swift.String
  public static func compareTwoDates(fromDate: Swift.String, toDate: Swift.String) -> Swift.Bool
  public static func convertDateToString(date: Foundation.Date) -> Swift.String
  public static func restrictHoursOnCurrentTimer() -> Foundation.Date
  public static func restrictMiniutsOnCurrentTimer() -> Foundation.Date
  public static func getCurrentDate() -> Swift.String
  public static func getCurrentTime() -> Swift.String
  public static func getOnlineTimeStrInSODataDurationFormate(timeString: Swift.String) -> ODSFoundation.SODataDuration
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Date {
  public init?(fromString string: Swift.String, format: ODSFoundation.DateFormatType, timeZone: ODSFoundation.TimeZoneType = .local, locale: Foundation.Locale = Foundation.Locale.current, isLenient: Swift.Bool = true)
  public func toString(style: ODSFoundation.DateStyleType = .short) -> Swift.String
  public func toString(format: ODSFoundation.DateFormatType, timeZone: ODSFoundation.TimeZoneType = .local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toString(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style, isRelative: Swift.Bool = false, timeZone: Foundation.TimeZone = Foundation.NSTimeZone.local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toStringWithRelativeTime(strings: [ODSFoundation.RelativeTimeStringType : Swift.String]? = nil) -> Swift.String
  public func compare(_ comparison: ODSFoundation.DateComparisonType) -> Swift.Bool
  public func adjust(_ component: ODSFoundation.DateComponentType, offset: Swift.Int) -> Foundation.Date
  public func adjust(hour: Swift.Int?, minute: Swift.Int?, second: Swift.Int?, day: Swift.Int? = nil, month: Swift.Int? = nil) -> Foundation.Date
  public func dateFor(_ type: ODSFoundation.DateForType, calendar: Foundation.Calendar = Calendar.current) -> Foundation.Date
  public func since(_ date: Foundation.Date, in component: ODSFoundation.DateComponentType) -> Swift.Int64
  public func component(_ component: ODSFoundation.DateComponentType) -> Swift.Int?
  public func numberOfDaysInMonth() -> Swift.Int
  public func firstDayOfWeek() -> Swift.Int
  public func lastDayOfWeek() -> Swift.Int
}
extension Foundation.Date {
  public func localDate() -> Foundation.Date
}
public enum DateFormatType {
  case Year
  case YearMonth
  case Date
  case DateTime
  case DateTimeSec
  case DateTimeMilliSec
  case dotNet
  case rss
  case altRSS
  case httpHeader
  case standard
  case custom(Swift.String)
}
extension ODSFoundation.DateFormatType : Swift.Equatable {
  public static func == (lhs: ODSFoundation.DateFormatType, rhs: ODSFoundation.DateFormatType) -> Swift.Bool
}
public enum TimeZoneType {
  case local, `default`, utc, custom(Swift.Int)
}
public enum RelativeTimeStringType {
  case nowPast, nowFuture, secondsPast, secondsFuture, oneMinutePast, oneMinuteFuture, minutesPast, minutesFuture, oneHourPast, oneHourFuture, hoursPast, hoursFuture, oneDayPast, oneDayFuture, daysPast, daysFuture, oneWeekPast, oneWeekFuture, weeksPast, weeksFuture, oneMonthPast, oneMonthFuture, monthsPast, monthsFuture, oneYearPast, oneYearFuture, yearsPast, yearsFuture
  public static func == (a: ODSFoundation.RelativeTimeStringType, b: ODSFoundation.RelativeTimeStringType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateComparisonType {
  case isToday
  case isTomorrow
  case isYesterday
  case isSameDay(as: Foundation.Date)
  case isThisWeek
  case isNextWeek
  case isLastWeek
  case isSameWeek(as: Foundation.Date)
  case isThisMonth
  case isNextMonth
  case isLastMonth
  case isSameMonth(as: Foundation.Date)
  case isThisYear
  case isNextYear
  case isLastYear
  case isSameYear(as: Foundation.Date)
  case isInTheFuture
  case isInThePast
  case isEarlier(than: Foundation.Date)
  case isLater(than: Foundation.Date)
  case isWeekday
  case isWeekend
  case isGreaterThanDate(dateToCompare: Foundation.NSDate)
  case isLessThanDate(dateToCompare: Foundation.NSDate)
  case equalToDate(dateToCompare: Foundation.NSDate)
}
public enum DateComponentType {
  case second, minute, hour, day, weekday, nthWeekday, week, month, year
  public static func == (a: ODSFoundation.DateComponentType, b: ODSFoundation.DateComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateForType {
  case startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, tomorrow, yesterday, nearestMinute(minute: Swift.Int), nearestHour(hour: Swift.Int)
}
public enum DateStyleType {
  case short
  case medium
  case long
  case full
  case ordinalDay
  case weekday
  case shortWeekday
  case veryShortWeekday
  case month
  case shortMonth
  case veryShortMonth
  public static func == (a: ODSFoundation.DateStyleType, b: ODSFoundation.DateStyleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(ChartRange) open class Range : ObjectiveC.NSObject {
  @objc open var from: Swift.Double
  @objc open var to: Swift.Double
  @objc public init(from: Swift.Double, to: Swift.Double)
  @objc open func contains(_ value: Swift.Double) -> Swift.Bool
  @objc open func isLarger(_ value: Swift.Double) -> Swift.Bool
  @objc open func isSmaller(_ value: Swift.Double) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ChartDataEntryBase : ObjectiveC.NSObject {
  @objc open var y: Swift.Double
  @objc open var data: Any?
  @objc open var icon: ODSFoundation.NSUIImage?
  @objc override required dynamic public init()
  @objc public init(y: Swift.Double)
  @objc convenience public init(y: Swift.Double, data: Any?)
  @objc convenience public init(y: Swift.Double, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(y: Swift.Double, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ODSFoundation.ChartDataEntryBase {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class ScatterChartDataSet : ODSFoundation.LineScatterCandleRadarChartDataSet, ODSFoundation.IScatterChartDataSet {
  @objc(ScatterShape) public enum Shape : Swift.Int {
    case square
    case circle
    case triangle
    case cross
    case x
    case chevronUp
    case chevronDown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc open var scatterShapeSize: CoreFoundation.CGFloat
  @objc open var scatterShapeHoleRadius: CoreFoundation.CGFloat
  @objc open var scatterShapeHoleColor: ODSFoundation.NSUIColor?
  @objc open func setScatterShape(_ shape: ODSFoundation.ScatterChartDataSet.Shape)
  @objc open var shapeRenderer: ODSFoundation.IShapeRenderer?
  @objc open class func renderer(forShape shape: ODSFoundation.ScatterChartDataSet.Shape) -> ODSFoundation.IShapeRenderer
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc override public init(label: Swift.String?)
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  @objc deinit
}
@objc open class PieChartRenderer : ODSFoundation.DataRenderer {
  @objc weak open var chart: ODSFoundation.PieChartView?
  @objc public init(chart: ODSFoundation.PieChartView, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func calculateMinimumRadiusForSpacedSlice(center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, angle: CoreFoundation.CGFloat, arcStartPointX: CoreFoundation.CGFloat, arcStartPointY: CoreFoundation.CGFloat, startAngle: CoreFoundation.CGFloat, sweepAngle: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc open func getSliceSpace(dataSet: ODSFoundation.IPieChartDataSet) -> CoreFoundation.CGFloat
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IPieChartDataSet)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@objc open class AnimatedViewPortJob : ODSFoundation.ViewPortJob {
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ODSFoundation.Transformer, view: ODSFoundation.ChartViewBase, xOrigin: CoreFoundation.CGFloat, yOrigin: CoreFoundation.CGFloat, duration: Foundation.TimeInterval, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc deinit
  @objc override open func doJob()
  @objc open func start()
  @objc open func stop(finish: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(ChartMarkerImage) open class MarkerImage : ObjectiveC.NSObject, ODSFoundation.IMarker {
  @objc open var image: ODSFoundation.NSUIImage?
  @objc open var offset: CoreFoundation.CGPoint
  @objc weak open var chartView: ODSFoundation.ChartViewBase?
  @objc open var size: CoreFoundation.CGSize
  @objc override dynamic public init()
  @objc open func offsetForDrawing(atPoint point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @objc open func refreshContent(entry: ODSFoundation.ChartDataEntry, highlight: ODSFoundation.Highlight)
  @objc open func draw(context: CoreGraphics.CGContext, point: CoreFoundation.CGPoint)
  @objc deinit
}
@objc open class CandleChartDataSet : ODSFoundation.LineScatterCandleRadarChartDataSet, ODSFoundation.ICandleChartDataSet {
  @objc required dynamic public init()
  @objc override public init(entries: [ODSFoundation.ChartDataEntry]?, label: Swift.String?)
  open func calcMinMax(entry e: ODSFoundation.ChartDataEntry)
  @objc override open func calcMinMaxY(entry e: ODSFoundation.ChartDataEntry)
  @objc open var barSpace: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var showCandleBar: Swift.Bool
  @objc open var shadowWidth: CoreFoundation.CGFloat
  @objc open var shadowColor: ODSFoundation.NSUIColor?
  @objc open var shadowColorSameAsCandle: Swift.Bool
  @objc open var isShadowColorSameAsCandle: Swift.Bool {
    @objc get
  }
  @objc open var neutralColor: ODSFoundation.NSUIColor?
  @objc open var increasingColor: ODSFoundation.NSUIColor?
  @objc open var decreasingColor: ODSFoundation.NSUIColor?
  @objc open var increasingFilled: Swift.Bool
  @objc open var isIncreasingFilled: Swift.Bool {
    @objc get
  }
  @objc open var decreasingFilled: Swift.Bool
  @objc open var isDecreasingFilled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class IQTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PieRadarChartViewBase : ODSFoundation.ChartViewBase {
  @objc @_Concurrency.MainActor(unsafe) open var rotationEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var minOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open var maxVisibleCount: Swift.Int {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func notifyDataSetChanged()
  @objc @_Concurrency.MainActor(unsafe) open func angleForPoint(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func getPosition(center: CoreFoundation.CGPoint, dist: CoreFoundation.CGFloat, angle: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open func distanceToCenter(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open func indexForAngle(_ angle: CoreFoundation.CGFloat) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var rotationAngle: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var rawRotationAngle: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var diameter: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var radius: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMax: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var chartYMin: Swift.Double {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isRotationEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotationWithTwoFingers: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isRotationWithTwoFingers: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func spin(duration: Foundation.TimeInterval, fromAngle: CoreFoundation.CGFloat, toAngle: CoreFoundation.CGFloat, easing: ODSFoundation.ChartEasingFunctionBlock?)
  @objc @_Concurrency.MainActor(unsafe) open func spin(duration: Foundation.TimeInterval, fromAngle: CoreFoundation.CGFloat, toAngle: CoreFoundation.CGFloat, easingOption: ODSFoundation.ChartEasingOption)
  @objc @_Concurrency.MainActor(unsafe) open func spin(duration: Foundation.TimeInterval, fromAngle: CoreFoundation.CGFloat, toAngle: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) open func stopSpinAnimation()
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesBegan(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesMoved(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesEnded(_ touches: Swift.Set<ODSFoundation.NSUITouch>, withEvent event: ODSFoundation.NSUIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override open func nsuiTouchesCancelled(_ touches: Swift.Set<ODSFoundation.NSUITouch>?, withEvent event: ODSFoundation.NSUIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func stopDeceleration()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @objc @_Concurrency.MainActor(unsafe) open var previousBarButton: ODSFoundation.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var nextBarButton: ODSFoundation.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleBarButton: ODSFoundation.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var doneBarButton: ODSFoundation.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var fixedSpaceBarButton: ODSFoundation.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var barStyle: UIKit.UIBarStyle {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(ChartRenderer) open class Renderer : ObjectiveC.NSObject {
  @objc final public let viewPortHandler: ODSFoundation.ViewPortHandler
  @objc public init(viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LineRadarChartRenderer) open class LineRadarRenderer : ODSFoundation.LineScatterCandleRadarRenderer {
  @objc override public init(animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc open func drawFilledPath(context: CoreGraphics.CGContext, path: CoreGraphics.CGPath, fill: ODSFoundation.Fill, fillAlpha: CoreFoundation.CGFloat)
  @objc open func drawFilledPath(context: CoreGraphics.CGContext, path: CoreGraphics.CGPath, fillColor: ODSFoundation.NSUIColor, fillAlpha: CoreFoundation.CGFloat)
  @objc deinit
}
@objc public protocol IBubbleChartDataSet : ODSFoundation.IBarLineScatterCandleBubbleChartDataSet {
  @objc var maxSize: CoreFoundation.CGFloat { get }
  @objc var isNormalizeSizeEnabled: Swift.Bool { get }
  @objc var highlightCircleWidth: CoreFoundation.CGFloat { get set }
}
@objc @_inheritsConvenienceInitializers open class AppFeaturesModel : ObjectiveC.NSObject, ODSFoundation.Initable {
  @objc public var ViewType: Swift.String
  @objc public var Feature: Swift.String
  @objc public var ActiveFlag: Swift.String
  @objc public var Remarks: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAppFeaturesList(modelClass: ODSFoundation.AppFeaturesModel.Type? = AppFeaturesModel.self, filterQuery: Swift.String? = "", formate: Swift.Bool = false, completionHandler: @escaping ([Swift.String : Any], Foundation.NSError?) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RadarChartData : ODSFoundation.ChartData {
  @objc open var highlightColor: ODSFoundation.NSUIColor
  @objc open var highlightLineWidth: CoreFoundation.CGFloat
  @objc open var highlightLineDashPhase: CoreFoundation.CGFloat
  @objc open var highlightLineDashLengths: [CoreFoundation.CGFloat]?
  @objc open var labels: [Swift.String]
  open func setLabels(_ labels: Swift.String...)
  @objc override dynamic public init()
  @objc override public init(dataSets: [ODSFoundation.IChartDataSet]?)
  @objc override open func entryForHighlight(_ highlight: ODSFoundation.Highlight) -> ODSFoundation.ChartDataEntry?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CrossShapeRenderer : ObjectiveC.NSObject, ODSFoundation.IShapeRenderer {
  @objc open func renderShape(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IScatterChartDataSet, viewPortHandler: ODSFoundation.ViewPortHandler, point: CoreFoundation.CGPoint, color: ODSFoundation.NSUIColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor(unsafe) open var invocation: ODSFoundation.IQInvocation?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AppStoreModel : ObjectiveC.NSObject, ODSFoundation.Initable {
  @objc public var AppStoreName: Swift.String
  @objc public var AppStoreId: Swift.String
  @objc public var RoleID: Swift.String
  @objc public var Active: Swift.String
  @objc public var Flush: Swift.String
  @objc public var Refresh: Swift.String
  @objc public var ServiceName: Swift.String
  @objc public var SapStore: Swift.String
  @objc public var BaseUrl: Swift.String
  @objc public var EnteredBy: Swift.String
  @objc public var SyncSeq: Swift.String
  @objc public var WC_Clear: Swift.String
  @objc public var entity: ODSFoundation.SODataEntityDefault
  @objc public var entityValue: ODSFoundation.SODataV4_EntityValue
  @objc required override dynamic public init()
  public static func getAppStoreList(modelClass: ODSFoundation.AppStoreModel.Type? = AppStoreModel.self, filterQuery: Swift.String? = "", formate: Swift.Bool = false, completionHandler: @escaping (Swift.Dictionary<Swift.String, Any>, Foundation.NSError?) -> ())
  public static func getOnlineAppStoreList(httpConvManager: ODSFoundation.HttpConversationManager, filterQuery: Swift.String? = "\(appStoreSet)") -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class MessageViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var regularTintColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) final public var errorTintColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) final public var messages: ODSFoundation.StateMessageProvider
  @_Concurrency.MainActor(unsafe) final public var textLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var imageView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var borderView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class ChartDataEntry : ODSFoundation.ChartDataEntryBase, Foundation.NSCopying {
  @objc open var x: Swift.Double
  @objc required dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, data: Any?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ODSFoundation.NSUIImage?)
  @objc convenience public init(x: Swift.Double, y: Swift.Double, icon: ODSFoundation.NSUIImage?, data: Any?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ODSFoundation.ChartDataEntry {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(MoveChartViewJob) open class MoveViewJob : ODSFoundation.ViewPortJob {
  @objc override open func doJob()
  @objc override public init(viewPortHandler: ODSFoundation.ViewPortHandler, xValue: Swift.Double, yValue: Swift.Double, transformer: ODSFoundation.Transformer, view: ODSFoundation.ChartViewBase)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HorizontalBarChartView : ODSFoundation.BarChartView {
  @_Concurrency.MainActor(unsafe) @objc override open func getMarkerPosition(highlight: ODSFoundation.Highlight) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override open func getBarBounds(entry e: ODSFoundation.BarChartDataEntry) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override open func getPosition(entry e: ODSFoundation.ChartDataEntry, axis: ODSFoundation.YAxis.AxisDependency) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override open func getHighlightByTouchPoint(_ pt: CoreFoundation.CGPoint) -> ODSFoundation.Highlight?
  @_Concurrency.MainActor(unsafe) @objc override open var lowestVisibleX: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open var highestVisibleX: Swift.Double {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleXRangeMaximum(_ maxXRange: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleXRangeMinimum(_ minXRange: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleXRange(minXRange: Swift.Double, maxXRange: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleYRangeMaximum(_ maxYRange: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleYRangeMinimum(_ minYRange: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @_Concurrency.MainActor(unsafe) @objc override open func setVisibleYRange(minYRange: Swift.Double, maxYRange: Swift.Double, axis: ODSFoundation.YAxis.AxisDependency)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class BubbleChartRenderer : ODSFoundation.BarLineScatterCandleBubbleRenderer {
  @objc weak open var dataProvider: ODSFoundation.BubbleChartDataProvider?
  @objc public init(dataProvider: ODSFoundation.BubbleChartDataProvider, animator: ODSFoundation.Animator, viewPortHandler: ODSFoundation.ViewPortHandler)
  @objc override open func drawData(context: CoreGraphics.CGContext)
  @objc open func drawDataSet(context: CoreGraphics.CGContext, dataSet: ODSFoundation.IBubbleChartDataSet, dataSetIndex: Swift.Int)
  @objc override open func drawValues(context: CoreGraphics.CGContext)
  @objc override open func drawExtras(context: CoreGraphics.CGContext)
  @objc override open func drawHighlighted(context: CoreGraphics.CGContext, indices: [ODSFoundation.Highlight])
  @objc deinit
}
@objc public protocol IScatterChartDataSet : ODSFoundation.ILineScatterCandleRadarChartDataSet {
  @objc var scatterShapeSize: CoreFoundation.CGFloat { get }
  @objc var scatterShapeHoleRadius: CoreFoundation.CGFloat { get }
  @objc var scatterShapeHoleColor: ODSFoundation.NSUIColor? { get }
  @objc var shapeRenderer: ODSFoundation.IShapeRenderer? { get }
}
extension AVFoundation.AVMetadataObject.ObjectType {
  public static let upca: AVFoundation.AVMetadataObject.ObjectType
  public static var barcodeScannerMetadata: [AVFoundation.AVMetadataObject.ObjectType]
}
@objc public protocol IRadarChartDataSet : ODSFoundation.ILineRadarChartDataSet {
  @objc var drawHighlightCircleEnabled: Swift.Bool { get set }
  @objc var isDrawHighlightCircleEnabled: Swift.Bool { get }
  @objc var highlightCircleFillColor: ODSFoundation.NSUIColor? { get set }
  @objc var highlightCircleStrokeColor: ODSFoundation.NSUIColor? { get set }
  @objc var highlightCircleStrokeAlpha: CoreFoundation.CGFloat { get set }
  @objc var highlightCircleInnerRadius: CoreFoundation.CGFloat { get set }
  @objc var highlightCircleOuterRadius: CoreFoundation.CGFloat { get set }
  @objc var highlightCircleStrokeWidth: CoreFoundation.CGFloat { get set }
}
public struct ODSDatePickerResult {
  public var month: ODSFoundation.ODSMonth
  public var year: Swift.Int
  public var day: Swift.Int
  public var dateFormate: Swift.String
  public init()
}
extension ODSFoundation.ODSDatePickerResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var dateFromPicker: Swift.String {
    get
  }
  public var breakDownSearchDateFormate: Swift.String {
    get
  }
}
extension ODSFoundation.ODSDatePickerResult : Swift.Equatable {
  public static func == (lhs: ODSFoundation.ODSDatePickerResult, rhs: ODSFoundation.ODSDatePickerResult) -> Swift.Bool
}
public protocol ODSDatePickerResultValidator {
  func isValidResult(_ result: ODSFoundation.ODSDatePickerResult) -> Swift.Bool
}
extension ODSFoundation.ODSDatePickerResult {
  @_hasMissingDesignatedInitializers public class Validator : ODSFoundation.ODSDatePickerResultValidator {
    public func isValidResult(_ result: ODSFoundation.ODSDatePickerResult) -> Swift.Bool
    @objc deinit
  }
}
public protocol ODSDatePickerResultSuggestor {
  func suggestedResult(from result: ODSFoundation.ODSDatePickerResult) -> ODSFoundation.ODSDatePickerResult
}
extension ODSFoundation.ODSDatePickerResult {
  @_hasMissingDesignatedInitializers public class Suggestor : ODSFoundation.ODSDatePickerResultSuggestor {
    public func suggestedResult(from result: ODSFoundation.ODSDatePickerResult) -> ODSFoundation.ODSDatePickerResult
    @objc deinit
  }
}
extension ODSFoundation.SnackbarDuration : Swift.Equatable {}
extension ODSFoundation.SnackbarDuration : Swift.Hashable {}
extension ODSFoundation.SnackbarDuration : Swift.RawRepresentable {}
extension ODSFoundation.XAxis.LabelPosition : Swift.Equatable {}
extension ODSFoundation.XAxis.LabelPosition : Swift.Hashable {}
extension ODSFoundation.XAxis.LabelPosition : Swift.RawRepresentable {}
extension ODSFoundation.ChartLimitLine.LabelPosition : Swift.Equatable {}
extension ODSFoundation.ChartLimitLine.LabelPosition : Swift.Hashable {}
extension ODSFoundation.ChartLimitLine.LabelPosition : Swift.RawRepresentable {}
extension ODSFoundation.ExpandingMenuButton.ExpandingDirection : Swift.Equatable {}
extension ODSFoundation.ExpandingMenuButton.ExpandingDirection : Swift.Hashable {}
extension ODSFoundation.ExpandingMenuButton.ExpandingDirection : Swift.RawRepresentable {}
extension ODSFoundation.ExpandingMenuButton.MenuTitleDirection : Swift.Equatable {}
extension ODSFoundation.ExpandingMenuButton.MenuTitleDirection : Swift.Hashable {}
extension ODSFoundation.ExpandingMenuButton.MenuTitleDirection : Swift.RawRepresentable {}
extension ODSFoundation.ExpandingMenuButton.HapticFeedbackStyle : Swift.Equatable {}
extension ODSFoundation.ExpandingMenuButton.HapticFeedbackStyle : Swift.Hashable {}
extension ODSFoundation.ExpandingMenuButton.HapticFeedbackStyle : Swift.RawRepresentable {}
extension ODSFoundation.ActionSheetPopoverStyle : Swift.Equatable {}
extension ODSFoundation.ActionSheetPopoverStyle : Swift.Hashable {}
extension ODSFoundation.ActionSheetPopoverStyle : Swift.RawRepresentable {}
extension ODSFoundation.PieChartDataSet.ValuePosition : Swift.Equatable {}
extension ODSFoundation.PieChartDataSet.ValuePosition : Swift.Hashable {}
extension ODSFoundation.PieChartDataSet.ValuePosition : Swift.RawRepresentable {}
extension ODSFoundation.SelectionStyle : Swift.Equatable {}
extension ODSFoundation.SelectionStyle : Swift.Hashable {}
extension ODSFoundation.CellSelectionStyle : Swift.Equatable {}
extension ODSFoundation.CellSelectionStyle : Swift.Hashable {}
extension ODSFoundation.ToastPosition : Swift.Equatable {}
extension ODSFoundation.ToastPosition : Swift.Hashable {}
extension ODSFoundation.ODSMonth : Swift.Equatable {}
extension ODSFoundation.ODSMonth : Swift.Hashable {}
extension ODSFoundation.ODSMonth : Swift.RawRepresentable {}
extension ODSFoundation.ChartViewBase.ImageFormat : Swift.Equatable {}
extension ODSFoundation.ChartViewBase.ImageFormat : Swift.Hashable {}
extension ODSFoundation.ODSDatePickerStyle : Swift.Equatable {}
extension ODSFoundation.ODSDatePickerStyle : Swift.Hashable {}
extension ODSFoundation.ODSDatePickerStyle : Swift.RawRepresentable {}
extension ODSFoundation.ODSPickerType : Swift.Equatable {}
extension ODSFoundation.ODSPickerType : Swift.Hashable {}
extension ODSFoundation.CombinedChartView.DrawOrder : Swift.Equatable {}
extension ODSFoundation.CombinedChartView.DrawOrder : Swift.Hashable {}
extension ODSFoundation.CombinedChartView.DrawOrder : Swift.RawRepresentable {}
extension ODSFoundation.YAxis.LabelPosition : Swift.Equatable {}
extension ODSFoundation.YAxis.LabelPosition : Swift.Hashable {}
extension ODSFoundation.YAxis.LabelPosition : Swift.RawRepresentable {}
extension ODSFoundation.YAxis.AxisDependency : Swift.Equatable {}
extension ODSFoundation.YAxis.AxisDependency : Swift.Hashable {}
extension ODSFoundation.YAxis.AxisDependency : Swift.RawRepresentable {}
extension ODSFoundation.logEventType : Swift.Equatable {}
extension ODSFoundation.logEventType : Swift.Hashable {}
extension ODSFoundation.logEventType : Swift.RawRepresentable {}
extension ODSFoundation.ChartDataSetRounding : Swift.Equatable {}
extension ODSFoundation.ChartDataSetRounding : Swift.Hashable {}
extension ODSFoundation.ChartDataSetRounding : Swift.RawRepresentable {}
extension ODSFoundation.FocusViewType : Swift.Equatable {}
extension ODSFoundation.FocusViewType : Swift.Hashable {}
extension ODSFoundation.TimeMeridian : Swift.Equatable {}
extension ODSFoundation.TimeMeridian : Swift.Hashable {}
extension ODSFoundation.Legend.Form : Swift.Equatable {}
extension ODSFoundation.Legend.Form : Swift.Hashable {}
extension ODSFoundation.Legend.Form : Swift.RawRepresentable {}
extension ODSFoundation.Legend.HorizontalAlignment : Swift.Equatable {}
extension ODSFoundation.Legend.HorizontalAlignment : Swift.Hashable {}
extension ODSFoundation.Legend.HorizontalAlignment : Swift.RawRepresentable {}
extension ODSFoundation.Legend.VerticalAlignment : Swift.Equatable {}
extension ODSFoundation.Legend.VerticalAlignment : Swift.Hashable {}
extension ODSFoundation.Legend.VerticalAlignment : Swift.RawRepresentable {}
extension ODSFoundation.Legend.Orientation : Swift.Equatable {}
extension ODSFoundation.Legend.Orientation : Swift.Hashable {}
extension ODSFoundation.Legend.Orientation : Swift.RawRepresentable {}
extension ODSFoundation.Legend.Direction : Swift.Equatable {}
extension ODSFoundation.Legend.Direction : Swift.Hashable {}
extension ODSFoundation.Legend.Direction : Swift.RawRepresentable {}
extension ODSFoundation.LineChartDataSet.Mode : Swift.Equatable {}
extension ODSFoundation.LineChartDataSet.Mode : Swift.Hashable {}
extension ODSFoundation.LineChartDataSet.Mode : Swift.RawRepresentable {}
extension ODSFoundation.TorchMode : Swift.Equatable {}
extension ODSFoundation.TorchMode : Swift.Hashable {}
extension UIKit.UIImage.JPEGQuality : Swift.Equatable {}
extension UIKit.UIImage.JPEGQuality : Swift.Hashable {}
extension UIKit.UIImage.JPEGQuality : Swift.RawRepresentable {}
extension LocalAuthentication.LAContext.BiometricType : Swift.Equatable {}
extension LocalAuthentication.LAContext.BiometricType : Swift.Hashable {}
extension LocalAuthentication.LAContext.BiometricType : Swift.RawRepresentable {}
extension ODSFoundation.FillType : Swift.Equatable {}
extension ODSFoundation.FillType : Swift.Hashable {}
extension ODSFoundation.FillType : Swift.RawRepresentable {}
extension ODSFoundation.DropDown.DismissMode : Swift.Equatable {}
extension ODSFoundation.DropDown.DismissMode : Swift.Hashable {}
extension ODSFoundation.DropDown.Direction : Swift.Equatable {}
extension ODSFoundation.DropDown.Direction : Swift.Hashable {}
extension ODSFoundation.ChartEasingOption : Swift.Equatable {}
extension ODSFoundation.ChartEasingOption : Swift.Hashable {}
extension ODSFoundation.ChartEasingOption : Swift.RawRepresentable {}
extension ODSFoundation.IQAutoToolbarManageBehaviour : Swift.Equatable {}
extension ODSFoundation.IQAutoToolbarManageBehaviour : Swift.Hashable {}
extension ODSFoundation.IQAutoToolbarManageBehaviour : Swift.RawRepresentable {}
extension ODSFoundation.IQPreviousNextDisplayMode : Swift.Equatable {}
extension ODSFoundation.IQPreviousNextDisplayMode : Swift.Hashable {}
extension ODSFoundation.IQPreviousNextDisplayMode : Swift.RawRepresentable {}
extension ODSFoundation.IQEnableMode : Swift.Equatable {}
extension ODSFoundation.IQEnableMode : Swift.Hashable {}
extension ODSFoundation.IQEnableMode : Swift.RawRepresentable {}
extension ODSFoundation.RelativeTimeStringType : Swift.Equatable {}
extension ODSFoundation.RelativeTimeStringType : Swift.Hashable {}
extension ODSFoundation.DateComponentType : Swift.Equatable {}
extension ODSFoundation.DateComponentType : Swift.Hashable {}
extension ODSFoundation.DateStyleType : Swift.Equatable {}
extension ODSFoundation.DateStyleType : Swift.Hashable {}
extension ODSFoundation.ScatterChartDataSet.Shape : Swift.Equatable {}
extension ODSFoundation.ScatterChartDataSet.Shape : Swift.Hashable {}
extension ODSFoundation.ScatterChartDataSet.Shape : Swift.RawRepresentable {}
